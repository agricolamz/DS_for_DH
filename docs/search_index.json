[
["работа-с-геоданными-leaflet.html", "10 Работа с геоданными: leaflet 10.1 Векторная и растровая графика 10.2 Картографические примитивы 10.3 Формат данных 10.4 leaflet", " 10 Работа с геоданными: leaflet library(&quot;tidyverse&quot;) 10.1 Векторная и растровая графика Перед тем как обсуждать карты, следует сначала обсудить разницу между векторной и растровой графикой. Растровые изображения представляют собой набор упорядоченных пикселей, про каждый из которых храниться информация о цвете. Векторное изображение нельзя бесконечно увеличивать — в какой-то момент станут видны пиксели, которые в каком-то смысле являются пределом увелечения. Наиболее популярные форматы растровых изображений: JPEG, GIF, PNG, BMP, TIFF и другие. В векторных изображениях инормация храниться как собрани точек, линий и полигонов в некоторой системе координат, что позволяет бесконечно увеличивать такие изображения не теряя в качестве. Наиболее популярные форматы векторных изображений: PDF, SVG, EPS и другие. Современные технологии позволяют соединять растровые и векторные изображения, а также трансформировать их друг в друга. Картографические данные могут попадать в разные типы: точки (столицы всех стран), линии (улицы в каком-нибудь городе), полигоны (границы стран и меньших регионов) обычно имеют некоторую геопривязку (для простоты давайте считать такими, все, что имеет широту и долготу), так что могут быть представлены векторно, однако существует достаточно много информации, которую невозможно представить никак подругому, кроме как векторно: спутниковые снимки, существующие физические/политические/климатические/исторические и т. п. карты, выдача картографических сервисов, таких как Google Maps. Кроме того, занимаясь любыми типами визуализации следует помнить о разнице статической визаулизации, которую после создания нельзя изменить, и динамической визуализации, которая позволяет пользователям изменять себя (увеличиваться и уменьшаться, кликать на собрание точек и видеть их значения и т. п.). В данной главе, в отличие от предыдущих мы сосредоточимся на пакете для динамичского картографирования leaflet. Достаточно много тем останется за пределами этой главы: изменение проекции, манипуляции с географическими данными, работа с растровыми изображениями и другие (см., например, (Lovelace, Nowosad, and Muenchow 2019), доступная здесь). 10.2 Картографические примитивы В картографии существуют свои элементарные единицы: Эти единицы поддерживают популярные пакеты для манипуляции с георграфическими объектами: sp, sf и другие. В данном разделе мы не будем учиться операциям с этими объектами (объединение, вычитание и т. п., подробности смотрите в документации к пакету sp или в уже упомянавшейся книжке (Lovelace, Nowosad, and Muenchow 2019)). 10.3 Формат данных 10.3.1 .csv файлы Источником географических данных могут быть обычные привычные нам csv файлы. Например, вот здесь, хранится датасет из проекта The Unwelcomed Мохамада А. Вэйкда (Mohamad A. Waked), содержащий информацию о месте и причинах смерти мигрантов и беженцев по всему миру с января 2014 года по июнь 2019 года. unwelcomed &lt;- read_csv(&quot;https://raw.githubusercontent.com/agricolamz/DS_for_DH/master/data/death_of_migrants_and_refugees_from_the_Unwelcomed_project.csv&quot;) id — идентификационный номер; date — дата происшедшего; total_death_missing — количество погибших/пропавших; location — место происшедшего; lat — широта; lon — долгота; collapsed_region — обобщенная информация о регионе; region — информация о регионе; collapsed_cause — обобщенная информация о причине смерти; cause_of_death — информация о причине смерти. Информация о широте и долготе иногда записывают в градусах, минутах и секундах, а иногда в десятичной записи, в R обычно используется десятичная запись. В интернете легко найти конвертеры из одного формата в другой и обратно. 10.3.2 .shp файлы 10.3.3 .geojson файлы … В данном разделе мы будем анализировать датасет, содержащий данные по всем странам мира. countries &lt;- jsonlite::read_json(&quot;https://github.com/agricolamz/DS_for_DH/raw/master/data/countries.geojson&quot;) Обратите внимание, как уже говорилось в разделе @ref{lists}, так как jsonlite конфликтует с одной из функций из tidyverse, я не загружаю библиотеку полностью при помощи команды library(jsonlite), а обращаюсь к функциям пакета при помощи выражения jsonlite::...(). В загруженном датасете достаточно много переменных, мы попробуем проанализировать количество населения и уровень доходов. countries$features %&gt;% map(&quot;properties&quot;) %&gt;% tibble(name = map_chr(., &quot;name&quot;), pop_est = map_chr(., &quot;pop_est&quot;), income = map_chr(., &quot;income_grp&quot;)) %&gt;% select(-1) %&gt;% mutate(pop_est = as.double(pop_est), income = as.factor(income)) -&gt; country_features country_features Еще одно преимущество формата .geojson заключается в том, что его позволяет просматривать github (см. пример). 10.4 leaflet Для начала включим библиотеку: library(&quot;leaflet&quot;) 10.4.1 Комбинация карт: leafsync Включим библиотеку: library(&quot;leafsync&quot;) 10.4.2 Работа с .geojson Самый простой способ визуализировать .geojson это используя функцию addGeoJSON(), которая в качестве аргумента принимает .geojson файл. leaflet() %&gt;% addGeoJSON(geojson = countries) Проблема этого подхода заключается в том, что файл .geojson содержит в себе форматирование, поэтому если пользователь хочет поменять отображение объектов, необходимо добавить список style к каждому узлу. Во-первых, нужно добавить список style в корень файла .geojson. В результате, это изменит отображение всех списков: countries$style = list( weight = 1, color = &quot;#555555&quot;, opacity = 1, fillOpacity = 0.8 ) leaflet() %&gt;% addGeoJSON(geojson = countries) Во-вторых следует создать палитры для раскрашивания. Это делается при помощи функций colorNumeric(), colorFactor(), colorBin() или colorQuantile(). pal_num &lt;- colorNumeric(&quot;Greens&quot;, domain = c(min(country_features$pop_est), max(country_features$pop_est))) pal_cat &lt;- colorFactor(&quot;RdYlBu&quot;, domain = country_features$income) Созданные переменные pal_num() и pal_cat() сами являются функциями и возвращают раскраску в зависимости от значения: pal_num(country_features$pop_est[1]) ## [1] &quot;#F7FCF5&quot; pal_cat(country_features$income[1]) ## [1] &quot;#FDAE61&quot; В-третьих нужно создать векторы с новыми цветами: country_features %&gt;% mutate(pop_est_color = pal_num(pop_est), income_color = pal_cat(income)) -&gt; country_features country_features В-четвертых нужно присвоить каждому узлу свой список style: map(seq_along(countries$features), function(x){ countries$features[[x]]$properties$style &lt;- list(fillColor = country_features$income_color[x]) countries$features[[x]] }) -&gt; countries$features И последний, пятый шаг, это нарисовать получивший .geojson: leaflet() %&gt;% addGeoJSON(geojson = countries) %&gt;% addLegend(pal = pal_cat, values = country_features$income, title = &quot;Income&quot;) Шаги 4 и 5 можно повторить и для числовой переменной: map(seq_along(countries$features), function(x){ countries$features[[x]]$properties$style &lt;- list(fillColor = country_features$pop_est_color[x]) countries$features[[x]] }) -&gt; countries$features leaflet() %&gt;% addGeoJSON(geojson = countries) %&gt;% addLegend(pal = pal_num, values = country_features$pop_est, title = &quot;Population&quot;) Ссылки на литературу "]
]
