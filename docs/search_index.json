[
["index.html", "Наука о данных в R для программы Цифровых гуманитарных исследований 1 О курсе", " Наука о данных в R для программы Цифровых гуманитарных исследований Г. А. Мороз, И. С. Поздняков 1 О курсе Материалы для курса Наука о данных для магистерской программы Цифровых гуманитарные исследования НИУ ВШЭ. "],
["intro.html", "2 Введение в R 2.1 Наука о данных 2.2 Установка R и RStudio 2.3 Полезные ссылки 2.4 Rstudio 2.5 Введение в R 2.6 Типы данных 2.7 Вектор 2.8 Матрицы (matrix) 2.9 Списки (list) 2.10 Data.frame 2.11 Начинаем работу с реальными данными 2.12 Препроцессинг данных в R", " 2 Введение в R 2.1 Наука о данных Наука о данных — это новая область знаний, которая активно развивается в последнее время. Она находиться на пересечении компьютерных наук, статистики и математики, и трудно сказать, действительно ли это наука. При этом это движение развивается в самых разных научных направлениях, иногда даже оформляясь в отдельную отрасль: биоинформатика вычислительная криминалистика цифровые гуманитарные исследования датажурналистика … Все больше книг “Data Science for …”: psychologists (Hansjörg 2019) immunologists (Thomas and Pallett 2019) business (Provost and Fawcett 2013) public policy (Brooks and Cooper 2013) fraud detection (Baesens, Van Vlasselaer, and Verbeke 2015) … Среди умений датасаентистов можно перечислить следующие: сбор и обработка данных трансформация данных визуализация данных статистическое моделирование данных представление полученных результатов организация всей работы воспроизводимым способом Большинство этих тем в той или иной мере будет представлено в нашем курсе. 2.2 Установка R и RStudio В данной книге используется исключительно R (R Core Team 2019), так что для занятий понадобятся: R на Windows на Mac на Linux, также можно добавить зеркало и установить из командной строки: sudo apt-get install r-cran-base RStudio — IDE для R (можно скачать здесь) и некоторые пакеты на R Часто можно увидеть или услышать, что R — язык программирования для “статистической обработки данных”. Изначально это, конечно, было правдой, но уже давно R — это полноценный язык программирования, который при помощи своих пакетов позволяет решать огромный спектр задач. В данной книге используется следующая версия R: ## [1] &quot;R version 4.0.2 (2020-06-22)&quot; Некоторые люди не любят устанавливать лишние программы себе на компьютер, несколько вариантов есть и для них: RStudio cloud — полная функциональность RStudio, пока бесплатная, но скоро это исправят; RStudio on rollApp — облачная среда, позволяющая разворачивать программы. Первый и вполне закономерный вопрос: зачем мы ставили R и отдельно еще какой-то RStudio? Если опустить незначительные детали, то R — это сам язык программирования, а RStudio — это среда (IDE), которая позволяет в этом языке очень удобно работать. 2.3 Полезные ссылки В интернете легко найти документацию и туториалы по самым разным вопросам в R, так что главный залог успеха — грамотно пользоваться поисковиком, и лучше на английском языке. книга (Wickham and Grolemund 2016) является достаточно сильной альтернативой всему курсу stackoverflow — сервис, где достаточно быстро отвечают на любые вопросы (не обязательно по R) RStudio community — быстро отвечают на вопросы, связанные с R русский stackoverflow R-bloggers — сайт, где собираются новинки, связанные с R чат, где можно спрашивать про R на русском (но почитайте правила чата, перед тем как спрашивать) чат по визуализации данных, чат датажурналистов канал про визуализацию, дата-блог “Новой газеты”, … 2.4 Rstudio Когда вы откроете RStudio первый раз, вы увидите три панели: консоль, окружение и историю, а также панель для всего остального. Если ткнуть в консоли на значок уменьшения, то можно открыть дополнительную панель, где можно писать скрипт. Существуют разные типы пользователей: одни любят работать в консоли (на картинке это 2 — R Console), другие предпочитают скрипты (1 — Code Editor). Консоль позволяет использовать интерактивный режим команда-ответ, а скрипт является по сути текстовым документом, фрагменты которого можно для отладки запускать в консоли. 3 — Workspace and History: Здесь можно увидеть переменные. Это поле будет автоматически обновляться по мере того, как Вы будете запускать строчки кода и создавать новые переменные. Еще там есть вкладка с историей последних команд, которые были запущены. 4 — Plots and files: Здесь есть очень много всего. Во-первых, небольшой файловый менеджер, во-вторых, там будут появляться графики, когда вы будете их рисовать. Там же есть вкладка с вашими пакетами (Packages) и Help по функциям. Но об этом потом. 2.5 Введение в R 2.5.1 R как калькулятор Ой-ей, консоль, скрипт че-то все непонятно. Давайте начнем с самого простого и попробуем использовать R как простой калькулятор. +, -, *, /, ^ (степень), () и т.д. Просто запускайте в консоли пока не надоест: 40+2 ## [1] 42 3-2 ## [1] 1 5*6 ## [1] 30 99/9 ## [1] 11 2^3 ## [1] 8 (2+2)*2 ## [1] 8 Ничего сложного, верно? Вводим выражение и получаем результат. Порядок выполнения арифметических операций как в математике, так что не забывайте про скобочки. Если Вы не уверены в том, какие операции имеют приоритет, то используйте скобочки, чтобы точно обозначить, в каком порядке нужно производить операции. 2.5.2 Функции Давайте теперь извлечем корень из какого-нибудь числа. В принципе, тем, кто помнит школьный курс математики, возведения в степень вполне достаточно: 16^0.5 ## [1] 4 Ну а если нет, то можете воспользоваться специальной функцией: это обычно какие-то буквенные символы с круглыми скобками сразу после названия функции. Мы подаем на вход (внутрь скобочек) какие-то данные, внутри этих функций происходят какие-то вычисления, которые выдают в ответ какие-то другие данные (или же функция записывает файл, рисует график и т.д.). Вот, например, функция для корня: sqrt(16) ## [1] 4 R — case-sensitive язык, т.е. регистр важен. SQRT(16) не будет работать. А вот так выглядит функция логарифма: log(8) ## [1] 2.079442 Так, вроде бы все нормально, но… Если Вы еще что-то помните из школьной математики, то должны понимать, что что-то здесь не так. Здесь не хватает основания логарифма! Логарифм — показатель степени, в которую надо возвести число, называемое основанием, чтобы получить данное число. То есть у логарифма 8 по основанию 2 будет значение 3: \\(\\log_2 8 = 3\\) То есть если возвести 2 в степень 3 у нас будет 8: \\(2^3 = 8\\) Только наша функция считает все как-то не так. Чтобы понять, что происходит, нам нужно залезть в хэлп этой функции: ?log Справа внизу в RStudio появится вот такое окно: Действительно, у этой функции есть еще аргумент base =. По дефолту он равен числу Эйлера (2.7182818…), т.е. функция считает натуральный логарифм. В большинстве функций R есть какой-то основной инпут — данные в том или ином формате, а есть и дополнительные параметры, которые можно прописывать вручную, если параметры по умолчанию нас не устраивают. log(x = 8, base = 2) ## [1] 3 …или просто (если Вы уверены в порядке аргументов): log(8,2) ## [1] 3 Более того, Вы можете использовать оутпут одних функций как инпут для других: log(8, sqrt(4)) ## [1] 3 Если эксплицитно писать имена аргументов, то их порядок в функции не важен: log(base = 2, x = 8) ## [1] 3 А еще можно недописывать имена аргументов, если они не совпадают с другими: log(b = 2, x = 8) ## [1] 3 Мы еще много раз будем возвращаться к функциям. Вообще, функции — это одна из важнейших штук в R (примерно так же как и в Python). Мы будем создавать свои функции, использовать функции как инпут для функций и многое-многое другое. В R очень крутые возможности работы с функциями. Поэтому подружитесь с функциями, они клевые. Арифметические знаки, которые мы использовали: +,-,/,^ и т.д. называются операторами и на самом деле тоже являются функциями: &#39;+&#39;(3,4) ## [1] 7 2.5.3 Переменные Важная штука в программировании на практически любом языке — возможность сохранять значения в переменных. В R это обычно делается с помощью вот этих символов: &lt;- (но можно использовать и обычное =, хотя это не очень принято). Для этого есть удобное сочетание клавиш: нажмите одновременно Alt - (или option - на Маке). a &lt;- 2 a ## [1] 2 После присвоения переменная появляется во вкладке Environment в RStudio: Можно использовать переменные в функциях и просто вычислениях: b &lt;- a^a+a*a b ## [1] 8 log(b,a) ## [1] 3 Вы можете сравнивать разные переменные: a == b ## [1] FALSE Заметьте, что сравнивая две переменные мы используем два знака равно ==, а не один =. Иначе это будет означать присвоение. a = b a ## [1] 8 Теперь Вы сможете понять комикс про восстание роботов на следующей странице (пусть он и совсем про другой язык программирования) Этот комикс объясняет, как важно не путать присваивание и сравнение (хотя я иногда путаю до сих пор =( ). Иногда нам нужно проверить на неравенство: a &lt;- 2 b &lt;- 3 a==b ## [1] FALSE a!=b ## [1] TRUE Восклицательный язык в программировании вообще и в R в частности стандартно означает отрицание. Еще мы можем сравнивать на больше/меньше: a&gt;b ## [1] FALSE a&lt;b ## [1] TRUE a&gt;=b ## [1] FALSE a&lt;=b ## [1] TRUE 2.6 Типы данных До этого момента мы работали только с числами (numeric): class(a) ## [1] &quot;numeric&quot; Вообще, в R много типов numeric: integer (целые), double (с десятичной дробью), complex (комплексные числа). Последние пишутся так: complexnumber &lt;- 2+2i Однако в R с этим обычно можно вообще не заморачиваться, R сам будет конвертить между форматами при необходимости. Немного подробностей здесь: Разница между numeric и integer, Как работать с комплексными числами в R Теперь же нам нужно ознакомиться с двумя другими важными типами данных в R: character: строки символов. Они должны выделяться кавычками. Можно использовать как \", так и ' (что удобно, когда строчка внутри уже содержит какие-то кавычки). s &lt;- &quot;Всем привет!&quot; s ## [1] &quot;Всем привет!&quot; class(s) ## [1] &quot;character&quot; logical: просто TRUE или FALSE. t1 &lt;- TRUE f1 &lt;- FALSE t1 ## [1] TRUE f1 ## [1] FALSE Вообще, можно еще писать T и F (но не True и False!) t2 &lt;- T f2 &lt;- F Это дурная практика, так как R защищает от перезаписи переменные TRUE и FALSE, но не защищает от этого T и F TRUE &lt;- FALSE ## Error in TRUE &lt;- FALSE: invalid (do_set) left-hand side to assignment TRUE ## [1] TRUE T &lt;- FALSE T ## [1] FALSE Теперь вы можете догадаться, что результаты сравнения, например, числовых или строковых переменных вы можете сохранять в переменные тоже! comparison &lt;- a == b comparison ## [1] FALSE Это нам очень понадобится, когда мы будем работать с реальными данными: нам нужно будет постоянно вытаскивать какие-то данные из датасета, а это как раз и построено на игре со сравнением переменных. Чтобы этим хорошо уметь пользоваться, нам нужно еще освоить как работать с логическими операторами. Про один мы немного уже говорили — это не (!): t1 ## [1] TRUE !t1 ## [1] FALSE !!t1 #Двойное отрицание! ## [1] TRUE Еще есть И (выдаст TRUE только в том случае если обе переменные TRUE): t1&amp;t2 ## [1] TRUE t1&amp;f1 ## [1] FALSE А еще ИЛИ (выдаст TRUE в случае если хотя бы одна из переменных TRUE): t1 | f1 ## [1] TRUE f1 | f2 ## [1] FALSE Если кому-то вдруг понадобиться другое ИЛИ — есть функция xor(), принимающий два аргумента. Поздравляю, мы только что разобрались с самой занудной частью. Пора переходить к важному и интересному. ВЕКТОРАМ! 2.7 Вектор Если у вас не было линейной алгебры (или у вас с ней было все плохо), то просто запомните, что вектор (или atomic vector или atomic) — это набор (столбик) чисел в определенном порядке. P.S. Если вы привыкли из школьного курса физики считать вектора стрелочками, то не спешите возмущаться и паниковать. Представьте стрелочки как точки из нуля координат {0,0} до какой-то точки на координатной плоскости, например, {2,1}. Вот последние два числа и будем считать вектором. Поэтому постарайтесь на время выбросить стрелочки из головы. На самом деле, мы уже работали с векторами в R, но, возможно, Вы об этом даже не догадывались. Дело в том, что в R нет как таковых “значений”, есть вектора длиной 1. Такие дела! Чтобы создать вектор из нескольких значений, нужно воспользоваться функцией c(): c(4,8,15,16,23,42) ## [1] 4 8 15 16 23 42 c(&quot;Хэй&quot;, &quot;Хэй&quot;, &quot;Ха&quot;) ## [1] &quot;Хэй&quot; &quot;Хэй&quot; &quot;Ха&quot; Одна из самых мерзких и раздражающих причин ошибок в коде — это использование с из кириллицы вместо c из латиницы. Видите разницу? И я не вижу. А R видит. И об этом сообщает: с(3, 4, 5) ## Error in с(3, 4, 5): could not find function &quot;с&quot; Для создания числовых векторов есть удобный оператор : 1:10 ## [1] 1 2 3 4 5 6 7 8 9 10 5:-3 ## [1] 5 4 3 2 1 0 -1 -2 -3 Этот оператор создает вектор от первого числа до второго с шагом 1. Вы не представляете, как часто эта штука нам пригодится… Если же нужно сделать вектор с другим шагом, то есть функция seq(): seq(10,100, by = 10) ## [1] 10 20 30 40 50 60 70 80 90 100 Кроме того, можно задавать не шаг, а длину вектора. Тогда шаг функция seq() посчитает сама: seq(1,13, length.out = 4) ## [1] 1 5 9 13 Другая функция — rep() — позволяет создавать вектора с повторяющимися значениями. Первый аргумент — значение, которое нужно повторять, а второй аргумент — сколько раз повторять. rep(1, 5) ## [1] 1 1 1 1 1 И первый, и второй аргумент могут быть векторами! rep(1:3, 3) ## [1] 1 2 3 1 2 3 1 2 3 rep(1:3, 1:3) ## [1] 1 2 2 3 3 3 Еще можно объединять вектора (что мы, по сути, и делали, просто с векторами длиной 1): v1 &lt;- c(&quot;Hey&quot;, &quot;Ho&quot;) v2 &lt;- c(&quot;Let&#39;s&quot;, &quot;Go!&quot;) c(v1,v2) ## [1] &quot;Hey&quot; &quot;Ho&quot; &quot;Let&#39;s&quot; &quot;Go!&quot; 2.7.1 Coercion Что будет, если вы объедините два вектора с значениями разных типов? Ошибка? Мы уже обсуждали, что в atomic может быть только один тип данных. В некоторых языках программирования при операции с данными разных типов мы бы получили ошибку. А вот в R при несовпадении типов пройзойдет попытка привести типы к “общему знаменателю”, то есть конвертировать данные в более “широкий” тип. Например: c(FALSE, 2) ## [1] 0 2 FALSE превратился в 0 (а TRUE превратился бы в 1), чтобы можно было оба значения объединить в вектор. То же самое произошло бы в случае операций с векторами: 2 + TRUE ## [1] 3 Это называется coercion. Более сложный пример: c(TRUE, 3, &quot;Привет&quot;) ## [1] &quot;TRUE&quot; &quot;3&quot; &quot;Привет&quot; У R есть иерархия коэрсинга: NULL &lt; raw &lt; logical &lt; integer &lt; double &lt; complex &lt; character &lt; list &lt; expression. Мы из этого списка еще многого не знаем, сейчас важно запомнить, что логические данные — TRUE и FALSE — превращаются в 0 и 1 соответственно, а 0 и 1 в строчки \"0\" и \"1\". Если Вы боитесь полагаться на coercion, то можете воспользоваться функциями as.нужныйтипданных: as.numeric(c(TRUE, FALSE, FALSE)) ## [1] 1 0 0 as.character(as.numeric(c(TRUE, FALSE, FALSE))) ## [1] &quot;1&quot; &quot;0&quot; &quot;0&quot; Можно превращать и обратно, например, строковые значения в числовые. Если среди числа встретится буква или другой неподходящий знак, то мы получим предупреждение NA — пропущенное значение (мы очень скоро научимся с ними работать). as.numeric(c(&quot;1&quot;, &quot;2&quot;, &quot;три&quot;)) ## Warning: NAs introduced by coercion ## [1] 1 2 NA 2.7.2 Операции с векторами Все те арифметические операции, что мы использовали ранее, можно использовать с векторами одинаковой длины: n &lt;- 1:4 m &lt;- 4:1 n + m ## [1] 5 5 5 5 n - m ## [1] -3 -1 1 3 n * m ## [1] 4 6 6 4 n / m ## [1] 0.2500000 0.6666667 1.5000000 4.0000000 n ^ m + m * (n - m) ## [1] -11 5 11 7 Если после какого-нибудь MATLAB Вы привыкли, что по умолчанию операторы работают по правилам линейной алгебры и m*n будет давать скалярное произведение (dot product), то снова нет. Для скалярного произведения нужно использовать операторы с % по краям: n %*% m ## [,1] ## [1,] 20 Абсолютно так же и с операциями с матрицами в R, хотя про матрицы будет немного позже. В принципе, большинство функций в R, которые работают с отдельными значениями, так же хорошо работают и с целыми векторами. Скажем, Вы хотите извлечь корень из нескольких чисел, для этого не нужны никакие циклы (как это обычно делается в других языках программирования). Можно просто “скормить” вектор функции и получить результат применения функции к каждому элементу вектора: sqrt(1:10) ## [1] 1.000000 1.414214 1.732051 2.000000 2.236068 2.449490 2.645751 2.828427 ## [9] 3.000000 3.162278 2.7.3 Recycling Допустим мы хотим совершить какую-нибудь операцию с двумя векторами. Как мы убедились, с этим обычно нет никаких проблем, если они совпадают по длине. А что если вектора не совпадают по длине? Ничего страшного! Здесь будет работать правило ресайклинга (recycling = правило переписывания). Это означает, что если короткий вектор кратен по длине длинному, то он будет повторять короткий необходимое количество раз: n &lt;- 1:4 m &lt;- 1:2 n * m ## [1] 1 4 3 8 А что будет, если совершать операции с вектором и отдельным значением? Можно считать это частным случаем ресайклинга: короткий вектор длиной 1 будет повторятся столько раз, сколько нужно, чтобы он совпадал по длине с длинным: n * 2 ## [1] 2 4 6 8 Если же меньший вектор не кратен большему (например, один из них длиной 3, а другой длиной 4), то R посчитает результат, но выдаст предупреждение. n + c(3,4,5) ## Warning in n + c(3, 4, 5): longer object length is not a multiple of shorter ## object length ## [1] 4 6 8 7 Проблема в том, что эти предупреждения могут в неожиданный момент стать причиной ошибок. Поэтому не стоит полагаться на ресайклинг некратных по длине векторов. См. здесь. А вот ресайклинг кратных по длине векторов — это очень удобная штука, которая используется очень часто. 2.7.4 Индексирование векторов Итак, мы подошли к одному из самых сложных моментов. И одному из основных. От того, как хорошо вы научись с этим работать, зависит весь Ваш дальнейший успех на R-поприще! Речь пойдет об индексировании векторов. Задача, которую Вам придется решать каждые пять минут работы в R - как выбрать из вектора (или же списка, матрицы и датафрейма) какую-то его часть. Для этого используются квадратные скобочки [] (не круглые - они для функций!). Самое простое - индексировать по номеру индекса, т.е. порядку значения в векторе. n &lt;- 1:10 n[1] ## [1] 1 n[10] ## [1] 10 Если вы знакомы с другими языками программирования (не MATLAB, там все так же) и уже научились думать, что индексация с 0 — это очень удобно и очень правильно (ну или просто свыклись с этим), то в R Вам придется переучиться обратно. Здесь первый индекс — это 1, а последний равен длине вектора — ее можно узнать с помощью функции length(). С обоих сторон индексы берутся включительно. С помощью индексирования можно не только вытаскивать имеющиеся значения в векторе, но и присваивать им новые: n[3] &lt;- 20 n ## [1] 1 2 20 4 5 6 7 8 9 10 Конечно, можно использовать целые векторы для индексирования: n[4:7] ## [1] 4 5 6 7 n[10:1] ## [1] 10 9 8 7 6 5 4 20 2 1 Индексирование с минусом выдаст вам все значения вектора кроме выбранных (простите, пользователя Python, которые ожидают здесь отсчет с конца…): n[-1] ## [1] 2 20 4 5 6 7 8 9 10 n[c(-4, -5)] ## [1] 1 2 20 6 7 8 9 10 Более того, можно использовать логический вектор для индексирования. В этом случае нужен логический вектор такой же длины: n[c(TRUE,FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,FALSE,TRUE,FALSE)] ## [1] 1 20 5 7 9 Ну а если они не равны, то тут будет снова работать правило ресайклинга! n[c(TRUE,FALSE)] #то же самое - recycling rule! ## [1] 1 20 5 7 9 Есть еще один способ индексирования векторов, но он несколько более редкий: индексирование по имени. Дело в том, что для значений векторов можно (но не обязательно) присваивать имена: my_named_vector &lt;- c(first = 1, second = 2, third = 3) my_named_vector[&#39;first&#39;] ## first ## 1 А еще можно “вытаскивать” имена из вектора с помощью функции names() и присваивать таким образом новые. d &lt;- 1:4 names(d) &lt;- letters[1:4] d[&quot;a&quot;] ## a ## 1 letters - это “зашитая” в R константа - вектор букв от a до z. Иногда это очень удобно! Кроме того, есть константа LETTERS - то же самое, но заглавными буквами. А еще есть названия месяцев на английском и числовая константа pi. Теперь посчитаем среднее вектора n: mean(n) ## [1] 7.2 А как вытащить все значения, которые больше среднего? Сначала получим логический вектор — какие значения больше среднего: larger &lt;- n &gt; mean(n) larger ## [1] FALSE FALSE TRUE FALSE FALSE FALSE FALSE TRUE TRUE TRUE А теперь используем его для индексирования вектора n: n[larger] ## [1] 20 8 9 10 Можно все это сделать в одну строчку: n[n&gt;mean(n)] ## [1] 20 8 9 10 Предыдущая строчка отражает то, что мы будем постоянно делать в R: вычленять (subset) из данных отдельные куски на основании разных условий. 2.7.5 NA — пропущенные значения В реальных данных у нас часто чего-то не хватает. Например, из-за технической ошибки или невнимательности не получилось записать какое-то измерение. Для этого в R есть NA. NA — это не строка \"NA\", не 0, не пустая строка \"\" и не FALSE. NA — это NA. Большинство операций с векторами, содержащими NA будут выдавать NA: missed &lt;- NA missed == &quot;NA&quot; ## [1] NA missed == &quot;&quot; ## [1] NA missed == NA ## [1] NA Заметьте: даже сравнение NA c NA выдает NA! Иногда NA в данных очень бесит: n[5] &lt;- NA n ## [1] 1 2 20 4 NA 6 7 8 9 10 mean(n) ## [1] NA Что же делать? Наверное, надо сравнить вектор с NA и исключить этих пакостников. Давайте попробуем: n == NA ## [1] NA NA NA NA NA NA NA NA NA NA Ах да, мы ведь только что узнали, что даже сравнение NA c NA приводит к NA. Чтобы выбраться из этой непростой ситуации, используйте функцию is.na(): is.na(n) ## [1] FALSE FALSE FALSE FALSE TRUE FALSE FALSE FALSE FALSE FALSE Результат выполнения is.na(n) выдает FALSE в тех местах, где у нас числа и TRUE там, где у нас NA. Нам нужно сделать наоборот. Здесь нам понадобится оператор ! (мы его уже встречали), который инвертирует логические значения: n[!is.na(n)] ## [1] 1 2 20 4 6 7 8 9 10 Ура, мы можем считать среднее! mean(n[!is.na(n)]) ## [1] 7.444444 Теперь Вы понимаете, зачем нужно отрицание (!) Вообще, есть еще один из способов посчитать среднее, если есть NA. Для этого надо залезть в хэлп по функции mean(): ?mean() В хэлпе мы найдем параметр na.rm =, который по дефолту FALSE. Вы знаете, что нужно делать! mean(n, na.rm = TRUE) ## [1] 7.444444 Еееее! NA может появляться в векторах других типов тоже. Кроме NA есть еще NaN — это разные вещи. NaN расшифровывается как Not a Number и получается в результате таких операций как 0/0. 2.7.6 В любой непонятной ситуации — ищите в поисковике Если вдруг вы не знаете, что искать в хэлпе, или хэлпа попросту недостаточно, то… ищите в поисковике! Нет ничего постыдного в том, чтобы искать в Интернете решения проблем. Это абсолютно нормально. Используйте силу интернета во благо и да помогут Вам Stackoverflow и бесчисленные R-туториалы! Computer Programming To Be Officially Renamed “Googling Stack Overflow”Source: http://t.co/xu7acfXvFF pic.twitter.com/iJ9k7aAVhd — Stack Exchange July 20, 2015 Главное, помните: загуглить работающий ответ всегда недостаточно. Надо понять, как и почему он работает. Иначе что-то обязательно пойдет не так. Кроме того, правильно загуглить проблему — не так уж и просто. Does anyone ever get good at R or do they just get good at googling how to do things in R — 🔬🖤Lauren M. Seyler, Ph.D.❤️⚒ href=“https://twitter.com/mousquemere/status/1125522375141883907?ref_src=twsrc%5Etfw”&gt;May 6, 2019 Итак, с векторами мы более-менее разобрались. Помните, что вектора — это один из краеугольных камней Вашей работы в R. Если Вы хорошо с ними разобрались, то дальше все будет довольно несложно. Тем не менее, вектора — это не все. Есть еще два важных типа данных: списки (list) и матрицы (matrix). Их можно рассматривать как своеобразное “расширение” векторов, каждый в свою сторону. Ну а списки и матрицы нужны чтобы понять основной тип данных в R — data.frame. 2.8 Матрицы (matrix) Если вдруг Вас пугает это слово, то совершенно зря. Матрица — это всего лишь “двумерный” вектор: вектор, у которого есть не только длина, но и ширина. Создать матрицу можно с помощью функции matrix() из вектора, указав при этом количество строк и столбцов. A &lt;- matrix(1:20, nrow=5,ncol=4) A ## [,1] [,2] [,3] [,4] ## [1,] 1 6 11 16 ## [2,] 2 7 12 17 ## [3,] 3 8 13 18 ## [4,] 4 9 14 19 ## [5,] 5 10 15 20 Если мы знаем сколько значений в матрице и сколько мы хотим строк, то количество столбцов указывать необязательно: A &lt;- matrix(1:20, nrow=5) A ## [,1] [,2] [,3] [,4] ## [1,] 1 6 11 16 ## [2,] 2 7 12 17 ## [3,] 3 8 13 18 ## [4,] 4 9 14 19 ## [5,] 5 10 15 20 Все остальное так же как и с векторами: внутри находится данные только одного типа. Поскольку матрица — это уже двумерный массив, то у него имеется два индекса. Эти два индекса разделяются запятыми. A[2,3] ## [1] 12 A[2:4, 1:3] ## [,1] [,2] [,3] ## [1,] 2 7 12 ## [2,] 3 8 13 ## [3,] 4 9 14 Первый индекс — выбор строк, второй индекс — выбор колонок. Если же мы оставляем пустое поле вместо числа, то мы выбираем все строки/колонки в зависимости от того, оставили мы поле пустым до или после запятой: A[,1:3] ## [,1] [,2] [,3] ## [1,] 1 6 11 ## [2,] 2 7 12 ## [3,] 3 8 13 ## [4,] 4 9 14 ## [5,] 5 10 15 A[2:4,] ## [,1] [,2] [,3] [,4] ## [1,] 2 7 12 17 ## [2,] 3 8 13 18 ## [3,] 4 9 14 19 A[,] ## [,1] [,2] [,3] [,4] ## [1,] 1 6 11 16 ## [2,] 2 7 12 17 ## [3,] 3 8 13 18 ## [4,] 4 9 14 19 ## [5,] 5 10 15 20 В принципе, это все, что нам нужно знать о матрицах. Матрицы используются в R довольно редко, особенно по сравнению, например, с MATLAB. Но вот индексировать матрицы хорошо бы уметь: это понадобится в работе с датафреймами. То, что матрица - это просто двумерный вектор, не является метафорой: в R матрица - это по сути своей вектор с дополнительными атрибутами dim и dimnames. Атрибуты — это неотъемлемые свойства объектов, для всех объектов есть обязательные атрибуты типа и длины и могут быть любые необязательные атрибуты. Можно задавать свои атрибуты или удалять уже присвоенные: удаление атрибута dim у матрицы превратит ее в обычный вектор. Про атрибуты подробнее можно почитать здесь или на стр. 99–101 книги “R in a Nutshell” (Adler 2010). 2.9 Списки (list) Теперь представим себе вектор без ограничения на одинаковые данные внутри. И получим список! l &lt;- list(42, &quot;Пам пам&quot;, TRUE) l ## [[1]] ## [1] 42 ## ## [[2]] ## [1] &quot;Пам пам&quot; ## ## [[3]] ## [1] TRUE А это значит, что там могут содержаться самые разные данные, в том числе и другие списки и векторы! lbig &lt;- list(c(&quot;Wow&quot;, &quot;this&quot;, &quot;list&quot;, &quot;is&quot;, &quot;so&quot;, &quot;big&quot;), &quot;16&quot;, l) lbig ## [[1]] ## [1] &quot;Wow&quot; &quot;this&quot; &quot;list&quot; &quot;is&quot; &quot;so&quot; &quot;big&quot; ## ## [[2]] ## [1] &quot;16&quot; ## ## [[3]] ## [[3]][[1]] ## [1] 42 ## ## [[3]][[2]] ## [1] &quot;Пам пам&quot; ## ## [[3]][[3]] ## [1] TRUE Если у нас сложный список, то есть очень классная функция, чтобы посмотреть, как он устроен, под названием str(): str(lbig) ## List of 3 ## $ : chr [1:6] &quot;Wow&quot; &quot;this&quot; &quot;list&quot; &quot;is&quot; ... ## $ : chr &quot;16&quot; ## $ :List of 3 ## ..$ : num 42 ## ..$ : chr &quot;Пам пам&quot; ## ..$ : logi TRUE Как и в случае с векторами мы можем давать имена элементам списка: namedl &lt;- list(age = 24, PhDstudent = T, language = &quot;Russian&quot;) namedl ## $age ## [1] 24 ## ## $PhDstudent ## [1] FALSE ## ## $language ## [1] &quot;Russian&quot; К списку можно обращаться как с помощью индексов, так и по именам. Начнем с последнего: namedl$age ## [1] 24 А вот с индексами сложнее, и в этом очень легко запутаться. Давайте попробуем сделать так, как мы делали это раньше: namedl[1] ## $age ## [1] 24 Мы, по сути, получили элемент списка - просто как часть списка, т.е. как список длиной один: class(namedl) ## [1] &quot;list&quot; class(namedl[1]) ## [1] &quot;list&quot; А вот чтобы добраться до самого элемента списка (и сделать с ним что-то хорошее) нам нужна не одна, а две квадратных скобочки: namedl[[1]] ## [1] 24 class(namedl[[1]]) ## [1] &quot;numeric&quot; Indexing lists in #rstats. Inspired by the Residence Inn pic.twitter.com/YQ6axb2w7t — Hadley Wickham (@ href=“https://twitter.com/hadleywickham/status/643381054758363136?ref_src=twsrc%5Etfw”&gt;September 14, 2015 Как и в случае с вектором, к элементу списка можно обращаться по имени. namedl[[&#39;age&#39;]] ## [1] 24 Хотя последнее — практически то же самое, что и использование знака $. Списки довольно часто используются в R, но реже, чем в Python. Со многими объектами в R, такими как результаты статистических тестов, объекты ggplot и т.д. удобно работать именно как со списками — к ним все вышеописанное применимо. Кроме того, некоторые данные мы изначально получаем в виде древообразной структуры — хочешь не хочешь, а придется работать с этим как со списком. Но обычно после этого стоит как можно скорее превратить список в датафрейм. 2.10 Data.frame Итак, мы перешли к самому главному. Самому-самому. Датафреймы (data.frames). Более того, сейчас станет понятно, зачем нам нужно было разбираться со всеми предыдущими темами. Без векторов мы не смогли бы разобраться с матрицами и списками. А без последних мы не сможем понять, что такое датафрейм. name &lt;- c(&quot;Ivan&quot;, &quot;Eugeny&quot;, &quot;Lena&quot;, &quot;Misha&quot;, &quot;Sasha&quot;) age &lt;- c(26, 34, 23, 27, 26) student &lt;- c(FALSE, FALSE, TRUE, TRUE, TRUE) df = data.frame(name, age, student) df str(df) ## &#39;data.frame&#39;: 5 obs. of 3 variables: ## $ name : chr &quot;Ivan&quot; &quot;Eugeny&quot; &quot;Lena&quot; &quot;Misha&quot; ... ## $ age : num 26 34 23 27 26 ## $ student: logi FALSE FALSE TRUE TRUE TRUE Вообще, очень похоже на список, не правда ли? Так и есть, датафрейм — это что-то вроде проименованного списка, каждый элемент которого является atomic вектором фиксированной длины. Скорее всего, список Вы представляли “горизонтально”. Если это так, то теперь “переверните” его у себя в голове. Так, чтоб названия векторов оказались сверху, а колонки стали столбцами. Поскольку длина всех этих векторов равна (обязательное условие!), то данные представляют собой табличку, похожую на матрицу. Но в отличие от матрицы, разные столбцы могут имет разные типы данных: первая колонка — character, вторая колонка — numeric, третья колонка — logical. Тем не менее, обращаться с датафреймом можно и как с проименованным списком, и как с матрицей: df$age[2:3] ## [1] 34 23 Здесь мы сначала вытащили колонку age с помощью оператора $. Результатом этой операции является числовой вектор, из которого мы вытащили кусок, выбрав индексы 2 и 3. Используя оператор $ и присваивание можно создавать новые колонки датафрейма: df$lovesR &lt;- TRUE #правило recycling - узнали? df Ну а можно просто обращаться с помощью двух индексов через запятую, как мы это делали с матрицей: df[3:5, 2:3] Как и с матрицами, первый индекс означает строчки, а второй — столбцы. А еще можно использовать названия колонок внутри квадратных скобок: df[1:2,&quot;age&quot;] ## [1] 26 34 И здесь перед нами открываются невообразимые возможности! Узнаем, любят ли R те, кто моложе среднего возраста в группе: df[df$age &lt; mean(df$age), 4] ## [1] TRUE TRUE TRUE TRUE Эту же задачу можно выполнить другими способами: df$lovesR[df$age &lt; mean(df$age)] ## [1] TRUE TRUE TRUE TRUE df[df$age &lt; mean(df$age), &#39;lovesR&#39;] ## [1] TRUE TRUE TRUE TRUE В большинстве случаев подходят сразу несколько способов — тем не менее, стоит овладеть ими всеми. Датафреймы удобно просматривать в RStudio. Для это нужно написать команду View(df) или же просто нажать на названии нужной переменной из списка вверху справа (там где Environment). Тогда увидите табличку, очень похожую на Excel и тому подобные программы для работы с таблицами. Там же есть и всякие возможности для фильтрации, сортировки и поиска… Но, конечно, интереснее все эти вещи делать руками, т.е. с помощью написания кода. На этом пора заканчивать с введением и приступать к реальным данным. 2.11 Начинаем работу с реальными данными Итак, пришло время перейти к реальным данным. Мы начнем с использования датасета (так мы будем называть любой набор данных) по Игре Престолов, а точнее, по книгам цикла “Песнь льда и пламени” Дж. Мартина. Да, будут спойлеры, но сериал уже давно закончился и сильно разошелся с книгами… 2.11.1 Рабочая папка и проекты Для начала скачайте файл по ссылке Он, скорее всего, появился у Вас в папке “Загрузки”. Если мы будем просто пытаться прочитать этот файл (например, с помощью read.csv() — мы к этой функцией очень скоро перейдем), указав его имя и разрешение, то наткнемся на такую ошибку: Ошибка в file(file, “rt”) :не могу открыть соединение Вдобавок: Предупреждение: В file(file, “rt”) : не могу открыть файл ‘character-deaths.csv’: No such file or directory Это означает, что R не может найти нужный файл. Вообще-то мы даже не сказали, где искать. Нам нужно как-то совместить место, где R ищет загружаемые файлы и сами файлы. Для этого есть несколько способов. Магомет идет к горе: перемещение файлов в рабочую папку. Для этого нужно узнать, какая папка является рабочей с помощью функции getwd() (без аргументов), найти эту папку в проводнике и переместить туда файл. После этого можно использовать просто название файла с разрешением: got &lt;- read.csv(&quot;character-deaths.csv&quot;) Гора идет к Магомету: изменение рабочей папки. Можно просто сменить рабочую папку с помощью setwd() на ту, где сейчас лежит файл, прописав путь до этой папки. Теперь файл находится в рабочей папке: got &lt;- read.csv(&quot;character-deaths.csv&quot;) Этот вариант использовать не рекомендуется. Как минимум, это сразу делает невозможным запустить скрипт на другом компьютере. Гора находит Магомета по месту прописки: указание полного пути файла. got &lt;- read.csv(&quot;/Users/Username/Some_Folder/character-deaths.csv&quot;) Этот вариант страдает теми же проблемами, что и предыдущий, поэтому тоже не рекомендуется. Для пользователей Windows есть дополнительная сложность: знак / является особым знаком для R, поэтому вместо него нужно использовать двойной //. Магомет использует кнопочный интерфейс: Import Dataset. Во вкладке Environment справа в окне RStudio есть кнопка “Import Dataset”. Возможно, у Вас возникло непреодолимое желание отдохнуть от написания кода и понажимать кнопочки — сопротивляйтесь этому всеми силами, но не вините себя, если не сдержитесь. Гора находит Магомета в интернете. Многие функции в R, предназначенные для чтения файлов, могут прочитать файл не только на Вашем компьютере, но и сразу из интернета. Для этого просто используйте ссылку вместо пути: got &lt;- read.csv(&quot;https://raw.githubusercontent.com/Pozdniakov/stats/master/data/character-deaths.csv&quot;) Каждый Магомет получает по своей горе: использование проектов в RStudio. На первый взгляд это кажется чем-то очень сложным, но это не так. Это очень просто и ОЧЕНЬ удобно. При создании проекта создается отдельная папочка, где у Вас лежат данные, хранятся скрипты, вспомогательные файлы и отчеты. Если нужно вернуться к другому проекту — просто открываете другой проект, с другими файлами и скриптами. Это еще помогает не пересекаться переменным из разных проектов — а то, знаете, использование двух переменных data в разных скриптах чревато ошибками. Поэтому очень удобным решением будет выделение отдельного проекта под этот курс. 2.11.2 Импорт данных Как Вы уже поняли, импортирование данных - одна из самых муторных и неприятных вещей в R. Если у Вас получится с этим справится, то все остальное - ерунда. Мы уже разобрались с первой частью этого процесса - нахождением файла с данными, осталось научиться их читать. Здесь стоит сделать небольшую ремарку. Довольно часто данные представляют собой табличку. Или же их можно свести к табличке. Такая табличка, как мы уже выяснили, удобно репрезентируется в виде датафрейма. Но как эти данные хранятся на компьютере? Есть два варианта: в бинарном и в текстовом файле. Текстовый файл означает, что такой файл можно открыть в программе “Блокнот” или ее аналоге и увидеть напечатанный текст: скрипт, роман или упорядоченный набор цифр и букв. Нас сейчас интересует именно последний случай. Таблица может быть представлена как текст: отдельные строчки в файле будут разделять разные строчки таблицы, а какой-нибудь знак-разделитель отделет колонки друг от друга. Для чтения данных из текстового файла есть довольно удобная функция read.table(). Почитайте хэлп по ней и ужаснитесь: столько разных параметров на входе! Но там же вы увидете функции read.csv(), read.csv2() и некоторые другие — по сути, это тот же read.table(), но с другими дефолтными параметрами, соответствующие формату файла, который мы загружаем. В данном случае используется формат .csv, что означает Comma Separated Values (Значения, Разделенные Запятыми). Это просто текстовый файл, в котором “закодирована” таблица: разные строчки разделяют разные строчки таблицы, а столбцы отделяются запятыми. С этим связана одна проблема: в некоторых странах (в т.ч. и России) принято использовать запятую для разделения дробной части числа, а не точку, как это делается в большинстве стран мира. Поэтому есть “другой” формат .csv, где значения разделены точкой с запятой (;), а дробные значения - запятой (,). В этом и различие функций read.csv() и read.csv2() — первая функция предназначена для “международного” формата, вторая - для (условно) “Российского”. В первой строчке обычно содержатся названия столбцов - и это чертовски удобно, функции read.csv() и read.csv2() по дефолту считают первую строчку именно как название для колонок. Итак, прочитаем наш файл. Для этого используем только параметр file =, который идет первым, и для параметра stringsAsFactors = поставим значение FALSE: got &lt;- read.csv(&quot;data/character-deaths.csv&quot;, stringsAsFactors = FALSE) По сути, факторы - это примерно то же самое, что и character, но закодированные числами. Когда-то это было придумано для экономии используемых времени и памяти, сейчас же обычно становится просто лишней морокой. Но некоторые функции требуют именно character, некоторые factor, в большинстве случаев это без разницы. Но иногда непонимание может привести к дурацким ошибкам. В данном случае мы просто пока обойдемся без факторов. Можете проверить с помощью View(got): все работает! Если же вылезает какая-то странная ерунда или же просто ошибка - попробуйте другие функции и покопаться с параметрами. Для этого читайте Help. Кроме .csv формата есть и другие варианты хранения таблиц в виде текста. Например, .tsv - тоже самое, что и .csv, но разделитель - знак табуляции. Для чтения таких файлов есть функция read.delim() и read.delim2(). Впрочем, даже если бы ее и не было, можно было бы просто подобрать нужные параметры для функции read.table(). Есть даже функции, которые пытаются сами “угадать” нужные параметры для чтения — часто они справляются с этим довольно удачно. Но не всегда. Поэтому стоит научиться справляться с любого рода данными на входе. Тем не менее, далеко не всегда таблицы представлены в виде текстового файла. Самый распространенный пример таблицы в бинарном виде — родные форматы Microsoft Excel. Если Вы попробуете открыть .xlsx файл в Блокноте, то увидите кракозябры. Это делает работу с этим файлами гораздо менее удобной, поэтому стоит избегать экселевских форматов и стараться все сохранять в .csv. Для работы с экселевскими файлами есть много пакетов: readxl, xlsx, openxlsx. Для чтения файлов SPSS, Stata, SAS есть пакет foreign. Что такое пакеты и как их устанавливать мы изучим позже. 2.12 Препроцессинг данных в R Вчера мы узнали про основы языка R, про то, как работать с векторами, списками, матрицами и, наконец, датафреймами. Мы закончили день на загрузке данных, с чего мы и начнем сегодня: got &lt;- read.csv(&quot;data/character-deaths.csv&quot;, stringsAsFactors = F) После загрузки данных стоит немного “осмотреть” получившийся датафрейм got. 2.12.1 Исследование данных Ок, давайте немного поизучаем датасет. Обычно мы привыкли глазами пробегать по данным, листая строки и столбцы — и это вполне правильно и логично, от этого не нужно отучаться. Но мы можем дополнить наш базовый зрительнопоисковой инструментарий несколькими полезными командами. Во-первых, вспомним другую полезную функцию str(): str(got) ## &#39;data.frame&#39;: 917 obs. of 13 variables: ## $ Name : chr &quot;Addam Marbrand&quot; &quot;Aegon Frey (Jinglebell)&quot; &quot;Aegon Targaryen&quot; &quot;Adrack Humble&quot; ... ## $ Allegiances : chr &quot;Lannister&quot; &quot;None&quot; &quot;House Targaryen&quot; &quot;House Greyjoy&quot; ... ## $ Death.Year : int NA 299 NA 300 NA NA 300 300 NA NA ... ## $ Book.of.Death : int NA 3 NA 5 NA NA 4 5 NA NA ... ## $ Death.Chapter : int NA 51 NA 20 NA NA 35 NA NA NA ... ## $ Book.Intro.Chapter: int 56 49 5 20 NA NA 21 59 11 0 ... ## $ Gender : int 1 1 1 1 1 1 1 0 1 1 ... ## $ Nobility : int 1 1 1 1 1 1 1 1 1 0 ... ## $ GoT : int 1 0 0 0 0 0 1 1 0 0 ... ## $ CoK : int 1 0 0 0 0 1 0 1 1 0 ... ## $ SoS : int 1 1 0 0 1 1 1 1 0 1 ... ## $ FfC : int 1 0 0 0 0 0 1 0 1 0 ... ## $ DwD : int 0 0 1 1 0 0 0 1 0 0 ... Давайте разберемся с переменными в датафрейме: Колонка Name — здесь все понятно. Важно, что эти имена записаны абсолютно по-разному: где-то с фамилией, где-то без, где-то в скобочках есть пояснения. Колонка Allegiances — к какому дому принадлежит персонаж. С этим сложно, иногда они меняют дома, здесь путаются сами семьи и персонажи, лояльные им. Особой разницы между Stark и House Stark нет. Следующие колонки - Death Year, Book.of.Death, Death.Chapter, Book.Intro.Chapter — означают номер главы, в которой персонаж впервые появляется, а так же номер книги, глава и год (от завоевания Вестероса Эйгоном Таргариеном), в которой персонаж умирает. Gender — 1 для мужчин, 0 для женщин. Nobility — дворянское происхождение персонажа. Последние 5 столбцов содержат информацию, появлялся ли персонаж в книге (всего книг пока что 5). Другая полезная функция для больших таблиц — функция head(): она выведет первые несколько (по дефолту 6) строчек датафрейма. head(got) Есть еще функция tail(). Догадайтесь сами, что она делает. Для некоторых переменных полезно посмотреть таблицы частотности с помощью функции table(): table(got$Allegiances) ## ## Arryn Baratheon Greyjoy House Arryn House Baratheon ## 23 56 51 7 8 ## House Greyjoy House Lannister House Martell House Stark House Targaryen ## 24 21 12 35 19 ## House Tully House Tyrell Lannister Martell Night&#39;s Watch ## 8 11 81 25 116 ## None Stark Targaryen Tully Tyrell ## 253 73 17 22 15 ## Wildling ## 40 Уау! Очень просто и удобно, не так ли? Функция table() может принимать сразу несколько столбцов. Это удобно для получения таблиц сопряженности: table(got$Allegiances, got$Gender) ## ## 0 1 ## Arryn 3 20 ## Baratheon 6 50 ## Greyjoy 4 47 ## House Arryn 3 4 ## House Baratheon 0 8 ## House Greyjoy 1 23 ## House Lannister 2 19 ## House Martell 7 5 ## House Stark 6 29 ## House Targaryen 5 14 ## House Tully 0 8 ## House Tyrell 4 7 ## Lannister 12 69 ## Martell 7 18 ## Night&#39;s Watch 0 116 ## None 51 202 ## Stark 21 52 ## Targaryen 1 16 ## Tully 2 20 ## Tyrell 6 9 ## Wildling 16 24 2.12.2 Subsetting Как мы обсуждали на прошлом занятии, мы можем сабсеттить (выделять часть датафрейма) датафрейм, обращаясь к нему и как к матрице: датафрейм[вектор_с_номерами_строк, вектор_с_номерами_колонок] got[100:115, 1:2] и используя имена колонок: got[508:515, &quot;Name&quot;] ## [1] &quot;Mance Rayder&quot; &quot;Mandon Moore&quot; &quot;Maric Seaworth&quot; &quot;Marei&quot; ## [5] &quot;Margaery Tyrell&quot; &quot;Marillion&quot; &quot;Maris&quot; &quot;Marissa Frey&quot; и даже используя вектора названий колонок! got[508:515, c(&quot;Name&quot;, &quot;Allegiances&quot;, &quot;Gender&quot;)] Мы можем вытаскивать отдельные колонки как векторы: houses &lt;- got$Allegiances unique(houses) #посмотреть все уникальные значения --- почти как с помощью table() ## [1] &quot;Lannister&quot; &quot;None&quot; &quot;House Targaryen&quot; &quot;House Greyjoy&quot; ## [5] &quot;Baratheon&quot; &quot;Night&#39;s Watch&quot; &quot;Arryn&quot; &quot;House Stark&quot; ## [9] &quot;House Tyrell&quot; &quot;Tyrell&quot; &quot;Stark&quot; &quot;Greyjoy&quot; ## [13] &quot;House Lannister&quot; &quot;Martell&quot; &quot;House Martell&quot; &quot;Wildling&quot; ## [17] &quot;Targaryen&quot; &quot;House Arryn&quot; &quot;House Tully&quot; &quot;Tully&quot; ## [21] &quot;House Baratheon&quot; Итак, давайте решим нашу первую задачу — вытащим в отдельный датасет всех представителей Ночного Дозора. Для этого нам нужно создать вектор логических значений — результат сравнений колонки Allegiances со значением \"Night's Watch\" и использовать его как вектор индексов для датафрейма. vectornight &lt;- got$Allegiances == &quot;Night&#39;s Watch&quot; head(vectornight) ## [1] FALSE FALSE FALSE FALSE FALSE FALSE Теперь этот вектор с TRUE и FALSE нам надо использовать для индексирования строк. Но что со столбцами? Если мы хотем сохранить все столбцы, то после запятой внутри квадратных скобок нам не нужно ничего указывать: nightswatch &lt;- got[vectornight,] head(nightswatch) Вуаля! Все это можно сделать проще и в одну строку: nightswatch &lt;- got[got$Allegiances == &quot;Night&#39;s Watch&quot;,] И не забывайте про запятую! Теперь попробуем вытащить одновременно всех Одичалых (Wildling) и всех представителей Ночного Дозора. Это можно сделать, используя оператор | (ИЛИ) при выборе колонок: nightwatch_wildling &lt;- got[got$Allegiances == &quot;Night&#39;s Watch&quot; | got$Allegiances == &quot;Wildling&quot;,] head(nightwatch_wildling) Кажется очевидным следующий вариант: got[got$Allegiances == c(\"Night's Watch\", \"Wildling\"),]. Однако это выдаст не совсем то, что нужно, хотя результат может показаться верным на первый взгляд. Попробуйте самостоятельно ответить на вопрос, что происходит в данном случае и чем результат отличается от предполагаемого. Подсказка: вспомните правило recycling. Для таких случаев есть удобный оператор %in%, который позволяет сравнить каждое значение вектора с целым набором значений. Если значение вектора хотя бы один раз встречается в векторе справа от %in%, то результат — TRUE: 1:6 %in% c(1,4,5) ## [1] TRUE FALSE FALSE TRUE TRUE FALSE nightwatch_wildling &lt;- got[got$Allegiances %in% c(&quot;Night&#39;s Watch&quot;, &quot;Wildling&quot;),] head(nightwatch_wildling) 2.12.3 Создание новых колонок Давайте создадим новую колонку, которая будет означать, жив ли еще персонаж (по книгам). Заметьте, что в этом датасете, хоть он и посвящен смертям персонажей, нет нужной колонки. Мы можем попытаться “вытащить” эту информацию. В колонках Death.Year, Death.Chapter и Book.of.Death стоит NA у многих персонажей. Например, у Arya Stark, которая и по книгам, и по сериалу живее всех живых и мертвых: got[got$Name == &quot;Arya Stark&quot;,] Следовательно, если в Book.of.Death стоит NA, мы можем предположить, что Джордж Мартин еще не занес своей карающей руки над этим героем. Мы можем создать новую колонку Is.Alive: got$Is.Alive &lt;- is.na(got$Book.of.Death) 2.12.4 data.table vs. tidyverse В принципе, с помощью базового R можно сделать все, что угодно. Однако базовые инструменты R — не всегда самые удобные. Идея сделать работу с датафреймами в R еще быстрее и удобнее сподвигла разработчиков на создание новых инструментов — data.table и tidyverse (dplyr). Это два конкурирующих подхода, которые сильно перерабатывают язык, хотя это по-прежнему все тот же R — поэтому их еще называют “диалектами” R. Оба подхода обладают своими преимуществами и недостатками, но на сегодняшний день tidyverse считается более популярным. Основное преимущество этого подхода — в относительной легкости освоения. Обычно код, написанный в tidyverse можно примерно понять, даже не владея им. Преимущество data.table — в суровом лаконичном синтаксисе и наиболее эффективных алгоритмах. Последние обеспечивают очень серьезный прирост в скорости в работе с данными. Чтение файлов и манипуляция данными может быть на порядки быстрее, поэтому если Ваш датасет с трудом пролезает в оперативную память компьютера, а исполнение скрипта занимает длительное время - стоит задуматься о переходе на data.table. Что из этого учить — решать Вам, но знать оба совсем не обязательно: они решают те же самые задачи, просто совсем разными способами. За data.table — скорость, за tidyverse - понятность синтаксиса. Очень советую почитать обсуждение на эту тему здесь. Ссылки на литературу "],
["tidy-dplyr.html", "3 tidyverse: Загрузка и трансформация данных 3.1 Загрузка данных 3.2 tibble 3.3 dplyr 3.4 Соединение датафреймов 3.5 tidyr package 3.6 Полезные надстройки", " 3 tidyverse: Загрузка и трансформация данных tidyverse — это набор пакетов: ggplot2, для визуализации tibble, для работы с тибблами, современный вариант датафрейма tidyr, для формата tidy data readr, для чтения файлов в R purrr, для функционального программирования dplyr, для преобразованиия данных stringr, для работы со строковыми переменными forcats, для работы с переменными-факторами Полезно также знать о следующих: readxl, для чтения .xls и .xlsx jsonlite, для работы с JSON rvest, для веб-скреппинга lubridate, для работы с временем tidytext, для работы с текстами и корпусами broom, для перевода в tidy формат статистические модели library(&quot;tidyverse&quot;) ## ── Attaching packages ──────────────────── tidyverse 1.3.0 ── ## ✓ ggplot2 3.3.2 ✓ purrr 0.3.4 ## ✓ tibble 3.0.3 ✓ dplyr 1.0.2 ## ✓ tidyr 1.1.2 ✓ stringr 1.4.0 ## ✓ readr 1.3.1 ✓ forcats 0.5.0 ## ── Conflicts ─────────────────────── tidyverse_conflicts() ── ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() 3.1 Загрузка данных 3.1.1 Рабочая директория Все в R происходит где-то. Нужно загружать файлы с данными, нужно их куда-то сохранять. Желательно иметь для каждого проекта некоторую отдельную папку на компьютере, куда складывать все, отнсящееся к этому проекту. Две команды позволят опредить текущую рабочую дерикторию (getwd()) и (setwd(.../path/to/your/directory)). 3.1.2 Форматы данных: .csv Существет много форматов данных, которые придумали люди. Большинство из них можно загрузить в R. Так как центральный объект в R – таблица \\(n \\times k\\), то и работать мы большую часть времени будем с таблицами. Наиболее распространенные способы хранить данные сейчас это .csv (разберем в данном разделе) и .json (разберем в разделе (???){lists}). .csv (comma separated values) – является обычным текстовым файлом, в котором перечислены значения с некоторым фиксированным разделителем: запятой, табуляцией, точка с запятой, пробел и др. Такие файлы обычно легко открывает LibreOffice, а в Microsoft Excel нужны некоторые трюки. 3.1.3 Загрузка данных: readr, readxl Стандартной функцией для чтения .csv файлов в R является функция read.csv(), но мы будем использовать функцию read_csv() из пакета readr. read_csv(&quot;...&quot;) Вместо многоточия может стоять: название файла (если он, есть в текущей рабочей дериктории) read_csv(&quot;my_file.csv&quot;) относительный путь к файлу (если он, верен для текущей рабочей дериктории) read_csv(&quot;data/my_file.csv&quot;) полный путь к файлу (если он, верен для текущей рабочей дериктории) read_csv(&quot;/home/user_name/work/data/my_file.csv&quot;) интернет ссылка (тогда, компьютер должен быть подключен к интернету) read_csv(&quot;https://my_host/my_file.csv&quot;) Для чтения других форматов .csv файлов используются другие функции: read_tsv() – для файлов с табуляцией в качестве разделителя read_csv2() – для файлов с точкой с запятой в качестве разделителя read_delim(file = \"...\", delim = \"...\") – для файлов с любым разделителем, задаваемым аргументом delim Стандартной практикой является создавать первой строкой .csv файлов названия столбцов, поэтому по умолчанию функции read_...() будут создавать таблицу, считая первую строку названием столбцов. Чтобы изменить это поведение следует использовать аргумент col_names = FALSE. Другая проблема при чтении файлов – кодировка и локаль. На разных компьютерах разные локали и дефолтные кодировки, так что имеет смысл знать про аргумент locale(encoding = \"UTF-8\"). Попробуйте корректно считать в R файл по этой ссылке. Благодаря readxl пакету Также данные можно скачать напрямую из файлов .xls (функция read_xls) и .xlsx (функция read_xlsx), однако эти функции не умеют читать из интернета. library(&quot;readxl&quot;) xlsx_example &lt;- read_xlsx(&quot;...&quot;) Существует еще один экстравагантный способ хранить данные: это формат файлов R .RData. Создадим data.frame: my_df &lt;- data.frame(letters = c(&quot;a&quot;, &quot;b&quot;), numbers = 1:2) my_df Теперь можно сохранить файл… save(my_df, file = &quot;data/my_df.RData&quot;) удалить переменную… rm(my_df) my_df ## Error in eval(expr, envir, enclos): object &#39;my_df&#39; not found и загрузить все снова: load(&quot;data/my_df.RData&quot;) my_df 3.1.3.1 Misspelling dataset Этот датасет я переработал из данных, собранных для статьи The Gyllenhaal Experiment, написанной Расселом Гольденбергом и Мэттом Дэниэлсом для издания pudding. Они анализировали ошибки в правописании при поиске имен и фамилий звезд. misspellings &lt;- read_csv(&quot;https://raw.githubusercontent.com/agricolamz/DS_for_DH/master/data/misspelling_dataset.csv&quot;) ## Parsed with column specification: ## cols( ## correct = col_character(), ## spelling = col_character(), ## count = col_double() ## ) misspellings В датасете следующие переменные: correct – корректное написание фамилии spelling – написание, которое сделали пользователи count – количество случаев такого написания 3.1.3.2 diamonds diamonds ?diamonds 3.2 tibble Пакет tibble – является альтернативой штатного датафрейма в R. Существует встроенная переменная month.name: month.name ## [1] &quot;January&quot; &quot;February&quot; &quot;March&quot; &quot;April&quot; &quot;May&quot; &quot;June&quot; ## [7] &quot;July&quot; &quot;August&quot; &quot;September&quot; &quot;October&quot; &quot;November&quot; &quot;December&quot; Можно создать датафрейм таким образом: data.frame(id = 1:12, months = month.name, n_letters = nchar(months)) ## Error in nchar(months): cannot coerce type &#39;closure&#39; to vector of type &#39;character&#39; Однако переменная months не создана пользователем, так что данный код выдает ошибку. Корректный способ сделать это базовыми средствами: data.frame(id = 1:12, months = month.name, n_letters = nchar(month.name)) Одно из отличий tibble от базового датафрейма – возможность использовать создаваемые “по ходу пьесы переменные” tibble(id = 1:12, months = month.name, n_letters = nchar(months)) Если в окружении пользователя уже есть переменная с датафреймом, его легко можно переделать в tibble при помощи функции as_tibble(): df &lt;- data.frame(id = 1:12, months = month.name) df as_tibble(df) Функицонально tibble от data.frame ничем не отличается, однако существует ряд несущественных отличий. Кроме того стоит помнить, что многие функции из tidyverse возвращают именно tibble, а не data.frame. 3.3 dplyr В сжатом виде содержание этого раздела хранится вот здесь или здесь. 3.3.1 dplyr::filter() Эта функция фильтрует строчки по условиям, основанным на столбцах. Сколько неправильных произношений, которые написали меньше 10 юзеров? misspellings %&gt;% filter(count &lt; 10) %&gt;% — конвеер (pipe) отправляет результат работы одной функции в другую. sort(sqrt(abs(sin(1:22))), decreasing = TRUE) ## [1] 0.9999951 0.9952926 0.9946649 0.9805088 0.9792468 0.9554817 0.9535709 ## [8] 0.9173173 0.9146888 0.8699440 0.8665952 0.8105471 0.8064043 0.7375779 ## [15] 0.7325114 0.6482029 0.6419646 0.5365662 0.5285977 0.3871398 0.3756594 ## [22] 0.0940814 1:22 %&gt;% sin() %&gt;% abs() %&gt;% sqrt() %&gt;% sort(., decreasing = TRUE) # зачем здесь точка? ## [1] 0.9999951 0.9952926 0.9946649 0.9805088 0.9792468 0.9554817 0.9535709 ## [8] 0.9173173 0.9146888 0.8699440 0.8665952 0.8105471 0.8064043 0.7375779 ## [15] 0.7325114 0.6482029 0.6419646 0.5365662 0.5285977 0.3871398 0.3756594 ## [22] 0.0940814 Конвееры в tidyverse пришли из пакета magrittr. Иногда они работают не корректно с функциями не из tidyverse. 3.3.2 dplyr::slice() Эта функция фильтрует строчки по индексу. misspellings %&gt;% slice(3:7) 3.3.3 dplyr::select() Эта функция позволяет выбрать столбцы. diamonds %&gt;% select(8:10) diamonds %&gt;% select(color:price) diamonds %&gt;% select(-carat) diamonds %&gt;% select(-c(carat, cut, x, y, z)) diamonds %&gt;% select(cut, depth, price) 3.3.4 dplyr::arrange() Эта функция сортирует (строки по алфавиту, а числа по порядку). misspellings %&gt;% arrange(count) diamonds %&gt;% arrange(desc(carat), price) 3.3.5 dplyr::distinct() Эта функция возращает уникальные значения в столбце или комбинации столбцов. misspellings %&gt;% distinct(correct) misspellings %&gt;% distinct(spelling) diamonds %&gt;% distinct(color, cut) Во встроенном в tidyverse датасете starwars отфильтруйте существ выше 180 (height) и весом меньше 80 (mass) и выведите уникальные значений мест, откуда они происходят (homeworld). 3.3.6 dplyr::mutate() Эта функция позволяет создать новые переменные. misspellings %&gt;% mutate(misspelling_length = nchar(spelling), id = 1:n()) Создайте переменную с индексом Кетле: \\(\\frac{mass}{height^2}\\) для всех существ датасета starwars. Сколько героев страдают ожирением (т. е. имеют индекс массы тела больше 30)? (Не забудьте перевести рост из сантиметров в метры). 3.3.7 dplyr::group_by(...) %&gt;% summarise(...) Эта функция позволяет сгруппировать переменные по какому-то из столбцов и получить какой-нибудь вывод из описательной статистики (максимум, минимум, последний, первый, среднее, медиану и т. п.). misspellings %&gt;% summarise(min(count), mean(count)) misspellings %&gt;% group_by(correct) %&gt;% summarise(mean(count)) ## `summarise()` ungrouping output (override with `.groups` argument) misspellings %&gt;% group_by(correct) %&gt;% summarise(my_mean = mean(count)) ## `summarise()` ungrouping output (override with `.groups` argument) Если нужно посчитать количество вхождений, то можно использовать функцию n() в summarise() или же функцию count(): misspellings %&gt;% group_by(correct) %&gt;% summarise(n = n()) ## `summarise()` ungrouping output (override with `.groups` argument) misspellings %&gt;% count(correct) А что будет, если в датасете misspellings создать переменную n и зоставить отсортировать по переменным correct и n? Можно даже отсортировать результат: misspellings %&gt;% count(correct, sort = TRUE) Если вы хотите создать не какое-то саммари, а целый дополнительный столбец с этим саммари вместо функции summarise() нужно использовать функцию mutate(): misspellings %&gt;% group_by(correct) %&gt;% mutate(my_mean = mean(count)) Схематически это выглядит так: В датасете starwars запишите в отдельную переменную среднее значение роста (height) по каждой расе (species). 3.4 Соединение датафреймов 3.4.1 bind_... Это семейство функций позволяет соединять разные датафреймы: my_tbl &lt;- tibble(a = c(1, 5, 2), b = c(&quot;e&quot;, &quot;g&quot;, &quot;s&quot;)) Чтобы соединить строчки датафреймов с одинаковым набором колонок: my_tbl %&gt;% bind_rows(my_tbl) Вместо отсутствующих колонок появятся NA: my_tbl %&gt;% bind_rows(my_tbl[,-1]) Чтобы соединить строчки датафреймов с одинаковым набором строчек (если названия столбцов будут пересекаться, то они будут пронумерованы): my_tbl %&gt;% bind_cols(my_tbl) # соединяет колонки ## New names: ## * a -&gt; a...1 ## * b -&gt; b...2 ## * a -&gt; a...3 ## * b -&gt; b...4 Соединяя датафреймы с разным количеством строк my_tbl %&gt;% bind_cols(my_tbl[-1,]) ## Error: Can&#39;t recycle `..1` (size 3) to match `..2` (size 2). 3.4.2 dplyr::.._join() Эти функции позволяют соединять датафреймы. languages &lt;- data_frame( languages = c(&quot;Selkup&quot;, &quot;French&quot;, &quot;Chukchi&quot;, &quot;Polish&quot;), countries = c(&quot;Russia&quot;, &quot;France&quot;, &quot;Russia&quot;, &quot;Poland&quot;), iso = c(&quot;sel&quot;, &quot;fra&quot;, &quot;ckt&quot;, &quot;pol&quot;) ) ## Warning: `data_frame()` is deprecated as of tibble 1.1.0. ## Please use `tibble()` instead. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_warnings()` to see where this warning was generated. languages country_population &lt;- data_frame( countries = c(&quot;Russia&quot;, &quot;Poland&quot;, &quot;Finland&quot;), population_mln = c(143, 38, 5)) country_population inner_join(languages, country_population) ## Joining, by = &quot;countries&quot; left_join(languages, country_population) ## Joining, by = &quot;countries&quot; right_join(languages, country_population) ## Joining, by = &quot;countries&quot; anti_join(languages, country_population) ## Joining, by = &quot;countries&quot; anti_join(country_population, languages) ## Joining, by = &quot;countries&quot; full_join(country_population, languages) ## Joining, by = &quot;countries&quot; 3.5 tidyr package Давайте посмотрим на датасет с количеством носителей разных языков в Индии согласно переписи 2001 года (данные из Википедии): langs_in_india_short &lt;- read_csv(&quot;https://raw.githubusercontent.com/agricolamz/DS_for_DH/master/data/languages_in_india.csv&quot;) ## Parsed with column specification: ## cols( ## language = col_character(), ## n_L1_sp = col_double(), ## n_L2_sp = col_double(), ## n_L3_sp = col_double(), ## n_all_sp = col_double() ## ) Short format langs_in_india_short Long format Short format → Long format: tidyr::pivot_longer() langs_in_india_short %&gt;% pivot_longer(names_to = &quot;type&quot;, values_to = &quot;n_speakers&quot;, n_L1_sp:n_all_sp)-&gt; langs_in_india_long langs_in_india_long Long format → Short format: tidyr::pivot_wider() langs_in_india_long %&gt;% pivot_wider(names_from = &quot;type&quot;, values_from = &quot;n_speakers&quot;)-&gt; langs_in_india_short langs_in_india_short Вот здесь лежит датасет, который содержит информацию о селах в Дагестане в формате .xlsx. Данные разделены по разным листам и содержат следующие переменные (данные получены из разных источников, поэтому имеют суффикс _s1 – первый источник и _s2 – второй источник): id_s1 – (s1) идентификационный номер из первого источника; name_1885 – (s1) название селения из переписи 1885 census_1885 – (s1) число людей из переписи 1885 name_1895 – (s1) название селения из переписи 1895 census_1895 – (s1) число людей из переписи 1895 name_1926 – (s1) название селения из переписи 1926 language_s1 – (s1) язык данного селения согласно первому источнику census_1926 – (s1) число людей из переписи 1926 name_2010 – (s1) название селения из переписи 2010 census_2010 – (s1) число людей из переписи 2010 name_s2 – (s2) название селения согласно второму источнику language_s2 – (s2) язык данного селения согласно первому источнику Lat – (s2) широта селения Lon – (s2) долгота селения elevation – (s2) высота селения над уровнем моря Во-первых, объедините все листы .xlsx воедино: Во-вторых, посчитайте, относительно скольких селений первый и второй источник согласуются относительно языка селения. В-третьих, посчитайте среднюю высоту над уровнем моря для языков из первого источника. Какой выше всех? В-четвертых, посчитайте количество населения, которое говорило на каждом из языков из второго датасета, согласно каждой переписи. Приведите значения для лакского языка (Lak). 3.6 Полезные надстройки Существует достаточно много пакетов надстроек для tidyverse. tidylog – делает лог пайпов: library(tidylog) ## ## Attaching package: &#39;tidylog&#39; ## The following objects are masked from &#39;package:dplyr&#39;: ## ## add_count, add_tally, anti_join, count, distinct, distinct_all, ## distinct_at, distinct_if, filter, filter_all, filter_at, filter_if, ## full_join, group_by, group_by_all, group_by_at, group_by_if, ## inner_join, left_join, mutate, mutate_all, mutate_at, mutate_if, ## relocate, rename, rename_all, rename_at, rename_if, rename_with, ## right_join, sample_frac, sample_n, select, select_all, select_at, ## select_if, semi_join, slice, slice_head, slice_max, slice_min, ## slice_sample, slice_tail, summarise, summarise_all, summarise_at, ## summarise_if, summarize, summarize_all, summarize_at, summarize_if, ## tally, top_frac, top_n, transmute, transmute_all, transmute_at, ## transmute_if, ungroup ## The following objects are masked from &#39;package:tidyr&#39;: ## ## drop_na, fill, gather, pivot_longer, pivot_wider, replace_na, ## spread, uncount ## The following object is masked from &#39;package:stats&#39;: ## ## filter mtcars %&gt;% group_by(cyl, gear) %&gt;% summarise(mean_mpg = mean(mpg)) %&gt;% pivot_wider(names_from = gear, values_from = mean_mpg) ## group_by: 2 grouping variables (cyl, gear) ## summarise: now 8 rows and 3 columns, one group variable remaining (cyl) ## pivot_wider: reorganized (gear, mean_mpg) into (3, 4, 5) [was 8x3, now 3x4] dtplyr – позволяет вызывать функции dplyr, но используя data.table внутри. Это полезно для работы с большими датасетами. sparklyr – связывает R с Apache Spark (инструмент для кластерных вычислений) … "],
["viz-1.html", "4 Визуализация данных 4.1 Зачем визуализировать данные? 4.2 Основы ggplot2 4.3 Столбчатые диаграммы (barplots) 4.4 Факторы 4.5 Дотплот 4.6 Гистограммы 4.7 Функции плотности 4.8 Точки, джиттер (jitter), вайолинплот (violinplot), ящики с усами (boxplot), 4.9 Фасетизация 4.10 Визуализация комбинаций признаков", " 4 Визуализация данных library(&quot;tidyverse&quot;) 4.1 Зачем визуализировать данные? 4.1.1 Квартет Анскомба В работе Anscombe, F. J. (1973). “Graphs in Statistical Analysis” представлен следующий датасет: quartet &lt;- read_csv(&quot;https://raw.githubusercontent.com/agricolamz/DS_for_DH/master/data/anscombe.csv&quot;) quartet quartet %&gt;% group_by(dataset) %&gt;% summarise(mean_X = mean(x), mean_Y = mean(y), sd_X = sd(x), sd_Y = sd(y), cor = cor(x, y), n_obs = n()) %&gt;% select(-dataset) %&gt;% round(2) 4.1.2 Датазаурус В работе Matejka and Fitzmaurice (2017) “Same Stats, Different Graphs” были представлены следующие датасеты: datasaurus &lt;- read_csv(&quot;https://raw.githubusercontent.com/agricolamz/DS_for_DH/master/data/datasaurus.csv&quot;) datasaurus datasaurus %&gt;% group_by(dataset) %&gt;% summarise(mean_X = mean(x), mean_Y = mean(y), sd_X = sd(x), sd_Y = sd(y), cor = cor(x, y), n_obs = n()) %&gt;% select(-dataset) %&gt;% round(1) ## `summarise()` ungrouping output (override with `.groups` argument) 4.2 Основы ggplot2 Пакет ggplot2 – современный стандарт для создания графиков в R. Для этого пакета пишут массу расширений. В сжатом виде информация про ggplot2 содержиться здесь. 4.2.1 Диаграмма рассеяния (Scaterplot) ggplot2 ggplot(data = diamonds, aes(carat, price)) + geom_point() dplyr, ggplot2 diamonds %&gt;% ggplot(aes(carat, price))+ geom_point() 4.2.2 Слои diamonds %&gt;% ggplot(aes(carat, price))+ geom_point()+ geom_smooth() ## `geom_smooth()` using method = &#39;gam&#39; and formula &#39;y ~ s(x, bs = &quot;cs&quot;)&#39; diamonds %&gt;% ggplot(aes(carat, price))+ geom_smooth()+ geom_point() ## `geom_smooth()` using method = &#39;gam&#39; and formula &#39;y ~ s(x, bs = &quot;cs&quot;)&#39; 4.2.3 aes() diamonds %&gt;% ggplot(aes(carat, price, color = cut))+ geom_point() diamonds %&gt;% ggplot(aes(carat, price))+ geom_point(color = &quot;green&quot;) diamonds %&gt;% ggplot(aes(carat, price))+ geom_point(aes(color = cut)) diamonds %&gt;% ggplot(aes(carat, price, shape = cut))+ geom_point() diamonds %&gt;% ggplot(aes(carat, price, label = color))+ geom_text() diamonds %&gt;% slice(1:100) %&gt;% ggplot(aes(carat, price, label = color))+ geom_label() Иногда аннотации налезают друг на друга: library(ggrepel) diamonds %&gt;% slice(1:100) %&gt;% ggplot(aes(carat, price, label = color))+ geom_text_repel() diamonds %&gt;% slice(1:100) %&gt;% ggplot(aes(carat, price, label = color))+ geom_text_repel()+ geom_point() diamonds %&gt;% slice(1:100) %&gt;% ggplot(aes(carat, price, label = color, fill = cut))+ # fill отвечает за закрашивание geom_label_repel(alpha = 0.5)+ # alpha отвечает за прозрачность geom_point() 4.2.4 Оформление diamonds %&gt;% ggplot(aes(carat, price, color = cut))+ geom_point() + labs(x = &quot;вес (в каратах)&quot;, y = &quot;цена (в долларах)&quot;, title = &quot;Связь цены и веса бриллиантов&quot;, subtitle = &quot;Данные взяты из датасеты diamonds&quot;, caption = &quot;график сделан при помощи пакета ggplot2&quot;)+ theme(legend.position = &quot;bottom&quot;) # у функции theme() огромный функционал 4.2.5 Логарифмические шкалы Рассмотрим словарь [Ляшевской, Шарова 2011] freqdict &lt;- read_tsv(&quot;https://github.com/agricolamz/DS_for_DH/raw/master/data/freq_dict_2011.csv&quot;) ## Parsed with column specification: ## cols( ## lemma = col_character(), ## pos = col_character(), ## freq_ipm = col_double() ## ) freqdict %&gt;% arrange(desc(freq_ipm)) %&gt;% mutate(id = 1:n()) %&gt;% slice(1:150) %&gt;% ggplot(aes(id, freq_ipm))+ geom_point() freqdict %&gt;% arrange(desc(freq_ipm)) %&gt;% mutate(id = 1:n()) %&gt;% slice(1:150) %&gt;% ggplot(aes(id, freq_ipm, label = lemma))+ geom_point()+ geom_text_repel()+ scale_y_log10() 4.2.6 annotate() Функция annotate добавляет geom к графику. diamonds %&gt;% ggplot(aes(carat, price, color = cut))+ geom_point()+ annotate(geom = &quot;rect&quot;, xmin = 4.8, xmax = 5.2, ymin = 17500, ymax = 18500, fill = &quot;red&quot;, alpha = 0.2) + annotate(geom = &quot;text&quot;, x = 4.7, y = 16600, label = &quot;помогите...\\n я в розовом\\nквадратике&quot;) Скачайте вот этот датасет и постройте диаграмму рассеяния. 4.3 Столбчатые диаграммы (barplots) Одна и та же информация может быть представлена в агрегированном и не агрегированном варианте: misspelling &lt;- read_csv(&quot;https://raw.githubusercontent.com/agricolamz/DS_for_DH/master/data/misspelling_dataset.csv&quot;) ## Parsed with column specification: ## cols( ## correct = col_character(), ## spelling = col_character(), ## count = col_double() ## ) misspelling переменные spelling аггрегирована: для каждого значения представлено значение в столбце count, которое обозначает количество каждого из написаний переменные correct неаггрегированы: в этом столбце она повторяется, для того, чтобы сделать вывод, нужно отдельно посчитать количество вариантов Для аггрегированных данных используется geom_col() misspelling %&gt;% slice(1:20) %&gt;% ggplot(aes(spelling, count))+ geom_col() Перевернем оси: misspelling %&gt;% slice(1:20) %&gt;% ggplot(aes(spelling, count))+ geom_col()+ coord_flip() Для неаггрегированных данных используется geom_bar() misspelling %&gt;% ggplot(aes(correct))+ geom_bar() Перевернем оси: misspelling %&gt;% ggplot(aes(correct))+ geom_bar()+ coord_flip() Неаггрегированный вариант можно перевести в аггрегированный: diamonds %&gt;% count(cut) Аггрегированный вариант можно перевести в неаггрегированный: diamonds %&gt;% count(cut) %&gt;% uncount(n) 4.4 Факторы Как можно заметить по предыдущему разделу, переменные на графике упорядочены по алфавиту. Чтобы это исправить нужно обсудить факторы: my_factor &lt;- factor(misspelling$correct) head(my_factor) ## [1] deschanel deschanel deschanel deschanel deschanel deschanel ## 15 Levels: deschanel galifianakis johansson kaepernick labeouf ... shyamalan levels(my_factor) ## [1] &quot;deschanel&quot; &quot;galifianakis&quot; &quot;johansson&quot; &quot;kaepernick&quot; &quot;labeouf&quot; ## [6] &quot;macaulay&quot; &quot;mcconaughey&quot; &quot;mcgwire&quot; &quot;mclachlan&quot; &quot;minaj&quot; ## [11] &quot;morissette&quot; &quot;palahniuk&quot; &quot;picabo&quot; &quot;poehler&quot; &quot;shyamalan&quot; levels(my_factor) &lt;- rev(levels(my_factor)) head(my_factor) ## [1] shyamalan shyamalan shyamalan shyamalan shyamalan shyamalan ## 15 Levels: shyamalan poehler picabo palahniuk morissette minaj ... deschanel misspelling %&gt;% mutate(correct = factor(correct, levels = c(&quot;deschanel&quot;, &quot;galifianakis&quot;, &quot;johansson&quot;, &quot;kaepernick&quot;, &quot;labeouf&quot;, &quot;macaulay&quot;, &quot;mcgwire&quot;, &quot;mclachlan&quot;, &quot;minaj&quot;, &quot;morissette&quot;, &quot;palahniuk&quot;, &quot;picabo&quot;, &quot;poehler&quot;, &quot;shyamalan&quot;, &quot;mcconaughey&quot;))) %&gt;% ggplot(aes(correct))+ geom_bar()+ coord_flip() Для работы с факторами удобно использовать пакет forcats (входит в tidyverse, вот ссылка на cheatsheet). Иногда полезной бывает функция fct_reorder(): misspelling %&gt;% count(correct) misspelling %&gt;% count(correct) %&gt;% ggplot(aes(fct_reorder(correct, n), n))+ geom_col()+ coord_flip() Кроме того, в функцию fct_reorder() можно добавит функцию, которая будет считаться на векторе, по которому группируют: diamonds %&gt;% mutate(cut = fct_reorder(cut, price, mean)) %&gt;% ggplot(aes(cut)) + geom_bar() В этом примере переменная cut упорядочена по средней mean цене price. Естественно, вместо mean можно использовать другие функции (median, min, max или даже собственные функции). Можно совмещать разные geom_...: misspelling %&gt;% count(correct) %&gt;% ggplot(aes(fct_reorder(correct, n), n, label = n))+ geom_col()+ geom_text(nudge_y = 150)+ coord_flip() На Pudding вышла статья про английские пабы. Здесь лежит немного обработанный датасет, которые они использовали. Визуализируйте 30 самых частотоных названий пабов в Великобритании. 📋 список подсказок ➡ 👁 Как получить нужный датафрейм, где все поссчитано? ➡ Этомо моо сделать функцией count. 👁 Стоп, а почему у меня нарисовалось так много значений? ➡ Может быть нужно было, как написано в задании, взять лишь 30 наблюдений? Полезная функция для этого slice(). 👁 Почему нарисовались лишь бары с частотностью 1?. ➡ По умолчанию count не сортирует вообще, так что в slice() попали бары с частотностью 1. Надо отсортировать от большего к меньшему, перед тем как делать slice(). Это можно сделать при помощи функции arrange() или использовать аргумент sort = TRUE в функции count() 👁 Кажется все? ➡ А Вы убрали подписи осей x и y? А подпись добавили? На новостном портале meduza.io недавно вышла новость о применения закона “о неуважении к власти в интернете”. Постройте графики из этой новости. При построении графиков я использовал цвет “tan3”. 📋 список подсказок ➡ 👁 А ссылка на датафрейм, где все посчитано? ➡ А ее нет. Вам надо самим создать датафрейм. Вспоммнайте функцию tibble() 👁 Не понятно, а что это за geom_ такой линия с точкой? ➡ Такого geom_-а нет. Нужно использовать три geom_-а: geom_point(), geom_text() и geom_line(). 👁 Почему все рисуется в алфавитном порядке? ➡ Здесь нужно использовать функцию factor(), чтобы задать эксплицитный порядок. 👁 Почему точки рисуются, а линия не хочет? Спойлер: самим тут не справиться. ➡ Действительно, здесь спрятана хитрость: ggplot не знает как ему соединить имеющиеся точки, поэтому чтобы все заработало нужно создать новую переменную в датафрейме (например, type = 1), а в функции aes() вставить аргумент group = type. Тогда ggplot объединит линией все, что имеет одно и то же значение в аргументе group. 👁 Ой, а как добавить белое окружение вокруг точек? ➡ Нужно пойти на военную хитрость: добавить еще один geom_point() белого цвета и большего размера, а потом уже наложить обычные точки. Тут и возникают проблемы с порядокм: сначала нужно нарисовать линию, потом белые точки, а потом уже коричневые. А где должен быть geom_text()? 👁 Кажется все? ➡ А Вы убрали подписи осей x и y? А подпись добавили? 4.5 Дотплот Иногда для случаев, когда мы исследуем числовую переменную подходит простой график, который отображает распределение наших наблюдений на одной соответствующей числовой шкале. mtcars %&gt;% ggplot(aes(mpg)) + geom_dotplot(method = &quot;histodot&quot;) ## `stat_bindot()` using `bins = 30`. Pick better value with `binwidth`. По оси x отложена наша переменная, каждая точка – одно наблюдение, а отложенное по оси y стоит игнорировать – оно появляется из-за ограничений пакета ggplot2. Возможно чуть понятнее будет, если добавить geom_rug(), который непосредственно отображает каждое наблюдение. mtcars %&gt;% ggplot(aes(mpg)) + geom_rug()+ geom_dotplot(method = &quot;histodot&quot;) ## `stat_bindot()` using `bins = 30`. Pick better value with `binwidth`. Больший смысл имеет раскрашенный вариант: mtcars %&gt;% mutate(cyl = factor(cyl)) %&gt;% ggplot(aes(mpg, fill = cyl)) + geom_rug()+ geom_dotplot(method = &quot;histodot&quot;)+ scale_y_continuous(NULL, breaks = NULL) # чтобы убрать ось y ## `stat_bindot()` using `bins = 30`. Pick better value with `binwidth`. Как видно, на графике, одна синяя точка попала под одну зеленую: значит они имеют общее наблюдение. 4.6 Гистограммы Если наблюдений слишком много, дотплот не имеем много смысла: diamonds %&gt;% ggplot(aes(price)) + geom_dotplot(method = &quot;histodot&quot;)+ scale_y_continuous(NULL, breaks = NULL) # чтобы убрать ось y ## `stat_bindot()` using `bins = 30`. Pick better value with `binwidth`. diamonds %&gt;% ggplot(aes(price)) + geom_histogram() ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. Обсудим на предыдущем примере mtcars %&gt;% ggplot(aes(mpg))+ geom_rug()+ geom_histogram() ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. По оси x отложена наша переменная, а высота столбца говорит, сколько наблюдений имеют такое же наблюдение. Однако многое зависит от того, что мы считаем одинаковым значением: mtcars %&gt;% ggplot(aes(mpg)) + geom_rug()+ geom_histogram(bins = 100) mtcars %&gt;% ggplot(aes(mpg)) + geom_rug()+ geom_histogram(bins = 5) Существует три алгоритма встроенные в R, которые можно использовать и снимать с себя ответственность: [Sturgers 1926] nclass.Sturges(mtcars$mpg) [Scott 1979] nclass.scott(mtcars$mpg) [Freedman, Diaconis 1981] nclass.FD(mtcars$mpg) mtcars %&gt;% ggplot(aes(mpg)) + geom_histogram(bins = nclass.FD(mtcars$mpg)) Какой из методов использовался при создании следующего графика на основе встроенного датасета iris? В этом типе графика точно так же можно раскрашивать на основании другой переменной: iris %&gt;% ggplot(aes(Petal.Length, fill = Species)) + geom_rug()+ geom_histogram() ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. 4.7 Функции плотности Кроме того, существует способ использовать не такой рубленный график, а его сглаженную вариант, ыйторый строиться при помои функции плотядерной оценки ности. Важное свойство, которое стоит понимать про функцию плотности — что кривая, получаемая ядерной оценкой плотности, не зависит от величины коробки гистделения (хотя есть аргумент, который от adjustвечает за степень “близости” функции плотности к гистограмме). iris %&gt;% ggplot(aes(Petal.Length)) + geom_rug()+ geom_density() Таким образом мы можем сравнивать распределения: iris %&gt;% ggplot(aes(Petal.Length, fill = Species)) + geom_rug()+ geom_density() Часто имеет смысл настроить прозрачность: iris %&gt;% ggplot(aes(Petal.Length, fill = Species)) + geom_rug()+ geom_density(alpha = 0.6) # значение прозрачности изменяется от 0 до 1 Кроме того, иногда удобно разделять группы на разные уровни: # install.packages(ggridges) library(ggridges) iris %&gt;% ggplot(aes(Petal.Length, Species, fill = Species)) + geom_density_ridges(alpha = 0.6) # значение прозрачности изменяется от 0 до 1 ## Picking joint bandwidth of 0.155 В длинный список “2015 Kantar Information is Beautiful Awards” попала визуализация Perceptions of Probability, сделанная пользователем zonination в ggplot2. Попробуйте воспроизвести ее с этими данными. 📋 список подсказок ➡ 👁 как преобразовать в нужный формат? ➡ Я делал это при помощи функции pivot_longer(). 👁 не получается обратиться к колонкам ➡ Да, если в названиях столбцов есть пробел или цифры, то к ним можно обратиться, воспользовавшись обратынми ковычками `. 👁 получается, но порядок неправильный… ➡ Ага, мы обсуждали факторы. Функция fct_reorder() позволяяет менять порядок и даже задавать функцию, вроде среднего или медианы, которая должна быть применена к каждой группе. 👁 а как убрать легенду? ➡ Легенду можно убрать добавив show.legend = FALSE в соответствующий geom_.... 4.8 Точки, джиттер (jitter), вайолинплот (violinplot), ящики с усами (boxplot), Вот другие способы показать распределение числовой переменной: iris %&gt;% ggplot(aes(Species, Petal.Length))+ geom_point() iris %&gt;% ggplot(aes(Species, Petal.Length))+ geom_jitter() iris %&gt;% ggplot(aes(Species, Petal.Length))+ geom_jitter(width = 0.3) library(&quot;ggbeeswarm&quot;) iris %&gt;% ggplot(aes(Species, Petal.Length))+ geom_quasirandom() diamonds %&gt;% ggplot(aes(cut, price))+ geom_violin() diamonds %&gt;% ggplot(aes(cut, price))+ geom_boxplot() 4.9 Фасетизация Достаточно мощным инструментом анализа данных является фасетизация, которая позволяет разбивать графики на основе какой-то переменной. diamonds %&gt;% ggplot(aes(carat, price))+ geom_point(size = 0.3)+ facet_wrap(~cut) При этом иногда так бывает, что наличие какой-то одного значение в одном из фасетов, заставляет иметь одну и ту же шкалу для всех остальных. Это можно изменить при помощи аргумента scales: diamonds %&gt;% ggplot(aes(carat, price))+ geom_point(size = 0.3)+ facet_wrap(~cut, scales = &quot;free&quot;) Кроме того, можно добавлять дополнительные аргументы: diamonds %&gt;% ggplot(aes(carat, price))+ geom_point(size = 0.3)+ facet_wrap(~cut+color) Кроме того, можно создавать сетки переменных используя geom_grid(), они facet_grid()ньше места, чем facet_wrap(): diamonds %&gt;% ggplot(aes(carat, price))+ geom_point(size = 0.3)+ facet_grid(cut~color, scales = &quot;free&quot;) Кроме того facet_grid() позволяет делать обощающие поля, где представлены все данные по какой-то строчке или столбцу: diamonds %&gt;% ggplot(aes(carat, price))+ geom_point(size = 0.3)+ facet_grid(cut~color, scales = &quot;free&quot;, margins = TRUE) 4.10 Визуализация комбинаций признаков 4.10.1 Потоковая Диаграмма (Sankey diagram) Один из способов визуализации отношений между признаками называется потоковая диаграмма. library(&quot;ggforce&quot;) zhadina &lt;- read_csv(&quot;https://raw.githubusercontent.com/agricolamz/DS_for_DH/master/data/zhadina.csv&quot;) ## Parsed with column specification: ## cols( ## word_1 = col_character(), ## word_2 = col_character(), ## word_3 = col_character(), ## type = col_character(), ## n = col_double() ## ) zhadina %&gt;% gather_set_data(1:3) %&gt;% ggplot(aes(x, id = id, split = y, value = n))+ geom_parallel_sets(aes(fill = type), alpha = 0.6, axis.width = 0.5) + geom_parallel_sets_axes(axis.width = 0.5, color = &quot;lightgrey&quot;, fill = &quot;white&quot;) + geom_parallel_sets_labels(angle = 0) + theme_no_axes()+ theme(legend.position = &quot;bottom&quot;) А как поменять порядок? Снова факторы. zhadina %&gt;% gather_set_data(1:3) %&gt;% mutate(y = fct_reorder(y, n, mean)) %&gt;% ggplot(aes(x, id = id, split = y, value = n))+ geom_parallel_sets(aes(fill = type), alpha = 0.6, axis.width = 0.5) + geom_parallel_sets_axes(axis.width = 0.5, color = &quot;lightgrey&quot;, fill = &quot;white&quot;) + geom_parallel_sets_labels(angle = 0) + theme_no_axes()+ theme(legend.position = &quot;bottom&quot;) Можно донастроить, задав собственный порядок в аргументе levels функции factor(). 4.10.2 UpSet Plot Если диаграмма Sankey визуализирует попарные отношения между переменными, то график UpSet потенциально может визуализировать все возможные комбинации и является хорошей альтернативой диаграмме Вена, с большим количеством переменных (см. эту статью Лауры Эллис). library(UpSetR) movies &lt;- read.csv( system.file(&quot;extdata&quot;, &quot;movies.csv&quot;, package = &quot;UpSetR&quot;), header=TRUE, sep=&quot;;&quot; ) str(movies) ## &#39;data.frame&#39;: 3883 obs. of 21 variables: ## $ Name : chr &quot;Toy Story (1995)&quot; &quot;Jumanji (1995)&quot; &quot;Grumpier Old Men (1995)&quot; &quot;Waiting to Exhale (1995)&quot; ... ## $ ReleaseDate: int 1995 1995 1995 1995 1995 1995 1995 1995 1995 1995 ... ## $ Action : int 0 0 0 0 0 1 0 0 1 1 ... ## $ Adventure : int 0 1 0 0 0 0 0 1 0 1 ... ## $ Children : int 1 1 0 0 0 0 0 1 0 0 ... ## $ Comedy : int 1 0 1 1 1 0 1 0 0 0 ... ## $ Crime : int 0 0 0 0 0 1 0 0 0 0 ... ## $ Documentary: int 0 0 0 0 0 0 0 0 0 0 ... ## $ Drama : int 0 0 0 1 0 0 0 0 0 0 ... ## $ Fantasy : int 0 1 0 0 0 0 0 0 0 0 ... ## $ Noir : int 0 0 0 0 0 0 0 0 0 0 ... ## $ Horror : int 0 0 0 0 0 0 0 0 0 0 ... ## $ Musical : int 0 0 0 0 0 0 0 0 0 0 ... ## $ Mystery : int 0 0 0 0 0 0 0 0 0 0 ... ## $ Romance : int 0 0 1 0 0 0 1 0 0 0 ... ## $ SciFi : int 0 0 0 0 0 0 0 0 0 0 ... ## $ Thriller : int 0 0 0 0 0 1 0 0 0 1 ... ## $ War : int 0 0 0 0 0 0 0 0 0 0 ... ## $ Western : int 0 0 0 0 0 0 0 0 0 0 ... ## $ AvgRating : num 4.15 3.2 3.02 2.73 3.01 3.88 3.41 3.01 2.66 3.54 ... ## $ Watches : int 2077 701 478 170 296 940 458 68 102 888 ... upset(movies[,3:19], nsets = 16, order.by = &quot;freq&quot;) "],
["strings.html", "5 Работа со строками 5.1 Работа со строками в R 5.2 Как получить строку? 5.3 Соединение и разделение строк 5.4 Количество символов 5.5 Сортировка 5.6 Поиск подстроки 5.7 Изменение строк 5.8 Регулярные выражения 5.9 Определение языка 5.10 Расстояния между строками", " 5 Работа со строками 5.1 Работа со строками в R Для работы со строками можно использовать: базовый R пакет stringr (часть tidyverse) пакет stringi – отдельный пакет, так что не забудьте его установить: install.packages(&quot;stringi&quot;) library(tidyverse) library(stringi) Мы будем пользоваться в основном пакетами stingr и stringi, так как они в большинстве случаях удобнее. К счастью функции этих пакетов легко отличить от остальных: функции пакет stringr всегда начинаются с str_, а функции пакета stringi — c stri_. Существует cheat sheet по stringr. 5.2 Как получить строку? следите за кавычками &quot;the quick brown fox jumps over the lazy dog&quot; ## [1] &quot;the quick brown fox jumps over the lazy dog&quot; &#39;the quick brown fox jumps over the lazy dog&#39; ## [1] &quot;the quick brown fox jumps over the lazy dog&quot; &quot;the quick &#39;brown&#39; fox jumps over the lazy dog&quot; ## [1] &quot;the quick &#39;brown&#39; fox jumps over the lazy dog&quot; &#39;the quick &quot;brown&quot; fox jumps over the lazy dog&#39; ## [1] &quot;the quick \\&quot;brown\\&quot; fox jumps over the lazy dog&quot; пустая строка &quot;&quot; ## [1] &quot;&quot; &#39;&#39; ## [1] &quot;&quot; character(3) ## [1] &quot;&quot; &quot;&quot; &quot;&quot; преобразование typeof(4:7) ## [1] &quot;integer&quot; as.character(4:7) ## [1] &quot;4&quot; &quot;5&quot; &quot;6&quot; &quot;7&quot; встроенные векторы letters ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; &quot;i&quot; &quot;j&quot; &quot;k&quot; &quot;l&quot; &quot;m&quot; &quot;n&quot; &quot;o&quot; &quot;p&quot; &quot;q&quot; &quot;r&quot; &quot;s&quot; ## [20] &quot;t&quot; &quot;u&quot; &quot;v&quot; &quot;w&quot; &quot;x&quot; &quot;y&quot; &quot;z&quot; LETTERS ## [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; &quot;E&quot; &quot;F&quot; &quot;G&quot; &quot;H&quot; &quot;I&quot; &quot;J&quot; &quot;K&quot; &quot;L&quot; &quot;M&quot; &quot;N&quot; &quot;O&quot; &quot;P&quot; &quot;Q&quot; &quot;R&quot; &quot;S&quot; ## [20] &quot;T&quot; &quot;U&quot; &quot;V&quot; &quot;W&quot; &quot;X&quot; &quot;Y&quot; &quot;Z&quot; month.name ## [1] &quot;January&quot; &quot;February&quot; &quot;March&quot; &quot;April&quot; &quot;May&quot; &quot;June&quot; ## [7] &quot;July&quot; &quot;August&quot; &quot;September&quot; &quot;October&quot; &quot;November&quot; &quot;December&quot; помните, что функции data.frame(), read.csv(), read.csv2(), read.table() из базового R всегда по-умолчанию преобразуют строки в факторы, и чтобы это предотвратить нужно использовать аргумент stringsAsFactors. Это много обсуждалось в сообществе R, можно, например, почитать про это вот этот блог пост Роджера Пенга. str(data.frame(letters[6:10], LETTERS[4:8])) ## &#39;data.frame&#39;: 5 obs. of 2 variables: ## $ letters.6.10.: chr &quot;f&quot; &quot;g&quot; &quot;h&quot; &quot;i&quot; ... ## $ LETTERS.4.8. : chr &quot;D&quot; &quot;E&quot; &quot;F&quot; &quot;G&quot; ... str(data.frame(letters[6:10], LETTERS[4:8], stringsAsFactors = FALSE)) ## &#39;data.frame&#39;: 5 obs. of 2 variables: ## $ letters.6.10.: chr &quot;f&quot; &quot;g&quot; &quot;h&quot; &quot;i&quot; ... ## $ LETTERS.4.8. : chr &quot;D&quot; &quot;E&quot; &quot;F&quot; &quot;G&quot; ... Но этом курсе мы учим использовать сразу tibble(), read_csv(), read_csv2(), read_tsv(), read_delim() из пакета readr (входит в tidyverse). Создание рандомных строк set.seed(42) stri_rand_strings(n = 10, length = 5:14) ## [1] &quot;uwHpd&quot; &quot;Wj8ehS&quot; &quot;ivFSwy7&quot; &quot;TYu8zw5V&quot; ## [5] &quot;OuRpjoOg0&quot; &quot;p0CubNR2yQ&quot; &quot;xtdycKLOm2k&quot; &quot;fAGVfylZqBGp&quot; ## [9] &quot;gE28DTCi0NV0a&quot; &quot;9MemYE55If0Cvv&quot; Перемешивает символы внутри строки stri_rand_shuffle(&quot;любя, съешь щипцы, — вздохнёт мэр, — кайф жгуч&quot;) ## [1] &quot;,цо м,пюзгу сл аиъ—в кжряд,ыщьчебэн х—штё фй&quot; stri_rand_shuffle(month.name) ## [1] &quot;aJayunr&quot; &quot;eyrbraFu&quot; &quot;achMr&quot; &quot;Aplri&quot; &quot;ayM&quot; &quot;Jnue&quot; ## [7] &quot;uJly&quot; &quot;usuAgt&quot; &quot;tpebermSe&quot; &quot;tOecrbo&quot; &quot;oeNembvr&quot; &quot;Dmceerbe&quot; Генерирует псевдорандомный текст1 stri_rand_lipsum(nparagraphs = 2) ## [1] &quot;Lorem ipsum dolor sit amet, donec sit nunc urna sed ultricies ac pharetra orci luctus iaculis, ac tincidunt cum. Neque eu semper at sociosqu hendrerit. Eu aliquet lacus, eu hendrerit donec aliquam eros. Risus nibh, quam in sit facilisi ipsum. Amet sem sed donec sed molestie scelerisque tincidunt. Nisl donec et facilisis interdum non sed dolor purus. In ipsum dignissim torquent velit nec aliquam pellentesque. Ac, adipiscing, neque et at torquent, vestibulum ullamcorper. Ad dictumst enim velit non nulla felis habitant. Egestas placerat consectetur, dictum nostra sed nec. Erat phasellus dolor libero aliquam viverra. Vestibulum leo et. Suscipit egestas in in montes, sapien gravida? Conubia purus varius ut nec feugiat.&quot; ## [2] &quot;Risus eleifend magnis neque diam, suspendisse ullamcorper nulla adipiscing malesuada massa, nisi sociosqu velit id et. Aliquam facilisis et aenean. Parturient vel ac in convallis, massa diam nibh. Nulla interdum cursus et. Natoque amet, ut praesent. Tortor ultrices a consectetur, augue natoque class faucibus? Ut sed arcu elementum magna. Dignissim ac facilisi quis ut nisl eu, massa.&quot; 5.3 Соединение и разделение строк Соединенить строки можно используя функцию str_c(), в которую, как и в функции с(), можно перечислять элементы через запятую: tibble(upper = rev(LETTERS), smaller = letters) %&gt;% mutate(merge = str_c(upper, smaller)) Кроме того, если хочется, можно использовать особенный разделитель, указав его в аргументе sep: tibble(upper = rev(LETTERS), smaller = letters) %&gt;% mutate(merge = str_c(upper, smaller, sep = &quot;_&quot;)) Аналогичным образом, для разделение строки на подстроки можно использовать функцию separate(). Это функция разносит разделенные элементы строки в соответствующие столбцы. У функции три обязательных аргумента: col — колонка, которую следует разделить, into — вектор названий новых столбец, sep — разделитель. tibble(upper = rev(LETTERS), smaller = letters) %&gt;% mutate(merge = str_c(upper, smaller, sep = &quot;_&quot;)) %&gt;% separate(col = merge, into = c(&quot;column_1&quot;, &quot;column_2&quot;), sep = &quot;_&quot;) Кроме того, есть инструмент str_split(), которая позволяет разбивать строки на подстроки, но возвращает список. str_split(month.name, &quot;r&quot;) ## [[1]] ## [1] &quot;Janua&quot; &quot;y&quot; ## ## [[2]] ## [1] &quot;Feb&quot; &quot;ua&quot; &quot;y&quot; ## ## [[3]] ## [1] &quot;Ma&quot; &quot;ch&quot; ## ## [[4]] ## [1] &quot;Ap&quot; &quot;il&quot; ## ## [[5]] ## [1] &quot;May&quot; ## ## [[6]] ## [1] &quot;June&quot; ## ## [[7]] ## [1] &quot;July&quot; ## ## [[8]] ## [1] &quot;August&quot; ## ## [[9]] ## [1] &quot;Septembe&quot; &quot;&quot; ## ## [[10]] ## [1] &quot;Octobe&quot; &quot;&quot; ## ## [[11]] ## [1] &quot;Novembe&quot; &quot;&quot; ## ## [[12]] ## [1] &quot;Decembe&quot; &quot;&quot; 5.4 Количество символов 5.4.1 Подсчет количества символов tibble(mn = month.name) %&gt;% mutate(n_charactars = str_count(mn)) 5.4.2 Подгонка количества символов Можно обрезать строки, используя функцию str_trunc(): tibble(mn = month.name) %&gt;% mutate(mn_new = str_trunc(mn, 6)) Можно решить с какой стороны обрезать, используя аргумент side: tibble(mn = month.name) %&gt;% mutate(mn_new = str_trunc(mn, 6, side = &quot;left&quot;)) tibble(mn = month.name) %&gt;% mutate(mn_new = str_trunc(mn, 6, side = &quot;center&quot;)) Можно заменить многоточие, используя аргумент ellipsis: tibble(mn = month.name) %&gt;% mutate(mn_new = str_trunc(mn, 3, ellipsis = &quot;&quot;)) Можно наоборот “раздуть” строку: tibble(mn = month.name) %&gt;% mutate(mn_new = str_pad(mn, 10)) Опять же есть аргумент side: tibble(mn = month.name) %&gt;% mutate(mn_new = str_pad(mn, 10, side = &quot;right&quot;)) Также можно выбрать, чем “раздувать строку”: tibble(mn = month.name) %&gt;% mutate(mn_new = str_pad(mn, 10, pad = &quot;.&quot;)) На Pudding вышла статья про английские пабы. Здесь лежит немного обработанный датасет, которые они использовали. Визуализируйте 40 самых частотоных названий пабов в Великобритании, отложив по оси x количество символов, а по оси y – количество баров с таким названием. 📋 список подсказок ➡ 👁 Датасет скачался, что дальше? ➡ Перво-наперво следует создать переменную, в которой бы хранилось количество каждого из баров. 👁 А как посчитать количество баров? ➡ Это можно сделать при помощи функции count(). 👁 Бары пересчитали, что дальше? ➡ Теперь нужно создать новую переменную, где бы хранилась информация о количестве символов. 👁 Все переменные есть, теперь рисуем? ➡ Не совсем. Перед тем как рисовать нужно отфильтровать 50 самых популярных. 👁 Так, все готово, а какие geom_()? ➡ На графике geom_point() и geom_text_repel() из пакета ggrepel. 👁 А-а-а-а! could not find function \"geom_text_repel\" ➡ А вы включили библиотеку ggrepel? Если не включили, то функция, естественно будет недоступна. 👁 А-а-а-а! geom_text_repel requires the following missing aesthetics: label\" ➡ Все, как написала программа: чтобы писать какой-то текст в функции aes() нужно добавить аргумент label = pub_name. Иначе откуда он узнает, что ему писать? 👁 Фуф! Все готово! ➡ А оси подписаны? А заголовок? А подпись про источник данных? 5.5 Сортировка Для сортировки существует базовая функция sort() и функция из stringr str_sort(): unsorted_latin &lt;- c(&quot;I&quot;, &quot;♥&quot;, &quot;N&quot;, &quot;Y&quot;) sort(unsorted_latin) ## [1] &quot;♥&quot; &quot;I&quot; &quot;N&quot; &quot;Y&quot; str_sort(unsorted_latin) ## [1] &quot;♥&quot; &quot;I&quot; &quot;N&quot; &quot;Y&quot; str_sort(unsorted_latin, locale = &quot;lt&quot;) ## [1] &quot;♥&quot; &quot;I&quot; &quot;Y&quot; &quot;N&quot; unsorted_cyrillic &lt;- c(&quot;я&quot;, &quot;i&quot;, &quot;ж&quot;) str_sort(unsorted_cyrillic) ## [1] &quot;i&quot; &quot;ж&quot; &quot;я&quot; str_sort(unsorted_cyrillic, locale = &quot;ru_UA&quot;) ## [1] &quot;ж&quot; &quot;я&quot; &quot;i&quot; Список локалей на копмьютере можно посмотреть командой stringi::stri_locale_list(). Список всех локалей вообще приведен на этой странице. Еще полезные команды: stringi::stri_locale_info и stringi::stri_locale_set. Не углубляясь в разнообразие алгоритмов сортировки, отмечу, что алгоритм по-умолчанию хуже работает с большими данными: set.seed(42) huge &lt;- sample(letters, 1e7, replace = TRUE) head(huge) ## [1] &quot;q&quot; &quot;e&quot; &quot;a&quot; &quot;y&quot; &quot;j&quot; &quot;d&quot; system.time( sort(huge) ) ## user system elapsed ## 7.359 0.024 7.383 system.time( sort(huge, method = &quot;radix&quot;) ) ## user system elapsed ## 0.330 0.028 0.358 system.time( str_sort(huge) ) ## user system elapsed ## 6.566 0.072 6.679 huge_tbl &lt;- tibble(huge) system.time( huge_tbl %&gt;% arrange(huge) ) ## user system elapsed ## 3.404 0.064 3.468 Предварительный вывод: для больших данных – sort(..., method = \"radix\"). 5.6 Поиск подстроки Можно использовать функцию str_detect(): tibble(mn = month.name) %&gt;% mutate(has_r = str_detect(mn, &quot;r&quot;)) Кроме того, существует функция, которая возвращает индексы, а не значения TRUE/FALSE: tibble(mn = month.name) %&gt;% slice(str_which(month.name, &quot;r&quot;)) Также можно посчитать количество вхождений какой-то подстроки: tibble(mn = month.name) %&gt;% mutate(has_r = str_count(mn, &quot;r&quot;)) 5.7 Изменение строк 5.7.1 Изменение регистра latin &lt;- &quot;tHe QuIcK BrOwN fOx JuMpS OvEr ThE lAzY dOg&quot; cyrillic &lt;- &quot;лЮбЯ, сЪеШь ЩиПцЫ, — вЗдОхНёТ мЭр, — кАйФ жГуЧ&quot; str_to_upper(latin) ## [1] &quot;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&quot; str_to_lower(cyrillic) ## [1] &quot;любя, съешь щипцы, — вздохнёт мэр, — кайф жгуч&quot; str_to_title(latin) ## [1] &quot;The Quick Brown Fox Jumps Over The Lazy Dog&quot; 5.7.2 Выделение подстроки Подстроку в строке можно выделить двумя способами: по индексам функцией str_sub(), и по подстроке функцией str_png(). extract(images/5.07_str_sub.png) tibble(mn = month.name) %&gt;% mutate(mutate = str_sub(mn, start = 1, end = 2)) tibble(mn = month.name) %&gt;% mutate(mutate = str_extract(mn, &quot;r&quot;)) По умолчанию функция str_extract() возвращает первое вхождение подстроки, соответствующей шаблону. Также существует функция str_extract_all(), которая возвращает все вхождения подстрок, соответствующих шаблону, однако возвращает объект типа список. str_extract_all(month.name, &quot;r&quot;) ## [[1]] ## [1] &quot;r&quot; ## ## [[2]] ## [1] &quot;r&quot; &quot;r&quot; ## ## [[3]] ## [1] &quot;r&quot; ## ## [[4]] ## [1] &quot;r&quot; ## ## [[5]] ## character(0) ## ## [[6]] ## character(0) ## ## [[7]] ## character(0) ## ## [[8]] ## character(0) ## ## [[9]] ## [1] &quot;r&quot; ## ## [[10]] ## [1] &quot;r&quot; ## ## [[11]] ## [1] &quot;r&quot; ## ## [[12]] ## [1] &quot;r&quot; 5.7.3 Замена подстроки Существует функция str_replace(), которая позволяет заменить одну подстроку в строке на другую: tibble(mn = month.name) %&gt;% mutate(mutate = str_replace(mn, &quot;r&quot;, &quot;R&quot;)) Как и другие функции str_replace() делает лишь одну замену, чтобы заменить все вхождения подстроки следует использовать функцию str_replace_all(): tibble(mn = month.name) %&gt;% mutate(mutate = str_replace_all(mn, &quot;r&quot;, &quot;R&quot;)) 5.7.4 Удаление подстроки Для удаления подстроки на основе шаблона, используется функция str_remove() и str_remove_all() tibble(month.name) %&gt;% mutate(mutate = str_remove(month.name, &quot;r&quot;)) tibble(month.name) %&gt;% mutate(mutate = str_remove_all(month.name, &quot;r&quot;)) 5.7.5 Транслитерация строк В пакете stringi сууществует достаточно много методов транслитераций строк, которые можно вывести командой stri_trans_list(). Вот пример использования некоторых из них: stri_trans_general(&quot;stringi&quot;, &quot;latin-cyrillic&quot;) ## [1] &quot;стринги&quot; stri_trans_general(&quot;сырники&quot;, &quot;cyrillic-latin&quot;) ## [1] &quot;syrniki&quot; stri_trans_general(&quot;stringi&quot;, &quot;latin-greek&quot;) ## [1] &quot;στριγγι&quot; stri_trans_general(&quot;stringi&quot;, &quot;latin-armenian&quot;) ## [1] &quot;ստրինգի&quot; Вот два датасета: список городов России частотный словарь русского языка [Шаров, Ляшевская 2011] Определите сколько городов называется обычным словом русского языка (например, город Орёл)? Не забудьте поменять ё на е. 📋 список подсказок ➡ 👁 Датасеты скачались, что дальше? ➡ Надо их преобразовать к нужному виду и объединить. 👁 А как их соединить? Что у них общего? ➡ В одном датасете есть переменная city, в другом – переменная lemma. Все города начинаются с большой буквы, все леммы с маленькой буквы. Я бы уменьшил букву в датасете с городами, сделал бы новый столбец в датасете с городами (например, town), соединил бы датасеты и посчитал бы сколько в результирующем датасете значений town. 👁 А как соеднить? ➡ Я бы использовал dict %&gt;% ... %&gt;% inner_join(cities). Если в датасетах разные названия столбцов, то следует указывать какие столбцы, каким соответствуют:dict %&gt;% ... %&gt;% inner_join(cities, by = c(\"lemma\" = \"city\")) 👁 Соединилось вроде… А как посчитать? ➡ Я бы, как обычно, использовал функцию count(). 5.8 Регулярные выражения Большинство функций из раздела об операциях над векторами (str_detect(), str_extract(), str_remove() и т. п.) имеют следующую структуру: строка, с которой работает функция образец (pattern) Дальше мы будем использовать функцию str_view_all(), которая позволяет показывать, выделенное образцом в исходной строке. str_view_all(&quot;Я всегда путаю с и c&quot;, &quot;c&quot;) # я ищу латинскую c 5.8.1 Экранирование метасимволов a &lt;- &quot;Всем известно, что 4$\\\\2 + 3$ * 5 = 17$? Да? Ну хорошо (а то я не был уверен). [|}^{|]&quot; str_view_all(a, &quot;$&quot;) str_view_all(a, &quot;\\\\$&quot;) str_view_all(a, &quot;\\\\.&quot;) str_view_all(a, &quot;\\\\*&quot;) str_view_all(a, &quot;\\\\+&quot;) str_view_all(a, &quot;\\\\?&quot;) str_view_all(a, &quot;\\\\(&quot;) str_view_all(a, &quot;\\\\)&quot;) str_view_all(a, &quot;\\\\|&quot;) str_view_all(a, &quot;\\\\^&quot;) str_view_all(a, &quot;\\\\[&quot;) str_view_all(a, &quot;\\\\]&quot;) str_view_all(a, &quot;\\\\{&quot;) str_view_all(a, &quot;\\\\}&quot;) str_view_all(a, &quot;\\\\\\\\&quot;) 5.8.2 Классы знаков \\\\d – цифры. \\\\D – не цифры. str_view_all(&quot;два 15 42. 42 15. 37 08 5. 20 20 20!&quot;, &quot;\\\\d&quot;) str_view_all(&quot;два 15 42. 42 15. 37 08 5. 20 20 20!&quot;, &quot;\\\\D&quot;) \\\\s – пробелы. \\\\S – не пробелы. str_view_all(&quot;два 15 42. 42 15. 37 08 5. 20 20 20!&quot;, &quot;\\\\s&quot;) str_view_all(&quot;два 15 42. 42 15. 37 08 5. 20 20 20!&quot;, &quot;\\\\S&quot;) \\\\w – не пробелы и не знаки препинания. \\\\W – пробелы и знаки препинания. str_view_all(&quot;два 15 42. 42 15. 37 08 5. 20 20 20!&quot;, &quot;\\\\w&quot;) str_view_all(&quot;два 15 42. 42 15. 37 08 5. 20 20 20!&quot;, &quot;\\\\W&quot;) произвольная группа символов и обратная к ней str_view_all(&quot;Умей мечтать, не став рабом мечтанья&quot;, &quot;[оауиыэёеяю]&quot;) str_view_all(&quot;И мыслить, мысли не обожествив&quot;, &quot;[^оауиыэёеяю]&quot;) встроенные группы символов str_view_all(&quot;два 15 42. 42 15. 37 08 5. 20 20 20!&quot;, &quot;[0-9]&quot;) str_view_all(&quot;Карл у Клары украл кораллы, а Клара у Карла украла кларнет&quot;, &quot;[а-я]&quot;) str_view_all(&quot;Карл у Клары украл кораллы, а Клара у Карла украла кларнет&quot;, &quot;[А-Я]&quot;) str_view_all(&quot;Карл у Клары украл кораллы, а Клара у Карла украла кларнет&quot;, &quot;[А-я]&quot;) str_view_all(&quot;The quick brown Fox jumps over the lazy Dog&quot;, &quot;[a-z]&quot;) str_view_all(&quot;два 15 42. 42 15. 37 08 5. 20 20 20!&quot;, &quot;[^0-9]&quot;) выбор из нескольких групп str_view_all(&quot;Карл у Клары украл кораллы, а Клара у Карла украла кларнет&quot;, &quot;лар|рал|арл&quot;) произвольный символ str_view_all(&quot;Везет Сенька Саньку с Сонькой на санках. Санки скок, Сеньку с ног, Соньку в лоб, все — в сугроб&quot;, &quot;[Сс].н&quot;) знак начала и конца строки str_view_all(&quot;от топота копыт пыль по полю летит.&quot;, &quot;^о&quot;) str_view_all(&quot;У ежа — ежата, у ужа — ужата&quot;, &quot;жата$&quot;) есть еще другие группы и другие обозначения уже приведенных групп, см. ?regex 5.8.3 Квантификация ? – ноль или один раз str_view_all(&quot;хорошее длинношеее животное&quot;, &quot;еее?&quot;) * – ноль и более раз str_view_all(&quot;хорошее длинношеее животное&quot;, &quot;ее*&quot;) + – один и более раз str_view_all(&quot;хорошее длинношеее животное&quot;, &quot;е+&quot;) {n} – n раз str_view_all(&quot;хорошее длинношеее животное&quot;, &quot;е{2}&quot;) {n,} – n раз и более str_view_all(&quot;хорошее длинношеее животное&quot;, &quot;е{1,}&quot;) {n,m} – от n до m. Отсутствие пробела важно: {1,2} – правильно, {1,␣2} – неправильно. str_view_all(&quot;хорошее длинношеее животное&quot;, &quot;е{2,3}&quot;) группировка символов str_view_all(&quot;Пушкиновед, Лермонтовед, Лермонтововед&quot;, &quot;(ов)+&quot;) str_view_all(&quot;беловатый, розоватый, розововатый&quot;, &quot;(ов)+&quot;) жадный vs. нежадный алоритмы str_view_all(&quot;Пушкиновед, Лермонтовед, Лермонтововед&quot;, &quot;в.*ед&quot;) str_view_all(&quot;Пушкиновед, Лермонтовед, Лермонтововед&quot;, &quot;в.*?ед&quot;) 5.8.4 Позиционная проверка (look arounds) Позиционная проверка – выглядит достаточно непоследовательно даже в свете остальных регулярных выражений. Давайте найдем все а перед р: str_view_all(&quot;Карл у Клары украл кораллы, а Клара у Карла украла кларнет&quot;, &quot;а(?=р)&quot;) А теперь все а перед р или л: str_view_all(&quot;Карл у Клары украл кораллы, а Клара у Карла украла кларнет&quot;, &quot;а(?=[рл])&quot;) Давайте найдем все а после р str_view_all(&quot;Карл у Клары украл кораллы, а Клара у Карла украла кларнет&quot;, &quot;(?&lt;=р)а&quot;) А теперь все а после р или л: str_view_all(&quot;Карл у Клары украл кораллы, а Клара у Карла украла кларнет&quot;, &quot;(?&lt;=[рл])а&quot;) Также у этих выражений есть формы с отрицанием. Давайте найдем все р не перед а: str_view_all(&quot;Карл у Клары украл кораллы, а Клара у Карла украла кларнет&quot;, &quot;р(?!а)&quot;) А теперь все р не после а: str_view_all(&quot;Карл у Клары украл кораллы, а Клара у Карла украла кларнет&quot;, &quot;(?&lt;!а)р&quot;) Запомнить с ходу это достаточно сложно, так что подсматривайте сюда: Вот отсюда можно скачать файл с текстом стихотворения Н. Заболоцкого “Меркнут знаки задиака”. Посчитайте долю женских (ударение падает на предпоследний слог рифмующихся слов) и мужских (ударение падает на последний слог рифмующихся слов) рифм в стихотворении. 📋 список подсказок ➡ 👁 Датасеты скачивается с ошибкой, почему? ➡ Дело в том, что исходный файл в формате .txt, а не .csv. Его нужно скачивать, например, командой read_lines() 👁 Ошибка: ...applied to an object of class \"character\" ➡ Скачав файл Вы получили вектор со строками, где каждая элимент вектора – строка стихотворения. Создайте tibble(), тогда можно будет применять стандартные инструменты tidyverse. 👁 Хорошо, tibble() создан, что дальше? ➡ Дальше нужно создать переменную, из которой будет понятно, мужская в каждой строке рифма, или женская. 👁 А как определить, какая рифма? Нужно с словарем сравнивать? ➡ Формально говоря, определять рифму можно по косвенным признакам. Все стихотворение написано четырехстопным хореем, значит в нем либо 7, либо 8 слогов. Значит, посчитав количество слогов, мы поймем, какая перед нами рифма. 👁 А как посчитать гласные? ➡ Нужно написать регулярное выражение… вроде бы это тема нашего занятия… 👁 Гласные посчитаны. А что дальше? ➡ Ну теперь нужно посчитать, сколько каких длин (в количестве слогов) бывает в стихотворении. Это можно сделать при помощи функции count(). 👁 А почему у меня есть строки длины 0 слогов ➡ Ну, видимо, в стихотворении были пустые строки. Они использовались для разделения строф. 👁 А почему у меня есть строки длины 6 слогов ➡ Ну, видимо, Вы написали регулярное выражение, которое не учитывает, что гласные буквы могут быть еще и в начале строки, а значит написаны с большой буквы. В ходе анализа данных чаще всего бороться со строками и регулярными выражениями приходится в процессе обработки неаккуратнособранных анкет. Предлагаю обработать переменные sex и age такой вот неудачно собранной анкеты и построить следующий график: 📋 список подсказок ➡ 👁 А что это за geom_...()? ➡ Это geom_dotplot() с аргументом method = \"histodot\" и с удаленной осью y при помощи команды scale_y_continuous(NULL, breaks = NULL) 👁 Почему на графике рисутеся каждое значение возраста? ➡ Если Вы все правильно преобразовали, должно помочь преобразование строковой переменной age в числовую при помощи функции as.integer(). 5.9 Определение языка Для определения языка существует два пакета cld2 (вероятностный) и cld3 (нейросеть). udhr_24 &lt;- read_csv(&quot;https://raw.githubusercontent.com/agricolamz/DS_for_DH/master/data/article_24_from_UDHR.csv&quot;) ## Parsed with column specification: ## cols( ## article_text = col_character() ## ) udhr_24 cld2::detect_language(udhr_24$article_text) ## [1] &quot;ru&quot; &quot;en&quot; &quot;fr&quot; &quot;es&quot; &quot;ar&quot; &quot;zh&quot; cld2::detect_language(udhr_24$article_text, lang_code = FALSE) ## [1] &quot;RUSSIAN&quot; &quot;ENGLISH&quot; &quot;FRENCH&quot; &quot;SPANISH&quot; &quot;ARABIC&quot; &quot;CHINESE&quot; cld3::detect_language(udhr_24$article_text) ## [1] &quot;ru&quot; &quot;en&quot; &quot;fr&quot; &quot;es&quot; &quot;ar&quot; &quot;zh&quot; cld2::detect_language(&quot;Ты женат? Говорите ли по-английски?&quot;) ## [1] &quot;bg&quot; cld3::detect_language(&quot;Ты женат? Говорите ли по-английски?&quot;) ## [1] NA cld2::detect_language(&quot;Варкалось. Хливкие шорьки пырялись по наве, и хрюкотали зелюки, как мюмзики в мове.&quot;) ## [1] &quot;ru&quot; cld3::detect_language(&quot;Варкалось. Хливкие шорьки пырялись по наве, и хрюкотали зелюки, как мюмзики в мове.&quot;) ## [1] &quot;ru&quot; cld2::detect_language(&quot;Варчилось… Хлив&#39;язкі тхурки викрули, свербчись навкрузі, жасумновілі худоки гривіли зехряки в чузі.&quot;) ## [1] &quot;uk&quot; cld3::detect_language(&quot;Варчилось… Хлив&#39;язкі тхурки викрули, свербчись навкрузі, жасумновілі худоки гривіли зехряки в чузі.&quot;) ## [1] &quot;uk&quot; cld2::detect_language_mixed(&quot;Многие в нашей команде OpenDataScience занимаются state-of-the-art технологиями машинного обучения: DL-фреймворками, байесовскими методами машинного обучения, вероятностным программированием и не только.&quot;) ## $classificaton ## language code latin proportion ## 1 RUSSIAN ru FALSE 0.87 ## 2 ENGLISH en TRUE 0.11 ## 3 UNKNOWN un TRUE 0.00 ## ## $bytes ## [1] 353 ## ## $reliabale ## [1] TRUE cld3::detect_language_mixed(&quot;Многие в нашей команде OpenDataScience занимаются state-of-the-art технологиями машинного обучения: DL-фреймворками, байесовскими методами машинного обучения, вероятностным программированием и не только.&quot;) 5.10 Расстояния между строками Существует много разных метрик для измерения расстояния между строками (см. ?`stringdist-metrics`), в примерах используется расстояние Дамерау — Левенштейна. Данное расстояние получается при подсчете количества операций, которые нужно сделать, чтобы перевести одну строку в другую. вставка ab → aNb удаление aOb → ab замена символа aOb → aNb перестановка символов ab → ba library(stringdist) ## ## Attaching package: &#39;stringdist&#39; ## The following object is masked from &#39;package:tidyr&#39;: ## ## extract stringdist(&quot;корова&quot;,&quot;корова&quot;) ## [1] 0 stringdist(&quot;коровы&quot;, c(&quot;курица&quot;, &quot;бык&quot;, &quot;утка&quot;, &quot;корова&quot;, &quot;осел&quot;)) ## [1] 4 6 6 1 5 amatch(c(&quot;быки&quot;, &quot;коровы&quot;), c(&quot;курица&quot;, &quot;бык&quot;, &quot;утка&quot;, &quot;корова&quot;, &quot;осел&quot;), maxDist = 2) ## [1] 2 4 Lorem ipsum — классический текст-заполнитель на основе трактата Марка Туллия Цицерона “О пределах добра и зла”. Его используют, чтобы посмотреть, как страница смотриться, когда заполнена текстом↩︎ "],
["lists.html", "6 Работа со списками 6.1 Что такое списки? 6.2 Пакет purrr", " 6 Работа со списками library(tidyverse) 6.1 Что такое списки? Мы обсуждали в разделе @ref{list} тип данных список, и все особенности их синтаксиса: x &lt;- list(m = &quot;a&quot;, n = c(2, 4), o = c(&quot;blue&quot;, &quot;green&quot;, &quot;red&quot;)) x ## $m ## [1] &quot;a&quot; ## ## $n ## [1] 2 4 ## ## $o ## [1] &quot;blue&quot; &quot;green&quot; &quot;red&quot; x$m ## [1] &quot;a&quot; x[1] ## $m ## [1] &quot;a&quot; x[[2]] ## [1] 2 4 x[[2]][2] ## [1] 4 Списки вне R обычно хранят в файлах типа .json (по-английски говорят с ударением на первый слог, а вот по-русски прижился вариант с ударением на второй слог: джейсо́н) или .xml. 6.1.1 Превращение JSON в список и обратно Самое важное, что нужно знать, про .json, это то, что там могут хранится: пары ключ и значение, заключенные в фигурные скобки {\"ключ\":\"значение\"} упорядочные множества значений, заключенные в квадратные скобки [\"значение_1\",\"значение_2\",...] некоторые другие типы данных Чтение и запись .json файлов осуществляется при помощи пакета jsonlite (не входит в tidyverse). Для примера скачаем датасет 30 героев Игры престолов, который Дж. Р. Р. Мартин достал с ресурса An API of Ice And Fire. got_chars &lt;- jsonlite::read_json(&quot;https://raw.githubusercontent.com/agricolamz/DS_for_DH/master/data/got_chars.json&quot;) got_chars[1] ## [[1]] ## [[1]]$url ## [1] &quot;https://www.anapioficeandfire.com/api/characters/1022&quot; ## ## [[1]]$id ## [1] 1022 ## ## [[1]]$name ## [1] &quot;Theon Greyjoy&quot; ## ## [[1]]$gender ## [1] &quot;Male&quot; ## ## [[1]]$culture ## [1] &quot;Ironborn&quot; ## ## [[1]]$born ## [1] &quot;In 278 AC or 279 AC, at Pyke&quot; ## ## [[1]]$died ## [1] &quot;&quot; ## ## [[1]]$alive ## [1] TRUE ## ## [[1]]$titles ## [[1]]$titles[[1]] ## [1] &quot;Prince of Winterfell&quot; ## ## [[1]]$titles[[2]] ## [1] &quot;Captain of Sea Bitch&quot; ## ## [[1]]$titles[[3]] ## [1] &quot;Lord of the Iron Islands (by law of the green lands)&quot; ## ## ## [[1]]$aliases ## [[1]]$aliases[[1]] ## [1] &quot;Prince of Fools&quot; ## ## [[1]]$aliases[[2]] ## [1] &quot;Theon Turncloak&quot; ## ## [[1]]$aliases[[3]] ## [1] &quot;Reek&quot; ## ## [[1]]$aliases[[4]] ## [1] &quot;Theon Kinslayer&quot; ## ## ## [[1]]$father ## [1] &quot;&quot; ## ## [[1]]$mother ## [1] &quot;&quot; ## ## [[1]]$spouse ## [1] &quot;&quot; ## ## [[1]]$allegiances ## [1] &quot;House Greyjoy of Pyke&quot; ## ## [[1]]$books ## [[1]]$books[[1]] ## [1] &quot;A Game of Thrones&quot; ## ## [[1]]$books[[2]] ## [1] &quot;A Storm of Swords&quot; ## ## [[1]]$books[[3]] ## [1] &quot;A Feast for Crows&quot; ## ## ## [[1]]$povBooks ## [[1]]$povBooks[[1]] ## [1] &quot;A Clash of Kings&quot; ## ## [[1]]$povBooks[[2]] ## [1] &quot;A Dance with Dragons&quot; ## ## ## [[1]]$tvSeries ## [[1]]$tvSeries[[1]] ## [1] &quot;Season 1&quot; ## ## [[1]]$tvSeries[[2]] ## [1] &quot;Season 2&quot; ## ## [[1]]$tvSeries[[3]] ## [1] &quot;Season 3&quot; ## ## [[1]]$tvSeries[[4]] ## [1] &quot;Season 4&quot; ## ## [[1]]$tvSeries[[5]] ## [1] &quot;Season 5&quot; ## ## [[1]]$tvSeries[[6]] ## [1] &quot;Season 6&quot; ## ## ## [[1]]$playedBy ## [1] &quot;Alfie Allen&quot; Так как jsonlite конфликтует в одной функции с tidyverse, я не загружаю библиотеку полностью при помощи команды library(jsonlite), а обращаюсь к функциям пакета при помощи выражения jsonlite::...(). Пакет jsonlite позволяет записывать .json файлы при помощи функции write_json(): jsonlite::write_json(got_chars, &quot;got_chars.json&quot;, auto_unbox = TRUE) # аргумент auto_unbox позволяет сохранять структуру, которую мы видим в R 6.1.2 Превращение .xml в список и обратно Самое важное, что нужно знать, про .xml, это то, что этот формат представляет собой набор некоторых сущностей, которые кодируются при помощи двух тегов: открывающего &lt;...&gt; и закрывающего &lt;/...&gt;. &lt;blablabla&gt;Hello, world!&lt;/blablabla&gt; Набор сущностей может быть любым, а главное, нет фиксированного набора сущностей — пользователи могут сочинять свои стандарты, используя .xml. Кроме того, у сущностей, могут быть свои атрибуты, которые перечисляются в открывающем теге: &lt;ingredient amount=&quot;3&quot; unit=&quot;стакан&quot;&gt;Мука&lt;/ingredient&gt; &lt;ingredient amount=&quot;0.25&quot; unit=&quot;грамм&quot;&gt;Дрожжи&lt;/ingredient&gt; &lt;ingredient amount=&quot;1.5&quot; unit=&quot;стакан&quot;&gt;Тёплая вода&lt;/ingredient&gt; Чтение и запись .xml файла осущетсвляется при помощи функций read_xml() и write_xml() из пакета xml2: library(&quot;xml2&quot;) xml_example &lt;- read_xml(&#39;&lt;body&gt; &lt;ingredient amount=&quot;3&quot; unit=&quot;стакан&quot;&gt;Мука&lt;/ingredient&gt; &lt;ingredient amount=&quot;0.25&quot; unit=&quot;грамм&quot;&gt;Дрожжи&lt;/ingredient&gt; &lt;ingredient amount=&quot;1.5&quot; unit=&quot;стакан&quot;&gt;Тёплая вода&lt;/ingredient&gt; &lt;/body&gt;&#39;) xml_example ## {xml_document} ## &lt;body&gt; ## [1] &lt;ingredient amount=&quot;3&quot; unit=&quot;стакан&quot;&gt;Мука&lt;/ingredient&gt; ## [2] &lt;ingredient amount=&quot;0.25&quot; unit=&quot;грамм&quot;&gt;Дрожжи&lt;/ingredient&gt; ## [3] &lt;ingredient amount=&quot;1.5&quot; unit=&quot;стакан&quot;&gt;Тёплая вода&lt;/ingredient&gt; write_xml(xml_example, &quot;path/to/the/file.xml&quot;) Чтобы избавиться от тегов и превратить прочитанное в список используется команда xml_example &lt;- as_list(xml_example) xml_example ## $body ## $body$ingredient ## $body$ingredient[[1]] ## [1] &quot;Мука&quot; ## ## attr(,&quot;amount&quot;) ## [1] &quot;3&quot; ## attr(,&quot;unit&quot;) ## [1] &quot;стакан&quot; ## ## $body$ingredient ## $body$ingredient[[1]] ## [1] &quot;Дрожжи&quot; ## ## attr(,&quot;amount&quot;) ## [1] &quot;0.25&quot; ## attr(,&quot;unit&quot;) ## [1] &quot;грамм&quot; ## ## $body$ingredient ## $body$ingredient[[1]] ## [1] &quot;Тёплая вода&quot; ## ## attr(,&quot;amount&quot;) ## [1] &quot;1.5&quot; ## attr(,&quot;unit&quot;) ## [1] &quot;стакан&quot; Теперь полученная переменная уже является списком: xml_example$body[[2]] ## [[1]] ## [1] &quot;Дрожжи&quot; ## ## attr(,&quot;amount&quot;) ## [1] &quot;0.25&quot; ## attr(,&quot;unit&quot;) ## [1] &quot;грамм&quot; Здесь также нужно отметить, некоторое важное отличие .xml и .json, которое видно в рассматриваемом примере: атрибуты, которые прописываются в открывающем теге, передаются и в список в R. Функция attributes() возвращает список атрибутов и их значений: xml_example$body[[2]] %&gt;% attributes() ## $amount ## [1] &quot;0.25&quot; ## ## $unit ## [1] &quot;грамм&quot; Если нужен конкретный аттрибут, то нужно использовать функцию attr(): xml_example$body[[2]] %&gt;% attr(&quot;amount&quot;) ## [1] &quot;0.25&quot; Также на данном примере видна самая большая проблема при работе с .xml: в нашем списке есть три узла под названием ingredient, так что хоть эти узлы и имеют имя, к ним все равно нужно обращаться по индексу. 6.1.3 Просмотр списков в R Просмоторщик списков встроен в RStudio. Его можно увидеть, если ткнуть в объект в R или написать команду View(got_chars). Альтернативой может стать функция jsonedit() из пакета listviewer. Кроме того, что-то можно попробовать выяснить, используя функцию str(). str(got_chars[1]) ## List of 1 ## $ :List of 18 ## ..$ url : chr &quot;https://www.anapioficeandfire.com/api/characters/1022&quot; ## ..$ id : int 1022 ## ..$ name : chr &quot;Theon Greyjoy&quot; ## ..$ gender : chr &quot;Male&quot; ## ..$ culture : chr &quot;Ironborn&quot; ## ..$ born : chr &quot;In 278 AC or 279 AC, at Pyke&quot; ## ..$ died : chr &quot;&quot; ## ..$ alive : logi TRUE ## ..$ titles :List of 3 ## .. ..$ : chr &quot;Prince of Winterfell&quot; ## .. ..$ : chr &quot;Captain of Sea Bitch&quot; ## .. ..$ : chr &quot;Lord of the Iron Islands (by law of the green lands)&quot; ## ..$ aliases :List of 4 ## .. ..$ : chr &quot;Prince of Fools&quot; ## .. ..$ : chr &quot;Theon Turncloak&quot; ## .. ..$ : chr &quot;Reek&quot; ## .. ..$ : chr &quot;Theon Kinslayer&quot; ## ..$ father : chr &quot;&quot; ## ..$ mother : chr &quot;&quot; ## ..$ spouse : chr &quot;&quot; ## ..$ allegiances: chr &quot;House Greyjoy of Pyke&quot; ## ..$ books :List of 3 ## .. ..$ : chr &quot;A Game of Thrones&quot; ## .. ..$ : chr &quot;A Storm of Swords&quot; ## .. ..$ : chr &quot;A Feast for Crows&quot; ## ..$ povBooks :List of 2 ## .. ..$ : chr &quot;A Clash of Kings&quot; ## .. ..$ : chr &quot;A Dance with Dragons&quot; ## ..$ tvSeries :List of 6 ## .. ..$ : chr &quot;Season 1&quot; ## .. ..$ : chr &quot;Season 2&quot; ## .. ..$ : chr &quot;Season 3&quot; ## .. ..$ : chr &quot;Season 4&quot; ## .. ..$ : chr &quot;Season 5&quot; ## .. ..$ : chr &quot;Season 6&quot; ## ..$ playedBy : chr &quot;Alfie Allen&quot; str(got_chars[1], max.level = 2) ## List of 1 ## $ :List of 18 ## ..$ url : chr &quot;https://www.anapioficeandfire.com/api/characters/1022&quot; ## ..$ id : int 1022 ## ..$ name : chr &quot;Theon Greyjoy&quot; ## ..$ gender : chr &quot;Male&quot; ## ..$ culture : chr &quot;Ironborn&quot; ## ..$ born : chr &quot;In 278 AC or 279 AC, at Pyke&quot; ## ..$ died : chr &quot;&quot; ## ..$ alive : logi TRUE ## ..$ titles :List of 3 ## ..$ aliases :List of 4 ## ..$ father : chr &quot;&quot; ## ..$ mother : chr &quot;&quot; ## ..$ spouse : chr &quot;&quot; ## ..$ allegiances: chr &quot;House Greyjoy of Pyke&quot; ## ..$ books :List of 3 ## ..$ povBooks :List of 2 ## ..$ tvSeries :List of 6 ## ..$ playedBy : chr &quot;Alfie Allen&quot; str(xml_example) ## List of 1 ## $ body:List of 3 ## ..$ ingredient:List of 1 ## .. ..$ : chr &quot;Мука&quot; ## .. ..- attr(*, &quot;amount&quot;)= chr &quot;3&quot; ## .. ..- attr(*, &quot;unit&quot;)= chr &quot;стакан&quot; ## ..$ ingredient:List of 1 ## .. ..$ : chr &quot;Дрожжи&quot; ## .. ..- attr(*, &quot;amount&quot;)= chr &quot;0.25&quot; ## .. ..- attr(*, &quot;unit&quot;)= chr &quot;грамм&quot; ## ..$ ingredient:List of 1 ## .. ..$ : chr &quot;Тёплая вода&quot; ## .. ..- attr(*, &quot;amount&quot;)= chr &quot;1.5&quot; ## .. ..- attr(*, &quot;unit&quot;)= chr &quot;стакан&quot; 6.2 Пакет purrr В tidyverse встроен пакет purrr, который среди прочего позволяет работать со списками. Существует cheat sheet по purrr. 6.2.1 Функция map() и map...() Можно выводить значения в списке на основе имени: got_chars %&gt;% map(&quot;name&quot;) ## [[1]] ## [1] &quot;Theon Greyjoy&quot; ## ## [[2]] ## [1] &quot;Tyrion Lannister&quot; ## ## [[3]] ## [1] &quot;Victarion Greyjoy&quot; ## ## [[4]] ## [1] &quot;Will&quot; ## ## [[5]] ## [1] &quot;Areo Hotah&quot; ## ## [[6]] ## [1] &quot;Chett&quot; ## ## [[7]] ## [1] &quot;Cressen&quot; ## ## [[8]] ## [1] &quot;Arianne Martell&quot; ## ## [[9]] ## [1] &quot;Daenerys Targaryen&quot; ## ## [[10]] ## [1] &quot;Davos Seaworth&quot; ## ## [[11]] ## [1] &quot;Arya Stark&quot; ## ## [[12]] ## [1] &quot;Arys Oakheart&quot; ## ## [[13]] ## [1] &quot;Asha Greyjoy&quot; ## ## [[14]] ## [1] &quot;Barristan Selmy&quot; ## ## [[15]] ## [1] &quot;Varamyr&quot; ## ## [[16]] ## [1] &quot;Brandon Stark&quot; ## ## [[17]] ## [1] &quot;Brienne of Tarth&quot; ## ## [[18]] ## [1] &quot;Catelyn Stark&quot; ## ## [[19]] ## [1] &quot;Cersei Lannister&quot; ## ## [[20]] ## [1] &quot;Eddard Stark&quot; ## ## [[21]] ## [1] &quot;Jaime Lannister&quot; ## ## [[22]] ## [1] &quot;Jon Connington&quot; ## ## [[23]] ## [1] &quot;Jon Snow&quot; ## ## [[24]] ## [1] &quot;Aeron Greyjoy&quot; ## ## [[25]] ## [1] &quot;Kevan Lannister&quot; ## ## [[26]] ## [1] &quot;Melisandre&quot; ## ## [[27]] ## [1] &quot;Merrett Frey&quot; ## ## [[28]] ## [1] &quot;Quentyn Martell&quot; ## ## [[29]] ## [1] &quot;Samwell Tarly&quot; ## ## [[30]] ## [1] &quot;Sansa Stark&quot; Можно выводить значения в списке на основе индекса: got_chars %&gt;% map(3) ## [[1]] ## [1] &quot;Theon Greyjoy&quot; ## ## [[2]] ## [1] &quot;Tyrion Lannister&quot; ## ## [[3]] ## [1] &quot;Victarion Greyjoy&quot; ## ## [[4]] ## [1] &quot;Will&quot; ## ## [[5]] ## [1] &quot;Areo Hotah&quot; ## ## [[6]] ## [1] &quot;Chett&quot; ## ## [[7]] ## [1] &quot;Cressen&quot; ## ## [[8]] ## [1] &quot;Arianne Martell&quot; ## ## [[9]] ## [1] &quot;Daenerys Targaryen&quot; ## ## [[10]] ## [1] &quot;Davos Seaworth&quot; ## ## [[11]] ## [1] &quot;Arya Stark&quot; ## ## [[12]] ## [1] &quot;Arys Oakheart&quot; ## ## [[13]] ## [1] &quot;Asha Greyjoy&quot; ## ## [[14]] ## [1] &quot;Barristan Selmy&quot; ## ## [[15]] ## [1] &quot;Varamyr&quot; ## ## [[16]] ## [1] &quot;Brandon Stark&quot; ## ## [[17]] ## [1] &quot;Brienne of Tarth&quot; ## ## [[18]] ## [1] &quot;Catelyn Stark&quot; ## ## [[19]] ## [1] &quot;Cersei Lannister&quot; ## ## [[20]] ## [1] &quot;Eddard Stark&quot; ## ## [[21]] ## [1] &quot;Jaime Lannister&quot; ## ## [[22]] ## [1] &quot;Jon Connington&quot; ## ## [[23]] ## [1] &quot;Jon Snow&quot; ## ## [[24]] ## [1] &quot;Aeron Greyjoy&quot; ## ## [[25]] ## [1] &quot;Kevan Lannister&quot; ## ## [[26]] ## [1] &quot;Melisandre&quot; ## ## [[27]] ## [1] &quot;Merrett Frey&quot; ## ## [[28]] ## [1] &quot;Quentyn Martell&quot; ## ## [[29]] ## [1] &quot;Samwell Tarly&quot; ## ## [[30]] ## [1] &quot;Sansa Stark&quot; Достаточно полезно знать о функции unlist(), которая “убивает” все сложную структуру: got_chars %&gt;% map(&quot;name&quot;) %&gt;% unlist() ## [1] &quot;Theon Greyjoy&quot; &quot;Tyrion Lannister&quot; &quot;Victarion Greyjoy&quot; ## [4] &quot;Will&quot; &quot;Areo Hotah&quot; &quot;Chett&quot; ## [7] &quot;Cressen&quot; &quot;Arianne Martell&quot; &quot;Daenerys Targaryen&quot; ## [10] &quot;Davos Seaworth&quot; &quot;Arya Stark&quot; &quot;Arys Oakheart&quot; ## [13] &quot;Asha Greyjoy&quot; &quot;Barristan Selmy&quot; &quot;Varamyr&quot; ## [16] &quot;Brandon Stark&quot; &quot;Brienne of Tarth&quot; &quot;Catelyn Stark&quot; ## [19] &quot;Cersei Lannister&quot; &quot;Eddard Stark&quot; &quot;Jaime Lannister&quot; ## [22] &quot;Jon Connington&quot; &quot;Jon Snow&quot; &quot;Aeron Greyjoy&quot; ## [25] &quot;Kevan Lannister&quot; &quot;Melisandre&quot; &quot;Merrett Frey&quot; ## [28] &quot;Quentyn Martell&quot; &quot;Samwell Tarly&quot; &quot;Sansa Stark&quot; Для этого есть и отдельные функции, которые позволяют превратить все в вектор заданного типа: got_chars %&gt;% map_chr(&quot;name&quot;) ## [1] &quot;Theon Greyjoy&quot; &quot;Tyrion Lannister&quot; &quot;Victarion Greyjoy&quot; ## [4] &quot;Will&quot; &quot;Areo Hotah&quot; &quot;Chett&quot; ## [7] &quot;Cressen&quot; &quot;Arianne Martell&quot; &quot;Daenerys Targaryen&quot; ## [10] &quot;Davos Seaworth&quot; &quot;Arya Stark&quot; &quot;Arys Oakheart&quot; ## [13] &quot;Asha Greyjoy&quot; &quot;Barristan Selmy&quot; &quot;Varamyr&quot; ## [16] &quot;Brandon Stark&quot; &quot;Brienne of Tarth&quot; &quot;Catelyn Stark&quot; ## [19] &quot;Cersei Lannister&quot; &quot;Eddard Stark&quot; &quot;Jaime Lannister&quot; ## [22] &quot;Jon Connington&quot; &quot;Jon Snow&quot; &quot;Aeron Greyjoy&quot; ## [25] &quot;Kevan Lannister&quot; &quot;Melisandre&quot; &quot;Merrett Frey&quot; ## [28] &quot;Quentyn Martell&quot; &quot;Samwell Tarly&quot; &quot;Sansa Stark&quot; got_chars %&gt;% map_int(&quot;id&quot;) ## [1] 1022 1052 1074 1109 1166 1267 1295 130 1303 1319 148 149 150 168 2066 ## [16] 208 216 232 238 339 529 576 583 60 605 743 751 844 954 957 got_chars %&gt;% map_lgl(&quot;alive&quot;) ## [1] TRUE TRUE TRUE FALSE TRUE FALSE FALSE TRUE TRUE TRUE TRUE FALSE ## [13] TRUE TRUE FALSE TRUE TRUE FALSE TRUE FALSE TRUE TRUE TRUE TRUE ## [25] FALSE TRUE FALSE FALSE TRUE TRUE Можно даже создать новый датафрейм: got_chars %&gt;% tibble(name = map_chr(., &quot;name&quot;), # точка обозначает, в какой аргумент должно все пайпиться id = map_dbl(., &quot;id&quot;), alive = map_lgl(., &quot;alive&quot;)) У этого метода есть один недостаток: если среди значений есть значени null, то функции map_...() их пропускают. В результате получаются векторы разной длины и датафрейм не получается. Чтобы избежать этой проблемы все функции map_...() имеют аргумент .null, в который можно записать значение, которое появится в пустых ячейках, например, .null = NA. Также существует способ создание датафреймов на основе вектора значений при помощи функции enframe(): got_chars %&gt;% map_chr(&quot;name&quot;) %&gt;% enframe() Скачайте частотный словарь русского языка [Шаров, Ляшевская 2011], разбейте столбец lemma на буквы при помощи функции str_split(dict$lemma, \"\"), а на основе полученного списка постройте график, на котором изображено, сколько раз встретилась какая буква: Также можно использовать комбинацию функции map() и attr_getter() чтобы доставать все значения аттрибутов: xml_example$body %&gt;% map(attr_getter(&quot;amount&quot;)) ## $ingredient ## [1] &quot;3&quot; ## ## $ingredient ## [1] &quot;0.25&quot; ## ## $ingredient ## [1] &quot;1.5&quot; 6.2.2 Фильтрация списков Если в списке есть логические выражения, их можно использовать как фильтры. Например, вот так мы оставим только живых героев: got_chars %&gt;% keep(&quot;alive&quot;) %&gt;% map_chr(&quot;name&quot;) ## [1] &quot;Theon Greyjoy&quot; &quot;Tyrion Lannister&quot; &quot;Victarion Greyjoy&quot; ## [4] &quot;Areo Hotah&quot; &quot;Arianne Martell&quot; &quot;Daenerys Targaryen&quot; ## [7] &quot;Davos Seaworth&quot; &quot;Arya Stark&quot; &quot;Asha Greyjoy&quot; ## [10] &quot;Barristan Selmy&quot; &quot;Brandon Stark&quot; &quot;Brienne of Tarth&quot; ## [13] &quot;Cersei Lannister&quot; &quot;Jaime Lannister&quot; &quot;Jon Connington&quot; ## [16] &quot;Jon Snow&quot; &quot;Aeron Greyjoy&quot; &quot;Melisandre&quot; ## [19] &quot;Samwell Tarly&quot; &quot;Sansa Stark&quot; А так – только мертвых: got_chars %&gt;% discard(&quot;alive&quot;) %&gt;% map_chr(&quot;name&quot;) ## [1] &quot;Will&quot; &quot;Chett&quot; &quot;Cressen&quot; &quot;Arys Oakheart&quot; ## [5] &quot;Varamyr&quot; &quot;Catelyn Stark&quot; &quot;Eddard Stark&quot; &quot;Kevan Lannister&quot; ## [9] &quot;Merrett Frey&quot; &quot;Quentyn Martell&quot; Также есть особый фильтр head_while() и tail_while(), который выделяет единицы (с начала и конца) до первого FALSE. got_chars %&gt;% head_while(&quot;alive&quot;) %&gt;% map_chr(&quot;name&quot;) ## [1] &quot;Theon Greyjoy&quot; &quot;Tyrion Lannister&quot; &quot;Victarion Greyjoy&quot; got_chars %&gt;% tail_while(&quot;alive&quot;) %&gt;% map_chr(&quot;name&quot;) ## [1] &quot;Samwell Tarly&quot; &quot;Sansa Stark&quot; Если все еще не понятно, взгляните на нашу таблицу: got_chars %&gt;% tibble(name = map_chr(., &quot;name&quot;), # точка обозначает, в какой аргумент должно все пайпиться alive = map_lgl(., &quot;alive&quot;)) 6.2.3 Операции со списками Рассмотрим простой пример: my_l &lt;- list(a = 1:3, b = c(&quot;a&quot;, &quot;b&quot;), c = list(&quot;z&quot;, c(8, 9))) my_l ## $a ## [1] 1 2 3 ## ## $b ## [1] &quot;a&quot; &quot;b&quot; ## ## $c ## $c[[1]] ## [1] &quot;z&quot; ## ## $c[[2]] ## [1] 8 9 Как уже говорилось выше, функция unlist() линеаризует списки, превращая их в векторы: my_l %&gt;% unlist() ## a1 a2 a3 b1 b2 c1 c2 c3 ## &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;a&quot; &quot;b&quot; &quot;z&quot; &quot;8&quot; &quot;9&quot; Получился поименнованный вектор, если этого недостаточно, можно уничтожить и имена при помощи функции unname(): my_l %&gt;% unlist() %&gt;% unname() ## [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;a&quot; &quot;b&quot; &quot;z&quot; &quot;8&quot; &quot;9&quot; Функция flatten позволяет уничтожить лишь один, верхний,, уровень иерархии: my_l %&gt;% flatten() ## [[1]] ## [1] 1 ## ## [[2]] ## [1] 2 ## ## [[3]] ## [1] 3 ## ## [[4]] ## [1] &quot;a&quot; ## ## [[5]] ## [1] &quot;b&quot; ## ## [[6]] ## [1] &quot;z&quot; ## ## [[7]] ## [1] 8 9 Как видно из этого примера, первый элемент списка my_l превратился в три первых элемента списка, а вот подсписок c = list(\"z\", c(8, 9)) превратился в элемент z и вектор c(8, 9). Существуют также функции append() и prepend(), которые позволяют добавлять новый посписок после (или до) старого: list(c(1, 2), c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)) %&gt;% append(list(new = c(TRUE, FALSE))) ## [[1]] ## [1] 1 2 ## ## [[2]] ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; ## ## $new ## [1] TRUE FALSE list(c(1, 2), c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)) %&gt;% prepend(list(new = c(TRUE, FALSE))) ## $new ## [1] TRUE FALSE ## ## [[2]] ## [1] 1 2 ## ## [[3]] ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; Существует также функции cross() и cross2(), которые позволяют получить уникальные комбинации объектов из двух списков: list(c(&quot;a&quot;, &quot;b&quot;), 1:3) %&gt;% cross() %&gt;% str() ## List of 6 ## $ :List of 2 ## ..$ : chr &quot;a&quot; ## ..$ : int 1 ## $ :List of 2 ## ..$ : chr &quot;b&quot; ## ..$ : int 1 ## $ :List of 2 ## ..$ : chr &quot;a&quot; ## ..$ : int 2 ## $ :List of 2 ## ..$ : chr &quot;b&quot; ## ..$ : int 2 ## $ :List of 2 ## ..$ : chr &quot;a&quot; ## ..$ : int 3 ## $ :List of 2 ## ..$ : chr &quot;b&quot; ## ..$ : int 3 list(&quot;a&quot;, &quot;b&quot;) %&gt;% cross2(1:3) %&gt;% str() ## List of 6 ## $ :List of 2 ## ..$ : chr &quot;a&quot; ## ..$ : int 1 ## $ :List of 2 ## ..$ : chr &quot;b&quot; ## ..$ : int 1 ## $ :List of 2 ## ..$ : chr &quot;a&quot; ## ..$ : int 2 ## $ :List of 2 ## ..$ : chr &quot;b&quot; ## ..$ : int 2 ## $ :List of 2 ## ..$ : chr &quot;a&quot; ## ..$ : int 3 ## $ :List of 2 ## ..$ : chr &quot;b&quot; ## ..$ : int 3 Скачайте пьесу “Ревизор”, размеченную в TEI формате и постройте представленный ниже график, на котором изображено количество реплик для каждого персонажа. Превратив данные в список, лучше начинать работать с переменной revizor$TEI$text$body: "],
["data-presentation.html", "7 Представление данных: rmarkdown 7.1 rmarkdown 7.2 Бывают и другие способы представления данных", " 7 Представление данных: rmarkdown Достаточно важной частью работы с данными является их представление. Мы рассмотрим наиболее распространенный варианты: rmarkdown, flexdashboard и shiny. Смотрите книжку (Xie, Allaire, and Grolemund 2019)(https://bookdown.org/yihui/rmarkdown/) или cheatsheet. 7.1 rmarkdown rmarkdown – это пакет, который позволяет соединять R команды и их исполнения в один документ. В результате можно комбинировать текст и исполняемый код, что в свою очередь позволяет делать: * докумунты в формате .html, .pdf (используя , мы почти не будем это обсуждать), .docx * презентации в формате .html, .pdf (используя пакет beamer) .pptx-презентации * набор связанных .html документов (полноценный сайт или книга) 7.1.1 Установка Как и все пакеты rmarkdown можно установить из CRAN install.packages(&quot;rmarkdown&quot;) 7.1.2 Составляющие rmarkdown-документа yaml шапка (факультативна) обычный текст с markdown форматированием (расширенный при помощи Pandoc) блоки кода (не обязательно на языке R), оформленные с двух сторон тройным бэктиком ``` (у меня на клавиатуре этот знак на букве ё). 7.1.3 Пример rmarkdown-документа Создайте файл .Rmd в какой-нибудь папке (в RStudio, это можно сделать File &gt; New file &gt; R Markdown). Скомпелировать файл можно командой: rmarkdown::render(&quot;ваш_файл.Rmd&quot;) или кнопкой . Вот пример кода: --- output: html_document --- ## Данные В документе можно вставлять R код ```{r} summary(iris) ``` ## График И строить графики ```{r} library(tidyverse) iris %&gt;% ggplot(aes(Sepal.Length, Sepal.Width))+ geom_point() ``` Результат. Создайте и скомпелируйте свой rmarkdown-документ с заголовком, текстом и кодом. 7.1.4 Markdown Универсальны язык разметки, работает во многих современных он-лайн системах создания текста. 7.1.4.1 Заголовки ## Заголовок уровня 2 #### Заголовок уровня 4 7.1.4.2 Форматирование _италик_ или *другой италик* __жирный__ или **другой жирный** ~~зачеркивание~~ италик или другой италик жирный или другой жирный зачеркивание 7.1.4.3 Списки * кролик * заяц * заяц серый 1. машины 1. автобус 2. самолеты + можно еще ставить плюс - и минус кролик заяц заяц серый машины автобус самолеты можно еще ставить плюс и минус 7.1.4.4 Ссылки и картинки [Ссылка 1](https://agricolamz.github.io/2018_ANDAN_course_winter/2_ex.html) &lt;https://agricolamz.github.io/2018_ANDAN_course_winter/2_ex.html&gt; [Можно вставить ссылку потом, а пока отсавить метку][1] Или даже просто голую [метку]. ![](https://raw.githubusercontent.com/agricolamz/2018_ANDAN_course_winter/master/rmarkdown.png) Опять же можно вставить только метку ![][2] [1]: https://agricolamz.github.io/2018_ANDAN_course_winter/2_ex.html [метку]: https://agricolamz.github.io/2018_ANDAN_course_winter/2_ex.html [2]: https://raw.githubusercontent.com/agricolamz/2018_ANDAN_course_winter/master/rmarkdown.png Ссылка 1 https://agricolamz.github.io/2018_ANDAN_course_winter/2_ex.html Можно вставить ссылку потом, а пока отсавить метку Или даже просто голую метку. Опять же можно вставить только метку 7.1.4.5 Код Код нужно оформалять вот так `rmarkdown::render()` Код нужно оформалять вот так rmarkdown::render() ```{python} friends = [&#39;john&#39;, &#39;pat&#39;, &#39;gary&#39;, &#39;michael&#39;] for i, name in enumerate(friends): print &quot;iteration {iteration} is {name}&quot;.format(iteration=i, name=name) ``` collection = [&#39;hey&#39;, 5, &#39;d&#39;] for x in collection: print(x) hey 5 d Если хочется использовать результат работы кода в тексте, нужно в начале поставить язык, который будет исполнять код, например, в Фигурные скобки не обязательны, но тогда RStudio подсветит. 7.1.4.6 Цитаты &gt; Цитаты нужно офрмлять так. &gt; Это попадет в тот же фрагмент. &gt; А вот тут произошел разрыв. Кстати, здесь тоже можно использовать *markdown*. Цитаты нужно офрмлять так. Это попадет в тот же фрагмент. А вот тут произошел разрыв. Кстати, здесь тоже можно использовать markdown. 7.1.4.7 Разрыв страницы *** 7.1.4.8 HTML &lt;dl&gt; &lt;dt&gt;Чистый HTML&lt;/dt&gt; &lt;dd&gt;Еще можно писать в HTML.&lt;/dd&gt; &lt;dt&gt;и Markdown в HTML &lt;/dt&gt; &lt;dd&gt; даже работает **правильно**. Но можно использовать и &lt;em&gt;теги&lt;/em&gt;.&lt;/dd&gt; &lt;/dl&gt; Чистый HTML Еще можно писать в HTML. и Markdown в HTML даже работает правильно. Но можно использовать и теги. 7.1.4.9 Таблицы Еще есть целая наука как делать таблицы в Markdown, но я предпочитаю использовать он-лайн генератор. 7.1.5 Pandoc Pandoc это программа, созданная Дж. МакФарлэйном (J. MacFarlane), которая позволяет переходить из разных текстовых форматов в другие, а также смешивать их. Я покожу лишь несколько полезных расширений. 7.1.5.1 Верхние и нижние индексы 2^10^ C~n~^k^ 210 Cnk 7.1.5.2 Нумерованные примеры (@) Славный пример номер раз. (@) Славный пример номер два. (@three) Славный пример номер три, у которого есть *имя*. Я могу сослаться на пример (@three)! Славный пример номер раз. Славный пример номер два. Славный пример номер три, у которого есть имя. Я могу сослаться на пример (3)! 7.1.5.3 Сноски Вот и сноска[^1] [^1]: Сноска, сноска, сноска. Вот и сноска2 7.1.5.4 Математика: \\(\\LaTeX\\) $\\LaTeX$ код может быть в тексте $\\frac{\\pi}{\\sum{n+1}}$ или отдельной строчкой: $$\\frac{\\pi}{\\sum{n+1}}$$ \\(\\LaTeX\\) код может быть в тексте \\(\\frac{\\pi}{\\sum{n+1}}\\) или отдельной строчкой: \\[\\frac{\\pi}{\\sum{n+1}}\\] 7.1.6 Code chunks Фрагменты кода имеют свои наборы свойств, который можно записывать в фигурных скобках. 7.1.6.1 Язык программирования ```{r} summary(cars) ``` ```{python} x = &quot;my string&quot; print(x.split(&quot; &quot;)) ``` summary(cars) speed dist Min. : 4.0 Min. : 2.00 1st Qu.:12.0 1st Qu.: 26.00 Median :15.0 Median : 36.00 Mean :15.4 Mean : 42.98 3rd Qu.:19.0 3rd Qu.: 56.00 Max. :25.0 Max. :120.00 x = &quot;my string&quot; print(x.split(&quot; &quot;)) [&#39;my&#39;, &#39;string&#39;] 7.1.6.2 Появление и исполнение кода И код, и результат ```{r} plot(mtcars$mpg) ``` Только результат ```{r, echo = FALSE} plot(mtcars$mpg) ``` Только код ```{r, eval = FALSE} plot(mtcars$mpg) ``` Исполняется, но не показывается ни код, ни результат ```{r, include = FALSE} a &lt;- mtcars$mpg ``` Обратимся к переменной, созданной в фрагменте с аргументом `include = FALSE` ```{r} a ``` 7.1.6.3 Другие полезные аргументы Существует достаточно много аргументов, которые можно перечислить в фигурных скобках в фрагменте кода, вот некоторые из них: error: показывать ли ошибки. warning: показывать ли предупреждения. message: показывать ли сообщения (например, при подключении пакетов). comment: по умолчанию, результат работы кода предваряется знаком ##, используйте NA, чтобы их не было, или любую другую строку. cache: сохранить ли результат работы фрагмента кода. Очень полезно, если происходят какие-то операции, занимающая много времени. Сохранив результат, не нужно будет тратить время, на пересчет, при каждой новой компиляции. fig.width, fig.height (по умолчанию, 7) Все эти аргументы можно перечислить в функции knitr::opts_chunk$set(...): 7.1.6.4 Pets or livestock? В RMarkdown каждому фрагменту кода можно дать имя (но избегайте пробелов и точек): ```{r my_beautiful_graph, eval = FALSE} library(tidyverse) diamonds %&gt;% count(carat, color) %&gt;% ggplot(aes(carat, n, color = color))+ geom_point() ``` Maëlle Salmon написал отличный пост, почему полезно именовать фрагменты кода: проще ориентироваться код более читаемый ошибки при компеляции показывают имя, а не номер если фрагмент кэшировался, то добавление одного фрагменты перед ним, не заставит все пересчитываться в blogdown можно ссылаться 7.1.7 YAML шапка Факультативная YAML шапка обычно содержит метаданные документа, и аргументы, необходимые для работы некоторых дополнений. --- title: &quot;Мой RMarkdown&quot; author: Славный Автор date: 20 ноября 2019 --- 7.1.7.1 Тип получившегося файла output: html_document (по умолчанию) output: word_document output: pdf_document (но нужно договориться с \\(\\LaTeX\\)ом на вашем компьютере) output: ioslides_presentation output: slidy_presentation output: slidy_presentation output: beamer_presentation и др. 7.1.7.2 Библиография Существует несколько сопособов вставлять библиографию в RMarkdown. Я раскажу, как использовать пакет Bibtex (как видно из названия, сделанный для \\(\\LaTeX\\)). Для начала нужно создать файл с раширением .bib, в который записать все источники, которые будут использоваться (библиографию в формате BibTeX выдает, например, GoogleScholar): @book{ladefoged96, title={The sounds of the world&#39;s languages}, author={Ladefoged, P. and Maddieson, I.}, year={1996}, publisher={Oxford Publishers} } @article{gordon02, title={A cross-linguistic acoustic study of voiceless fricatives}, author={Gordon, M. and Barthmaier, P. and Sands, K.}, journal={Journal of the International Phonetic Association}, volume={32}, number={2}, pages={141--174}, year={2002}, publisher={Cambridge University Press} } На следующем шаге нужно добавить название файла с раширением .bib в YAML шапку: --- bibliography: bibliography.bib --- После этого, можно использовать сслыки в тексте В своей работе @gordon02 раскрыл... В своей работе Gordon, Barthmaier, and Sands (2002) раскрыл… Об этом можно узнать из [@ladefoged96; @gordon02], но ... Об этом можно узнать из (Ladefoged and Maddieson 1996; Gordon, Barthmaier, and Sands 2002), но … В своей работе [@gordon02] раскрыл... В своей работе (Gordon, Barthmaier, and Sands 2002) раскрыл… Об этом можно узнать из [см. @gordon02, с. 33--35; а также @ladefoged96, гл. 1]... Об этом можно узнать из (см. Gordon, Barthmaier, and Sands 2002, с. 33–35; а также Ladefoged and Maddieson 1996, гл. 1)… Список литературы автоматически появляется в конце. 7.1.7.3 Оглавление и пр. Существует сразу несколько аргументов, отвечающих за оглавление. toc вставлять ли оглавление toc_depth глубина иерархии, которую отражать в огловлении toc_float должно ли оглавление все время следовать за текстом collapsed должно ли оглавление быть все время полностью раскрыто collapsed должно ли оглавление быть все время полностью раскрыто number_sections автоматическая нумерация секций code_folding (hide) — делать ли кнопочку, показывающую/скрывающую весь код theme одна из Bootstrap тем highlight: “default”, “tango”, “pygments”, “kate”, “monochrome”, “espresso”, “zenburn”, “haddock” или “textmate” --- html_document: theme: spacelab highlight: pygments toc: yes toc_position: right toc_depth: 3 toc_float: yes smooth_scroll: false --- 7.1.7.4 Отображение датафреймов df_print: default df_print: kable df_print: tibble df_print: paged --- output: html_document: df_print: paged --- 7.1.8 Где хостить .html? Полученные .html можно разместить в интернете: на каком-то вашем хосте опубликовать на бесплатном хостинке Rpubs опубликовать на гитхабе и включить Github Pages Теперь создайте документ index.Rmd, в котором напишите код на R и на Python, вставьте картинку, сноску, ссылку на литературу, таблицу и оглавление. Скомпелируйте .html документ и опубликуйте его на Github, пройдя по этой ссылке. Cделайте Github Pages и заполните README.md файл. 7.2 Бывают и другие способы представления данных flexdashboard – динамические дэшборды shiny – динамические сайты, которые позволяют взаимодействовать с пользователем posterdown – постеры в RMarkdown pagedown – содержит много шаблонов: для книги, статьи, постера, резюме, визитки… да хоть приглашение на свадьбу можно сделать. Ссылки на литературу "],
["functions.html", "8 Собственные функции и использование их в tidyverse 8.1 Напоминание: логические операции 8.2 Создание собственных функций 8.3 Использование условий в tidyverse 8.4 Reinvent the map function", " 8 Собственные функции и использование их в tidyverse library(tidyverse) 8.1 Напоминание: логические операции Логическое “и”: &amp; TRUE FALSE TRUE TRUE FALSE FALSE FALSE FALSE TRUE &amp; TRUE [1] TRUE TRUE &amp; FALSE [1] FALSE Логическое “или”: | TRUE FALSE TRUE TRUE TRUE FALSE TRUE FALSE TRUE | TRUE [1] TRUE TRUE | FALSE [1] TRUE Логическое “не”: !TRUE [1] FALSE Сравнение: 2 == 2 [1] TRUE 2 == 3 [1] FALSE 2 != 3 [1] TRUE 2 != c(2, 3) [1] FALSE TRUE 8.2 Создание собственных функций Собственные функции можно сделать с помощью функции function(). Ее можно записать в переменную и использовать: n_syllables &lt;- function(x){ str_count(x, &quot;[АОУЁЕЭЯИЮаоуёеэяию]&quot;) } n_syllables(&quot;корова&quot;) [1] 3 n_syllables(&quot;слон&quot;) [1] 1 Вообще, функции немного зависят от загруженных пакетов, так что безопаснее либо эксплицитно включать билиотеку внутри функции, или же говорить, из какой библиотеки функция: n_syllables &lt;- function(x){ stringr::str_count(x, &quot;[АОУЁЕЭЯИЮаоуёеэяию]&quot;) } Функцию можно вызывать внутри себя самой (рекурсия), вот так будет выглядеть функция, которая считает факториал: factorial &lt;- function(x){ if(x-1 &gt; 0){ x*factorial(x-1) } else { 1 } } factorial(3) [1] 6 factorial(4) [1] 24 factorial(8) [1] 40320 factorial(0) [1] 1 Напишите свою функцию, которая будет сравнивать, какое слово длиннее: which_is_longer(&quot;роза&quot;, &quot;цветок&quot;) [1] &quot;цветок&quot; which_is_longer(&quot;олень&quot;, &quot;животное&quot;) [1] &quot;животное&quot; which_is_longer(&quot;воробей&quot;, &quot;птица&quot;) [1] &quot;воробей&quot; 8.3 Использование условий в tidyverse 8.3.1 Условия в строчках Мы уже визуализировали данные из статьи на Pudding про английские пабы. Часть названий этих пабов имеет слово Inn, давайте построим график распределения 30 самых популярных пабов с этим словом в названии и без него. Используя известные нам инструменты можно получить что-то в этом роде: uk_pubs &lt;- read_csv(&quot;https://raw.githubusercontent.com/agricolamz/DS_for_DH/master/data/UK_pubs.csv&quot;) uk_pubs %&gt;% count(pub_name, sort = TRUE) %&gt;% mutate(inn = str_detect(pub_name, &quot;Inn&quot;)) %&gt;% group_by(inn) %&gt;% slice(1:20) %&gt;% ggplot(aes(fct_reorder(pub_name, n), n))+ geom_col()+ coord_flip()+ facet_wrap(~inn, scale = &quot;free&quot;)+ labs(x = &quot;&quot;, y = &quot;&quot;, caption = &quot;https://pudding.cool/2019/10/pubs/&quot;) Получилось в целом то, что мы хотели, однако названия TRUE и FALSE не самые удачные. Исправить положение можно при помощи функции ifelse(), у которой три аргумента: условие, значение, если условие принимает значение TRUE, значение, если условие принимает значение FALSE. ifelse(2+2 == 4, &quot;правильно&quot;, &quot;неправильно&quot;) [1] &quot;правильно&quot; ifelse(2+2 == 5, &quot;правильно&quot;, &quot;неправильно&quot;) [1] &quot;неправильно&quot; Вставим эту функцию в уже написанные код: uk_pubs %&gt;% count(pub_name, sort = TRUE) %&gt;% mutate(inn = ifelse(str_detect(pub_name, &quot;Inn&quot;), &quot;with &#39;inn&#39;&quot;, &quot;without &#39;inn&#39;&quot;)) %&gt;% group_by(inn) %&gt;% slice(1:20) %&gt;% ggplot(aes(fct_reorder(pub_name, n), n))+ geom_col()+ coord_flip()+ facet_wrap(~inn, scale = &quot;free&quot;)+ labs(x = &quot;&quot;, y = &quot;&quot;, caption = &quot;https://pudding.cool/2019/10/pubs/&quot;) А что если условий больше? В целом, выражение ifelse() можно вложить в выражение ifelse(), однако для таких случаев придумали функцию case_when(). У нее немного необычный синтаксис: case_when( условие 1 ~ значение x, условие 2 ~ значение y, ... условие n ~ значение z ) Давайте в том же датасете посмотрим на названия со словами Inn, Hotel, Bar, House и Tavern: uk_pubs %&gt;% count(pub_name, sort = TRUE) %&gt;% mutate(place = case_when( str_detect(pub_name, &quot;Inn&quot;) ~ &quot;inn&quot;, str_detect(pub_name, &quot;Hotel&quot;) ~ &quot;hotel&quot;, str_detect(pub_name, &quot;Bar&quot;) ~ &quot;bar&quot;, str_detect(pub_name, &quot;House&quot;) ~ &quot;house&quot;, str_detect(pub_name, &quot;Tavern&quot;) ~ &quot;tavern&quot;)) %&gt;% group_by(place) %&gt;% slice(1:10) %&gt;% ggplot(aes(fct_reorder(pub_name, n), n))+ geom_col()+ coord_flip()+ facet_wrap(~place, scale = &quot;free&quot;)+ labs(x = &quot;&quot;, y = &quot;&quot;, caption = &quot;https://pudding.cool/2019/10/pubs/&quot;) Варинат NA, как видно из графика, соответствует всем оставшимся вариантам, которые не подпали ни под одно из наших условий. Чтобы учесть и этот случай, нужно добавить условие TRUE: uk_pubs %&gt;% count(pub_name, sort = TRUE) %&gt;% mutate(place = case_when( str_detect(pub_name, &quot;Inn&quot;) ~ &quot;inn&quot;, str_detect(pub_name, &quot;Hotel&quot;) ~ &quot;hotel&quot;, str_detect(pub_name, &quot;Bar&quot;) ~ &quot;bar&quot;, str_detect(pub_name, &quot;House&quot;) ~ &quot;house&quot;, str_detect(pub_name, &quot;Tavern&quot;) ~ &quot;tavern&quot;, TRUE ~ &quot;other&quot;)) %&gt;% group_by(place) %&gt;% slice(1:10) %&gt;% ggplot(aes(fct_reorder(pub_name, n), n))+ geom_col()+ coord_flip()+ facet_wrap(~place, scale = &quot;free&quot;)+ labs(x = &quot;&quot;, y = &quot;&quot;, caption = &quot;https://pudding.cool/2019/10/pubs/&quot;) Мы уже визуализировали данные из статьи на Pudding “Finding Forever Homes”, заполните пропус, чтобы получить возростно-половую пирамиду собак в США. Когда построите приведенный график, раскомментируйте закомментированную строчку и посмотрите на результат. dogs &lt;- read_csv(&quot;https://raw.githubusercontent.com/r-classes/2019_2020_ds4dh_hw_2_dplyr_tidyr_ggplot2/master/data/dog_names.csv&quot;) dogs %&gt;% filter(sex != &quot;Unknown&quot;) %&gt;% count(sex, contact_state) %&gt;% group_by(contact_state) %&gt;% mutate( ... ) %&gt;% ggplot(aes(fct_reorder(contact_state, sum), n, fill = sex))+ geom_col()+ # scale_y_continuous(breaks = -2:2*1000, labels = abs(-2:2)*1000)+ coord_flip()+ labs(x = &quot;&quot;, y = &quot;&quot;, caption = &quot;data from https://pudding.cool/2019/10/shelters/&quot;)+ scale_fill_brewer(palette =&quot;Dark2&quot;) 8.3.2 Условия в столбцах Что если хочется применить summarise() или mutate() лишь к определенным колонкам? Для этого можно использовать функции summarise_at() или mutate_at().Например, посчитать среднее во всех колонках датасета iris, которые начинаются со слова “Sepal”. iris %&gt;% head() iris %&gt;% summarise_at(vars(starts_with(&quot;Sepal&quot;)), mean) На месте функции starts_with() могут быть и другие: ends_with() – заканчивается iris %&gt;% summarise_at(vars(ends_with(&quot;Width&quot;)), mean) matches() – соответствует регулярному выражению iris %&gt;% summarise_at(vars(matches(&quot;Sepal&quot;)), mean) one_off() – из предложенного вектора значений diamonds %&gt;% summarise_at(vars(one_of(c(&quot;depth&quot;, &quot;price&quot;, &quot;carat&quot;))), mean) Так же, используя функцию summarise_if(), можно применять какую-то операцию к каждой колонке, если она соответствует какому-то условию (обычно это используют для проверки типов переменных): diamonds %&gt;% summarise_if(is.numeric, mean) Вот несколько примеров с mutate_..(): diamonds diamonds %&gt;% mutate_at(vars(one_of(c(&quot;depth&quot;, &quot;price&quot;, &quot;carat&quot;))), sqrt) diamonds %&gt;% mutate_if(is.numeric, sqrt) Вместо mean и sqrt может быть любая другая функция, в том числе созданная вами: iris %&gt;% summarise_at(vars(matches(&quot;Sepal&quot;)), function(x){mean(x)*min(x)}) Вот здесь лежат данные по 51 американскому городу, количеству человек в них, а также ежемесячная средняя температура в Фаренгейтах. Преобразуйте фарингейты в цельсий и найдите значение минимальной температуры в датасете. \\[^0C = \\frac{5}{9} \\times (^0F-32)\\] 8.4 Reinvent the map function В разделе про работу со списками мы обсуждали функию map(), оказывается в нее можно вставлять любую функцию, например, пересчитаем все цены в датасете diamonds в рубли: Можно прочитать все файлы в одной папке: list.files(&quot;data/&quot;, pattern = &quot;.csv&quot;) [1] &quot;2019.01_levada_countries.csv&quot; [2] &quot;anscombe.csv&quot; [3] &quot;article_24_from_UDHR.csv&quot; [4] &quot;character-deaths.csv&quot; [5] &quot;chekhov_zoshenko.csv&quot; [6] &quot;cities_of_russia.csv&quot; [7] &quot;datasaurus.csv&quot; [8] &quot;death_of_migrants_and_refugees_from_the_Unwelcomed_project.csv&quot; [9] &quot;dialect_forms_fake.csv&quot; [10] &quot;dialect_forms_repeated_fake.csv&quot; [11] &quot;first_scatterplot.csv&quot; [12] &quot;freq_dict_2011.csv&quot; [13] &quot;gospel_freq_words.csv&quot; [14] &quot;icelandic.csv&quot; [15] &quot;languages_in_india.csv&quot; [16] &quot;mad_questionary.csv&quot; [17] &quot;misspelling_dataset.csv&quot; [18] &quot;moscow_average_temperature.csv&quot; [19] &quot;MVC_Russia.csv&quot; [20] &quot;obamacare.csv&quot; [21] &quot;perceptions_of_probability.csv&quot; [22] &quot;popovets_l_2019_colors_of_classic.csv&quot; [23] &quot;russian_sentiment.csv&quot; [24] &quot;scary_letters.csv&quot; [25] &quot;shakespeare_all.csv&quot; [26] &quot;shakespeare_to_check.csv&quot; [27] &quot;test_correlation_dataset.csv&quot; [28] &quot;tidy_zoshenko.csv&quot; [29] &quot;UK_pubs.csv&quot; [30] &quot;us_city_average_temperature.csv&quot; [31] &quot;visa_question.csv&quot; [32] &quot;zhadina.csv&quot; [33] &quot;zoshenko.csv&quot; all_datasets &lt;- map(str_c(&quot;data/&quot;, list.files(&quot;data/&quot;, pattern = &quot;.csv&quot;)), read_csv) str(all_datasets, max.level = 1) List of 33 $ : tibble [521 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) ..- attr(*, &quot;spec&quot;)= .. .. cols( .. .. date = col_character(), .. .. good = col_double(), .. .. bad = col_double(), .. .. no_answer = col_double(), .. .. towards = col_character() .. .. ) $ : tibble [44 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame) ..- attr(*, &quot;spec&quot;)= .. .. cols( .. .. id = col_double(), .. .. dataset = col_double(), .. .. x = col_double(), .. .. y = col_double() .. .. ) $ : tibble [6 × 1] (S3: spec_tbl_df/tbl_df/tbl/data.frame) ..- attr(*, &quot;spec&quot;)= .. .. cols( .. .. article_text = col_character() .. .. ) $ : tibble [917 × 13] (S3: spec_tbl_df/tbl_df/tbl/data.frame) ..- attr(*, &quot;spec&quot;)= .. .. cols( .. .. Name = col_character(), .. .. Allegiances = col_character(), .. .. `Death Year` = col_double(), .. .. `Book of Death` = col_double(), .. .. `Death Chapter` = col_double(), .. .. `Book Intro Chapter` = col_double(), .. .. Gender = col_double(), .. .. Nobility = col_double(), .. .. GoT = col_double(), .. .. CoK = col_double(), .. .. SoS = col_double(), .. .. FfC = col_double(), .. .. DwD = col_double() .. .. ) $ : tibble [379 × 70] (S3: spec_tbl_df/tbl_df/tbl/data.frame) ..- attr(*, &quot;spec&quot;)= .. .. cols( .. .. titles = col_character(), .. .. text_author = col_character(), .. .. а = col_double(), .. .. без = col_double(), .. .. бы = col_double(), .. .. был = col_double(), .. .. было = col_double(), .. .. быть = col_double(), .. .. в = col_double(), .. .. вам = col_double(), .. .. вас = col_double(), .. .. во = col_double(), .. .. вот = col_double(), .. .. все = col_double(), .. .. вы = col_double(), .. .. да = col_double(), .. .. даже = col_double(), .. .. для = col_double(), .. .. до = col_double(), .. .. его = col_double(), .. .. ее = col_double(), .. .. ему = col_double(), .. .. если = col_double(), .. .. есть = col_double(), .. .. еще = col_double(), .. .. же = col_double(), .. .. за = col_double(), .. .. и = col_double(), .. .. из = col_double(), .. .. или = col_double(), .. .. к = col_double(), .. .. как = col_double(), .. .. когда = col_double(), .. .. ли = col_double(), .. .. меня = col_double(), .. .. мне = col_double(), .. .. мы = col_double(), .. .. на = col_double(), .. .. не = col_double(), .. .. него = col_double(), .. .. нет = col_double(), .. .. ни = col_double(), .. .. ничего = col_double(), .. .. но = col_double(), .. .. ну = col_double(), .. .. о = col_double(), .. .. он = col_double(), .. .. она = col_double(), .. .. от = col_double(), .. .. по = col_double(), .. .. под = col_double(), .. .. раз = col_double(), .. .. с = col_double(), .. .. себе = col_double(), .. .. себя = col_double(), .. .. со = col_double(), .. .. так = col_double(), .. .. теперь = col_double(), .. .. то = col_double(), .. .. только = col_double(), .. .. тут = col_double(), .. .. ты = col_double(), .. .. у = col_double(), .. .. уже = col_double(), .. .. чего = col_double(), .. .. человек = col_double(), .. .. чем = col_double(), .. .. что = col_double(), .. .. это = col_double(), .. .. я = col_double() .. .. ) $ : tibble [1,097 × 1] (S3: spec_tbl_df/tbl_df/tbl/data.frame) ..- attr(*, &quot;spec&quot;)= .. .. cols( .. .. city = col_character() .. .. ) $ : tibble [1,846 × 3] (S3: spec_tbl_df/tbl_df/tbl/data.frame) ..- attr(*, &quot;spec&quot;)= .. .. cols( .. .. dataset = col_character(), .. .. x = col_double(), .. .. y = col_double() .. .. ) $ : tibble [5,506 × 10] (S3: spec_tbl_df/tbl_df/tbl/data.frame) ..- attr(*, &quot;spec&quot;)= .. .. cols( .. .. id = col_double(), .. .. date = col_character(), .. .. total_death_missing = col_double(), .. .. location = col_character(), .. .. lat = col_double(), .. .. lon = col_double(), .. .. collapsed_region = col_character(), .. .. region = col_character(), .. .. collapsed_cause = col_character(), .. .. cause_of_death = col_character() .. .. ) $ : tibble [319 × 2] (S3: spec_tbl_df/tbl_df/tbl/data.frame) ..- attr(*, &quot;spec&quot;)= .. .. cols( .. .. form = col_character(), .. .. gender = col_character() .. .. ) $ : tibble [70 × 2] (S3: spec_tbl_df/tbl_df/tbl/data.frame) ..- attr(*, &quot;spec&quot;)= .. .. cols( .. .. feature = col_character(), .. .. time = col_character() .. .. ) $ : tibble [464 × 2] (S3: spec_tbl_df/tbl_df/tbl/data.frame) ..- attr(*, &quot;spec&quot;)= .. .. cols( .. .. x = col_double(), .. .. y = col_double() .. .. ) $ : tibble [52,138 × 1] (S3: spec_tbl_df/tbl_df/tbl/data.frame) ..- attr(*, &quot;spec&quot;)= .. .. cols( .. .. `lemma pos freq_ipm` = col_character() .. .. ) $ : tibble [472 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) ..- attr(*, &quot;spec&quot;)= .. .. cols( .. .. word = col_character(), .. .. John = col_double(), .. .. Luke = col_double(), .. .. Mark = col_double(), .. .. Matthew = col_double() .. .. ) $ : tibble [175 × 2] (S3: spec_tbl_df/tbl_df/tbl/data.frame) ..- attr(*, &quot;spec&quot;)= .. .. cols( .. .. vowel.dur = col_double(), .. .. aspiration = col_character() .. .. ) $ : tibble [12 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) ..- attr(*, &quot;spec&quot;)= .. .. cols( .. .. language = col_character(), .. .. n_L1_sp = col_double(), .. .. n_L2_sp = col_double(), .. .. n_L3_sp = col_double(), .. .. n_all_sp = col_double() .. .. ) $ : tibble [106 × 12] (S3: spec_tbl_df/tbl_df/tbl/data.frame) ..- attr(*, &quot;spec&quot;)= .. .. cols( .. .. name = col_character(), .. .. age = col_character(), .. .. sex = col_character(), .. .. town_of_birth = col_character(), .. .. phone = col_character(), .. .. favourite_book = col_character(), .. .. favourite_dish = col_character(), .. .. favourite_drink = col_character(), .. .. favourite_film = col_character(), .. .. favourite_activity = col_character(), .. .. frequency_be_in_the_fresh_air = col_character(), .. .. fear_of_the_dark = col_character() .. .. ) $ : tibble [15,477 × 3] (S3: spec_tbl_df/tbl_df/tbl/data.frame) ..- attr(*, &quot;spec&quot;)= .. .. cols( .. .. correct = col_character(), .. .. spelling = col_character(), .. .. count = col_double() .. .. ) $ : tibble [24 × 3] (S3: spec_tbl_df/tbl_df/tbl/data.frame) ..- attr(*, &quot;spec&quot;)= .. .. cols( .. .. id = col_character(), .. .. type = col_character(), .. .. non_normalised = col_double() .. .. ) $ : tibble [2,508 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame) ..- attr(*, &quot;spec&quot;)= .. .. cols( .. .. name = col_character(), .. .. code = col_double(), .. .. latitude = col_double(), .. .. longitude = col_double() .. .. ) $ : tibble [52 × 3] (S3: spec_tbl_df/tbl_df/tbl/data.frame) ..- attr(*, &quot;spec&quot;)= .. .. cols( .. .. state = col_character(), .. .. uninsured_rate_2010 = col_double(), .. .. uninsured_rate_2015 = col_double() .. .. ) $ : tibble [46 × 17] (S3: spec_tbl_df/tbl_df/tbl/data.frame) ..- attr(*, &quot;spec&quot;)= .. .. cols( .. .. `Almost Certainly` = col_double(), .. .. `Highly Likely` = col_double(), .. .. `Very Good Chance` = col_double(), .. .. Probable = col_double(), .. .. Likely = col_double(), .. .. Probably = col_double(), .. .. `We Believe` = col_double(), .. .. `Better Than Even` = col_double(), .. .. `About Even` = col_double(), .. .. `We Doubt` = col_double(), .. .. Improbable = col_double(), .. .. Unlikely = col_double(), .. .. `Probably Not` = col_double(), .. .. `Little Chance` = col_double(), .. .. `Almost No Chance` = col_double(), .. .. `Highly Unlikely` = col_double(), .. .. `Chances Are Slight` = col_double() .. .. ) $ : tibble [9 × 27] (S3: spec_tbl_df/tbl_df/tbl/data.frame) ..- attr(*, &quot;spec&quot;)= .. .. cols( .. .. writer = col_character(), .. .. алый = col_double(), .. .. `багровый/багряный` = col_double(), .. .. бежевый = col_double(), .. .. `белый/белесый` = col_double(), .. .. голубой = col_double(), .. .. жёлтый = col_double(), .. .. `зелёный/изумрудный` = col_double(), .. .. золотой = col_double(), .. .. карий = col_double(), .. .. коралловый = col_double(), .. .. `коричневый/каштановый` = col_double(), .. .. красный = col_double(), .. .. лазурный = col_double(), .. .. лиловый = col_double(), .. .. малиновый = col_double(), .. .. `оранжевый/рыжий` = col_double(), .. .. пурпурный = col_double(), .. .. розовый = col_double(), .. .. русый = col_double(), .. .. серебристый = col_double(), .. .. серый = col_double(), .. .. сизый = col_double(), .. .. синий = col_double(), .. .. сиреневый = col_double(), .. .. фиолетовый = col_double(), .. .. чёрный = col_double() .. .. ) $ : tibble [7,640 × 2] (S3: spec_tbl_df/tbl_df/tbl/data.frame) ..- attr(*, &quot;spec&quot;)= .. .. cols( .. .. word = col_character(), .. .. score = col_double() .. .. ) $ : tibble [3 × 1] (S3: spec_tbl_df/tbl_df/tbl/data.frame) ..- attr(*, &quot;spec&quot;)= .. .. cols( .. .. `cyrillic;ipa_symbols;greek` = col_character() .. .. ) $ : tibble [138,691 × 2] (S3: spec_tbl_df/tbl_df/tbl/data.frame) ..- attr(*, &quot;spec&quot;)= .. .. cols( .. .. title = col_character(), .. .. text = col_character() .. .. ) $ : tibble [13,861 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame) ..- attr(*, &quot;spec&quot;)= .. .. cols( .. .. title = col_character(), .. .. words = col_character(), .. .. n = col_double(), .. .. n_text = col_double() .. .. ) $ : tibble [21 × 3] (S3: spec_tbl_df/tbl_df/tbl/data.frame) ..- attr(*, &quot;spec&quot;)= .. .. cols( .. .. x = col_double(), .. .. y = col_double(), .. .. type = col_character() .. .. ) $ : tibble [46,658 × 1] (S3: spec_tbl_df/tbl_df/tbl/data.frame) ..- attr(*, &quot;spec&quot;)= .. .. cols( .. .. `titles word n n_words` = col_character() .. .. ) $ : tibble [41,097 × 3] (S3: spec_tbl_df/tbl_df/tbl/data.frame) ..- attr(*, &quot;spec&quot;)= .. .. cols( .. .. pub_ID = col_double(), .. .. pub_name = col_character(), .. .. pub_town = col_character() .. .. ) $ : tibble [51 × 26] (S3: spec_tbl_df/tbl_df/tbl/data.frame) ..- attr(*, &quot;spec&quot;)= .. .. cols( .. .. city = col_character(), .. .. population_2010 = col_double(), .. .. min_january = col_double(), .. .. min_february = col_double(), .. .. min_march = col_double(), .. .. min_april = col_double(), .. .. min_may = col_double(), .. .. min_june = col_double(), .. .. min_july = col_double(), .. .. min_august = col_double(), .. .. min_september = col_double(), .. .. min_october = col_double(), .. .. min_november = col_double(), .. .. min_december = col_double(), .. .. max_january = col_double(), .. .. max_february = col_double(), .. .. max_march = col_double(), .. .. max_april = col_double(), .. .. max_may = col_double(), .. .. max_june = col_double(), .. .. max_july = col_double(), .. .. max_august = col_double(), .. .. max_september = col_double(), .. .. max_october = col_double(), .. .. max_november = col_double(), .. .. max_december = col_double() .. .. ) $ : tibble [8 × 2] (S3: spec_tbl_df/tbl_df/tbl/data.frame) ..- attr(*, &quot;spec&quot;)= .. .. cols( .. .. from = col_character(), .. .. to = col_character() .. .. ) $ : tibble [26 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame) ..- attr(*, &quot;spec&quot;)= .. .. cols( .. .. word_1 = col_character(), .. .. word_2 = col_character(), .. .. word_3 = col_character(), .. .. type = col_character(), .. .. n = col_double() .. .. ) $ : tibble [3,142 × 2] (S3: spec_tbl_df/tbl_df/tbl/data.frame) ..- attr(*, &quot;spec&quot;)= .. .. cols( .. .. text = col_character(), .. .. title = col_character() .. .. ) Можно прочитать все листы из .xlsx файла: library(readxl) excel_sheets(&quot;data/seattle_public_library_checkouts.xlsx&quot;) [1] &quot;2005&quot; &quot;2006&quot; &quot;2007&quot; &quot;2008&quot; &quot;2009&quot; &quot;2010&quot; &quot;2011&quot; &quot;2012&quot; &quot;2013&quot; &quot;2014&quot; [11] &quot;2015&quot; &quot;2016&quot; &quot;2017&quot; &quot;2018&quot; &quot;2019&quot; excel_sheets(&quot;data/seattle_public_library_checkouts.xlsx&quot;) %&gt;% map(~read_xlsx(&quot;data/seattle_public_library_checkouts.xlsx&quot;, .)) -&gt; seatle str(seatle, max.level = 1) List of 15 $ : tibble [3,864 × 5] (S3: tbl_df/tbl/data.frame) $ : tibble [11,197 × 5] (S3: tbl_df/tbl/data.frame) $ : tibble [12,141 × 5] (S3: tbl_df/tbl/data.frame) $ : tibble [15,526 × 5] (S3: tbl_df/tbl/data.frame) $ : tibble [16,821 × 5] (S3: tbl_df/tbl/data.frame) $ : tibble [15,046 × 5] (S3: tbl_df/tbl/data.frame) $ : tibble [13,793 × 5] (S3: tbl_df/tbl/data.frame) $ : tibble [13,091 × 5] (S3: tbl_df/tbl/data.frame) $ : tibble [15,092 × 5] (S3: tbl_df/tbl/data.frame) $ : tibble [14,197 × 5] (S3: tbl_df/tbl/data.frame) $ : tibble [12,313 × 5] (S3: tbl_df/tbl/data.frame) $ : tibble [10,705 × 5] (S3: tbl_df/tbl/data.frame) $ : tibble [10,485 × 5] (S3: tbl_df/tbl/data.frame) $ : tibble [9,593 × 5] (S3: tbl_df/tbl/data.frame) $ : tibble [6,631 × 5] (S3: tbl_df/tbl/data.frame) Получился список, можно использовать map_df(), которая еще и соединит все в один датафрейм. excel_sheets(&quot;data/seattle_public_library_checkouts.xlsx&quot;) %&gt;% map_df(~read_xlsx(&quot;data/seattle_public_library_checkouts.xlsx&quot;, .)) -&gt; seatle str(seatle, max.level = 1) tibble [180,495 × 5] (S3: tbl_df/tbl/data.frame) "],
["tidytext.html", "9 Работа с текстами: gutenbergr, tidytext, stopwords, udpipe 9.1 Загрузка текста в R 9.2 Пакет gutenbergr 9.3 Библиотека tidytext 9.4 Пакет stopwords 9.5 Пакет udpipe", " 9 Работа с текстами: gutenbergr, tidytext, stopwords, udpipe library(tidyverse) 9.1 Загрузка текста в R В пакете readr (входит в tidyverse) для чтения текста есть функция read_lines(). В качестве первой переменной может выступать путь к файлу на компьютере или интернет ссылка: t &lt;- read_lines(&quot;https://raw.githubusercontent.com/agricolamz/2020_HSE_DPO/master/data/Chang.txt&quot;) head(t) [1] &quot;Тед Чан&quot; [2] &quot;История твоей жизни&quot; [3] &quot;Твой отец собирается задать мне вопрос. Это самый важный момент в нашей жизни, и я хочу&quot; [4] &quot;запомнить все до малейшей детали. Уже за полночь, но мы только что вернулись домой после&quot; [5] &quot;ужина в ресторане и веселого шоу и сразу выходим в патио полюбоваться полной луной. Хочу&quot; [6] &quot;танцевать! — объявляю я, и твой отец подтрунивает надо мной, но мы начинаем скользить в&quot; Тексты хранятся в интернете по разному. Часто бывает так, что текст дигитализировали так, как он напечатан, так что в результате каждая строка в печатной книжке соответствует строке в текстовом файле (так, например, в нашем примере). Такой файл следует склеить воедино, используя пробел в качестве разделителя: t2 &lt;- str_c(t, collapse = &quot; &quot;) length(t2) [1] 1 str_length(t2) [1] 117398 При таком слиянии, стоит проверить, не было ли в анализируемом тексте знаков переноса, иначе они сольются неправильно: str_c(c(&quot;... она запо-&quot;, &quot;лучила ...&quot;), collapse = &quot; &quot;) [1] &quot;... она запо- лучила ...&quot; 9.2 Пакет gutenbergr Пакет gutenbergr является API для очень старого проекта Gutenberg. library(gutenbergr) Все самое важное в этом пакете хранится в датасете gutenberg_metadata str(gutenberg_metadata) tibble [51,997 × 8] (S3: tbl_df/tbl/data.frame) $ gutenberg_id : int [1:51997] 0 1 2 3 4 5 6 7 8 9 ... $ title : chr [1:51997] NA &quot;The Declaration of Independence of the United States of America&quot; &quot;The United States Bill of Rights\\r\\nThe Ten Original Amendments to the Constitution of the United States&quot; &quot;John F. Kennedy&#39;s Inaugural Address&quot; ... $ author : chr [1:51997] NA &quot;Jefferson, Thomas&quot; &quot;United States&quot; &quot;Kennedy, John F. (John Fitzgerald)&quot; ... $ gutenberg_author_id: int [1:51997] NA 1638 1 1666 3 1 4 NA 3 3 ... $ language : chr [1:51997] &quot;en&quot; &quot;en&quot; &quot;en&quot; &quot;en&quot; ... $ gutenberg_bookshelf: chr [1:51997] NA &quot;United States Law/American Revolutionary War/Politics&quot; &quot;American Revolutionary War/Politics/United States Law&quot; NA ... $ rights : chr [1:51997] &quot;Public domain in the USA.&quot; &quot;Public domain in the USA.&quot; &quot;Public domain in the USA.&quot; &quot;Public domain in the USA.&quot; ... $ has_text : logi [1:51997] TRUE TRUE TRUE TRUE TRUE TRUE ... - attr(*, &quot;date_updated&quot;)= Date[1:1], format: &quot;2016-05-05&quot; Например, сейчас мы можем понять, сколько книг на разных языках можно скачать из проекта: gutenberg_metadata %&gt;% count(language, sort = TRUE) Как видно, в основном это тексты на английском. Сколько авторов в датасете? gutenberg_metadata %&gt;% count(author, sort = TRUE) Сколько произведений Джейн Остин (не перепутайте с другими Остин) есть в датасете? gutenberg_metadata %&gt;% filter(author == &quot;Austen, Jane&quot;) %&gt;% distinct(gutenberg_id, title) Давайте скачаем “Эмму”: emma &lt;- gutenberg_download(158) Determining mirror for Project Gutenberg from http://www.gutenberg.org/robot/harvest Using mirror http://aleph.gutenberg.org emma Можно скачивать сразу несколько книг. Давайте добавим еще “Леди Сьюзен”: books &lt;- gutenberg_download(c(158, 946), meta_fields = &quot;title&quot;) books books %&gt;% count(title) Сколько уникальных заголовков из базы данных содержит “Sherlock Holmes”? 9.3 Библиотека tidytext Сейчас скачанные книги записаны в таблицу, где одна строка это один абзац. Хочется мочь посчитать слова. Для этого книги нужно привести в tidy формат и для этого написан пакет tidytext (онлайн книга доступна здесь). Основное “оружие” пакета tidytext функция unnest_tokens(), которая переводит текст в tidy формат. В аргумент output подается вектор с именем будущей переменной, а аргумент input принимает переменную с текстом. library(tidytext) books %&gt;% unnest_tokens(output = &quot;word&quot;, input = text) Теперь можно посчитать самые частотные слова в обоих произведениях: books %&gt;% unnest_tokens(output = &quot;word&quot;, input = text) %&gt;% count(title, word, sort = TRUE) Ну… Это было ожидаемо. Нужно убрать стопслова. Английские стопслова встроены в пакет (переменная stop_words): books %&gt;% unnest_tokens(word, text) %&gt;% count(title, word, sort = TRUE) %&gt;% anti_join(stop_words) Joining, by = &quot;word&quot; Постройте следующий график, на котором представлены самые частотные 20 слов каждого из произведений. Как видно, на графике все не упорядочено, давайте начнем с такого примера: books %&gt;% unnest_tokens(word, text) %&gt;% count(word, sort = TRUE) %&gt;% slice(1:20) %&gt;% ggplot(aes(n, word))+ geom_col() Если мы работаем с одним фасетом, то все проблемы может решить функция fct_reorder(), которая упорядочивает на основании некоторой переменной: books %&gt;% unnest_tokens(word, text) %&gt;% count(word, sort = TRUE) %&gt;% slice(1:20) %&gt;% mutate(word = fct_reorder(word, n)) %&gt;% ggplot(aes(n, word))+ geom_col() Однако, если мы применим это к нашим данным, то получится неупорядочено: books %&gt;% unnest_tokens(word, text) %&gt;% count(title, word, sort = TRUE) %&gt;% group_by(title) %&gt;% slice(1:20) %&gt;% ungroup() %&gt;% mutate(word = fct_reorder(word, n)) %&gt;% ggplot(aes(n, word))+ geom_col()+ facet_wrap(~title, scales = &quot;free&quot;) В пакете tidytext есть функция reorder_within(), которая позволяет упорядочить нужным образом: books %&gt;% unnest_tokens(word, text) %&gt;% count(title, word, sort = TRUE) %&gt;% group_by(title) %&gt;% slice(1:20) %&gt;% ungroup() %&gt;% mutate(word = reorder_within(x = word, by = n, within = title)) %&gt;% ggplot(aes(n, word))+ geom_col()+ facet_wrap(~title, scales = &quot;free&quot;) Чтобы избавиться от дополнительной подписи нужно использовать scale_y_reordered() или scale_x_reordered(): books %&gt;% unnest_tokens(word, text) %&gt;% count(title, word, sort = TRUE) %&gt;% group_by(title) %&gt;% slice(1:20) %&gt;% ungroup() %&gt;% mutate(word = reorder_within(x = word, by = n, within = title)) %&gt;% ggplot(aes(n, word))+ geom_col()+ facet_wrap(~title, scales = &quot;free&quot;)+ scale_y_reordered() Функция unnest_tokens() позволяет работать не только со словами, но и, напрмиер, с биграммами: books %&gt;% unnest_tokens(word, text, token = &quot;ngrams&quot;, n = 2) Поиск самых частотных слов — не едиснственная задача, которую можно решать при работе с текстом. Иногда имеет смысл узнать распределение слов в произведении. Давайте посмотрим как распределены в романе “Эмма” фамилии главных героев: books %&gt;% filter(title == &quot;Emma&quot;) %&gt;% unnest_tokens(word, text) %&gt;% mutate(narrative_time = 1:n()) %&gt;% filter(str_detect(word, &quot;knightley$|woodhouse$|churchill$|fairfax$&quot;)) %&gt;% ggplot()+ geom_vline(aes(xintercept = narrative_time))+ facet_wrap(~word, ncol = 1) 9.4 Пакет stopwords Выше мы упомянули, что в пакет tidytext встроен список английских стопслов. Стопслова для других язков можно раздобыть списки для других языков, используя пакет stopwords. Вместо имени языка, функция принимает ISO код языыка: library(stopwords) stopwords(&quot;ru&quot;) [1] &quot;и&quot; &quot;в&quot; &quot;во&quot; &quot;не&quot; &quot;что&quot; &quot;он&quot; &quot;на&quot; [8] &quot;я&quot; &quot;с&quot; &quot;со&quot; &quot;как&quot; &quot;а&quot; &quot;то&quot; &quot;все&quot; [15] &quot;она&quot; &quot;так&quot; &quot;его&quot; &quot;но&quot; &quot;да&quot; &quot;ты&quot; &quot;к&quot; [22] &quot;у&quot; &quot;же&quot; &quot;вы&quot; &quot;за&quot; &quot;бы&quot; &quot;по&quot; &quot;только&quot; [29] &quot;ее&quot; &quot;мне&quot; &quot;было&quot; &quot;вот&quot; &quot;от&quot; &quot;меня&quot; &quot;еще&quot; [36] &quot;нет&quot; &quot;о&quot; &quot;из&quot; &quot;ему&quot; &quot;теперь&quot; &quot;когда&quot; &quot;даже&quot; [43] &quot;ну&quot; &quot;вдруг&quot; &quot;ли&quot; &quot;если&quot; &quot;уже&quot; &quot;или&quot; &quot;ни&quot; [50] &quot;быть&quot; &quot;был&quot; &quot;него&quot; &quot;до&quot; &quot;вас&quot; &quot;нибудь&quot; &quot;опять&quot; [57] &quot;уж&quot; &quot;вам&quot; &quot;сказал&quot; &quot;ведь&quot; &quot;там&quot; &quot;потом&quot; &quot;себя&quot; [64] &quot;ничего&quot; &quot;ей&quot; &quot;может&quot; &quot;они&quot; &quot;тут&quot; &quot;где&quot; &quot;есть&quot; [71] &quot;надо&quot; &quot;ней&quot; &quot;для&quot; &quot;мы&quot; &quot;тебя&quot; &quot;их&quot; &quot;чем&quot; [78] &quot;была&quot; &quot;сам&quot; &quot;чтоб&quot; &quot;без&quot; &quot;будто&quot; &quot;человек&quot; &quot;чего&quot; [85] &quot;раз&quot; &quot;тоже&quot; &quot;себе&quot; &quot;под&quot; &quot;жизнь&quot; &quot;будет&quot; &quot;ж&quot; [92] &quot;тогда&quot; &quot;кто&quot; &quot;этот&quot; &quot;говорил&quot; &quot;того&quot; &quot;потому&quot; &quot;этого&quot; [99] &quot;какой&quot; &quot;совсем&quot; &quot;ним&quot; &quot;здесь&quot; &quot;этом&quot; &quot;один&quot; &quot;почти&quot; [106] &quot;мой&quot; &quot;тем&quot; &quot;чтобы&quot; &quot;нее&quot; &quot;кажется&quot; &quot;сейчас&quot; &quot;были&quot; [113] &quot;куда&quot; &quot;зачем&quot; &quot;сказать&quot; &quot;всех&quot; &quot;никогда&quot; &quot;сегодня&quot; &quot;можно&quot; [120] &quot;при&quot; &quot;наконец&quot; &quot;два&quot; &quot;об&quot; &quot;другой&quot; &quot;хоть&quot; &quot;после&quot; [127] &quot;над&quot; &quot;больше&quot; &quot;тот&quot; &quot;через&quot; &quot;эти&quot; &quot;нас&quot; &quot;про&quot; [134] &quot;всего&quot; &quot;них&quot; &quot;какая&quot; &quot;много&quot; &quot;разве&quot; &quot;сказала&quot; &quot;три&quot; [141] &quot;эту&quot; &quot;моя&quot; &quot;впрочем&quot; &quot;хорошо&quot; &quot;свою&quot; &quot;этой&quot; &quot;перед&quot; [148] &quot;иногда&quot; &quot;лучше&quot; &quot;чуть&quot; &quot;том&quot; &quot;нельзя&quot; &quot;такой&quot; &quot;им&quot; [155] &quot;более&quot; &quot;всегда&quot; &quot;конечно&quot; &quot;всю&quot; &quot;между&quot; Пакет предоставляет несколько источников списков: stopwords_getsources() [1] &quot;snowball&quot; &quot;stopwords-iso&quot; &quot;misc&quot; &quot;smart&quot; [5] &quot;marimo&quot; &quot;ancient&quot; &quot;nltk&quot; Давайте посмотрем какие языки сейчас доступны: map(stopwords_getsources(), stopwords_getlanguages) [[1]] [1] &quot;da&quot; &quot;de&quot; &quot;en&quot; &quot;es&quot; &quot;fi&quot; &quot;fr&quot; &quot;hu&quot; &quot;ir&quot; &quot;it&quot; &quot;nl&quot; &quot;no&quot; &quot;pt&quot; &quot;ro&quot; &quot;ru&quot; &quot;sv&quot; [[2]] [1] &quot;af&quot; &quot;ar&quot; &quot;hy&quot; &quot;eu&quot; &quot;bn&quot; &quot;br&quot; &quot;bg&quot; &quot;ca&quot; &quot;zh&quot; &quot;hr&quot; &quot;cs&quot; &quot;da&quot; &quot;nl&quot; &quot;en&quot; &quot;eo&quot; [16] &quot;et&quot; &quot;fi&quot; &quot;fr&quot; &quot;gl&quot; &quot;de&quot; &quot;el&quot; &quot;ha&quot; &quot;he&quot; &quot;hi&quot; &quot;hu&quot; &quot;id&quot; &quot;ga&quot; &quot;it&quot; &quot;ja&quot; &quot;ko&quot; [31] &quot;ku&quot; &quot;la&quot; &quot;lt&quot; &quot;lv&quot; &quot;ms&quot; &quot;mr&quot; &quot;no&quot; &quot;fa&quot; &quot;pl&quot; &quot;pt&quot; &quot;ro&quot; &quot;ru&quot; &quot;sk&quot; &quot;sl&quot; &quot;so&quot; [46] &quot;st&quot; &quot;es&quot; &quot;sw&quot; &quot;sv&quot; &quot;th&quot; &quot;tl&quot; &quot;tr&quot; &quot;uk&quot; &quot;ur&quot; &quot;vi&quot; &quot;yo&quot; &quot;zu&quot; [[3]] [1] &quot;ar&quot; &quot;ca&quot; &quot;el&quot; &quot;gu&quot; &quot;zh&quot; [[4]] [1] &quot;en&quot; [[5]] [1] &quot;en&quot; &quot;ja&quot; &quot;ar&quot; &quot;he&quot; &quot;zh_tw&quot; &quot;zh_cn&quot; [[6]] [1] &quot;grc&quot; &quot;la&quot; [[7]] [1] &quot;ar&quot; &quot;az&quot; &quot;da&quot; &quot;nl&quot; &quot;en&quot; &quot;fi&quot; &quot;fr&quot; &quot;de&quot; &quot;el&quot; &quot;hu&quot; &quot;id&quot; &quot;it&quot; &quot;kk&quot; &quot;ne&quot; &quot;no&quot; [16] &quot;pt&quot; &quot;ro&quot; &quot;ru&quot; &quot;sl&quot; &quot;es&quot; &quot;sv&quot; &quot;tg&quot; &quot;tr&quot; Мы видим, что есть несколько источников для русского языка: length(stopwords(&quot;ru&quot;, source = &quot;snowball&quot;)) [1] 159 length(stopwords(&quot;ru&quot;, source = &quot;stopwords-iso&quot;)) [1] 559 9.5 Пакет udpipe Пакет udpipe представляет лемматизацию, морфологический и синтаксический анализ разных языков. Туториал можно найти здесь, там же есть список доступных языков. library(udpipe) Модели качаются очень долго. enmodel &lt;- udpipe_download_model(language = &quot;english&quot;) Downloading udpipe model from https://raw.githubusercontent.com/jwijffels/udpipe.models.ud.2.4/master/inst/udpipe-ud-2.4-190531/english-ewt-ud-2.4-190531.udpipe to /home/agricolamz/work/materials/2019_2020_ds4dh/class_materials/english-ewt-ud-2.4-190531.udpipe Visit https://github.com/jwijffels/udpipe.models.ud.2.4 for model license details Теперь можно распарсить какое-нибудь предложение: udpipe(&quot;The want of Miss Taylor would be felt every hour of every day.&quot;, object = enmodel) Скачаем русскую модель: rumodel &lt;- udpipe_download_model(language = &quot;russian-syntagrus&quot;) Downloading udpipe model from https://raw.githubusercontent.com/jwijffels/udpipe.models.ud.2.4/master/inst/udpipe-ud-2.4-190531/russian-syntagrus-ud-2.4-190531.udpipe to /home/agricolamz/work/materials/2019_2020_ds4dh/class_materials/russian-syntagrus-ud-2.4-190531.udpipe Visit https://github.com/jwijffels/udpipe.models.ud.2.4 for model license details udpipe(&quot;Жила-была на свете крыса в морском порту Вальпараисо, на складе мяса и маиса, какао и вина.&quot;, object = rumodel) После того, как модель скачана можно уже к ней обращаться просто по имени файла: udpipe(&quot;Жила-была на свете крыса в морском порту Вальпараисо, на складе мяса и маиса, какао и вина.&quot;, object = &quot;russian-syntagrus-ud-2.4-190531.udpipe&quot;) "],
["работа-с-геоданными-leaflet.html", "10 Работа с геоданными: leaflet 10.1 Векторная и растровая графика 10.2 Картографические примитивы 10.3 leaflet", " 10 Работа с геоданными: leaflet library(&quot;tidyverse&quot;) 10.1 Векторная и растровая графика Перед тем как обсуждать карты, следует сначала обсудить разницу между векторной и растровой графикой. Растровые изображения представляют собой набор упорядоченных пикселей, про каждый из которых храниться информация о цвете. Векторное изображение нельзя бесконечно увеличивать — в какой-то момент станут видны пиксели, которые в каком-то смысле являются пределом увелечения. Наиболее популярные форматы растровых изображений: JPEG, GIF, PNG, BMP, TIFF и другие. В векторных изображениях инормация храниться как собрани точек, линий и полигонов в некоторой системе координат, что позволяет бесконечно увеличивать такие изображения не теряя в качестве. Наиболее популярные форматы векторных изображений: PDF, SVG, EPS и другие. Современные технологии позволяют соединять растровые и векторные изображения, а также трансформировать их друг в друга. Картографические данные могут попадать в разные типы: точки (столицы всех стран), линии (улицы в каком-нибудь городе), полигоны (границы стран и меньших регионов) обычно имеют некоторую геопривязку (для простоты давайте считать такими, все, что имеет широту и долготу), так что могут быть представлены векторно, однако существует достаточно много информации, которую невозможно представить никак подругому, кроме как векторно: спутниковые снимки, существующие физические/политические/климатические/исторические и т. п. карты, выдача картографических сервисов, таких как Google Maps. Кроме того, занимаясь любыми типами визуализации следует помнить о разнице статической визаулизации, которую после создания нельзя изменить, и динамической визуализации, которая позволяет пользователям изменять себя (увеличиваться и уменьшаться, кликать на собрание точек и видеть их значения и т. п.). В данной главе, в отличие от предыдущих мы сосредоточимся на пакете для динамичского картографирования leaflet. Достаточно много тем останется за пределами этой главы: изменение проекции, манипуляции с географическими данными, работа с растровыми изображениями и другие (см., например, (Lovelace, Nowosad, and Muenchow 2019), доступная здесь). 10.2 Картографические примитивы В картографии существуют свои элементарные единицы: Эти единицы поддерживают популярные пакеты для манипуляции с георграфическими объектами: sp, sf и другие. В данном разделе мы не будем учиться операциям с этими объектами (объединение, вычитание и т. п., подробности смотрите в документации к пакету sp или в уже упомянавшейся книжке (Lovelace, Nowosad, and Muenchow 2019)). 10.3 leaflet Для начала включим библиотеку: library(&quot;leaflet&quot;) Здесь доступен cheatsheet, посвященный пакету leaflet. 10.3.1 .csv файлы Источником географических данных могут быть обычные привычные нам csv файлы. Например, вот здесь, хранится датасет из проекта The Unwelcomed Мохамада А. Вэйкда (Mohamad A. Waked), содержащий информацию о месте и причинах смерти мигрантов и беженцев по всему миру с января 2014 года по июнь 2019 года. unwelcomed &lt;- read_csv(&quot;https://raw.githubusercontent.com/agricolamz/DS_for_DH/master/data/death_of_migrants_and_refugees_from_the_Unwelcomed_project.csv&quot;) id — идентификационный номер; date — дата происшедшего; total_death_missing — количество погибших/пропавших; location — место происшедшего; lat — широта; lon — долгота; collapsed_region — обобщенная информация о регионе; region — информация о регионе; collapsed_cause — обобщенная информация о причине смерти; cause_of_death — информация о причине смерти. Информация о широте и долготе иногда записывают в градусах, минутах и секундах, а иногда в десятичной записи, в R обычно используется десятичная запись. В интернете легко найти конвертеры из одного формата в другой и обратно. Самый простой способ нанести на карту координаты, это использовать комбинацию функций leaflet() %&gt;% addCircles(): unwelcomed %&gt;% leaflet() %&gt;% addCircles(lng = ~lon, # обратите внимание на особый синтаксис с тильдой lat = ~lat) Чтобы точки не “висели в воздухе” можно добавить подложку: unwelcomed %&gt;% leaflet() %&gt;% addTiles() %&gt;% addCircles(lng = ~lon, lat = ~lat) Функция addCircles() имеет массу аргументов, которая отвечает за отображение: radius color opacity fill fillColor label popup К сожалению, в пакете leaflet нет такого удобного автоматического раскрашивания по некоторой переменной, поэтому для решения такой задачи нужно сначала создать свою функцию раскрашивания. Это делается при помощи функций colorNumeric(), colorFactor(), colorBin() или colorQuantile(). pal_cat &lt;- colorFactor(&quot;Set3&quot;, domain = unwelcomed$collapsed_cause) pal_cat(unwelcomed$collapsed_cause[1]) [1] &quot;#D9D9D9&quot; Теперь в переменную pal_cat записана функция, которая возварщает цвета в зависимости от значения. В качестве первого аргумента в фукнций colorNumeric(), colorFactor(), colorBin() или colorQuantile() отправляется палитра, которую пользователь может задать сам или использовать уже имеющуюся (их можно посмотреть при помощи команды RColorBrewer::display.brewer.all()): RColorBrewer::display.brewer.all() Теперь мы готовы сделать нашу первую осмысленную карту unwelcomed %&gt;% filter(str_detect(date, &quot;2014&quot;)) %&gt;% leaflet() %&gt;% addTiles() %&gt;% addCircles(lng = ~lon, lat = ~lat, label = ~total_death_missing, # пусть возникает подпись с количеством color = ~pal_cat(collapsed_cause), # это обобщенная причина opacity = 0.9, popup = ~cause_of_death) %&gt;% # а это конкретная причина, появляется при клике мышкой addLegend(pal = pal_cat, values = ~collapsed_cause, title = &quot;&quot;) Вообще цветовая схема не очень сочетается с подложкой, так что можно поменять подложку при помощи функции addProviderTiles() (галлерею подложек можно посмотреть вот здесь): unwelcomed %&gt;% filter(str_detect(date, &quot;2014&quot;)) %&gt;% leaflet() %&gt;% addProviderTiles(&quot;Stamen.TonerLite&quot;) %&gt;% addCircles(lng = ~lon, lat = ~lat, label = ~total_death_missing, # пусть возникает подпись с количеством color = ~pal_cat(collapsed_cause), # это обобщенная причина opacity = 0.9, popup = ~cause_of_death) %&gt;% # а это конкретная причина, появляется при клике мышкой addLegend(pal = pal_cat, values = ~collapsed_cause, title = &quot;&quot;) Существует проект Карта ДТП, в котором собран датасет c дорожными происшествиями в России за некоторый временной промежуток. Визуализируйте все столкновения из датасета. Что можно увидеть на получившейся карте? 📋 список подсказок ➡ 👁 Все забыто… Как скачать датасет? ➡ Надо использовать функцию read_csv() из пакета tidyverse. 👁 Карта получилась, но есть какие-то точки на Чукотке, которые не стой стороны… ➡ Да, это стандартная проблема с Чукоткой. Прибавьте к значениям долготы 360. 👁 А как исправить значения на Чукотке? ➡ Ну нужно использовать функцию mutate(), а в ней ifelse(). Если значения меньше нуля — прибавляем 360, если больше — оставляем как есть. 10.3.2 Комбинация карт: leafsync Карты, как и все объекты в R тоже можно записать в переменную: unwelcomed %&gt;% filter(str_detect(date, &quot;2014&quot;)) %&gt;% leaflet() %&gt;% addProviderTiles(&quot;Stamen.TonerLite&quot;) %&gt;% addCircles(lng = ~lon, lat = ~lat, label = ~total_death_missing, # пусть возникает подпись с количеством color = ~pal_cat(collapsed_cause), # это обобщенная причина opacity = 0.9, popup = ~cause_of_death) %&gt;% # а это конкретная причина, появляется при клике мышкой addLegend(pal = pal_cat, values = ~collapsed_cause, title = &quot;2014&quot;) -&gt; m_2014 Теперь если вызвать переменную m_2014, появится карта, которую мы сделали. Но, что если мы хотим отобразить рядом карты 2014 года и 2015 года? Как сделать фасетизацию? К сожалению, функции для фасетизации в пакете не предусмотрена, но мы можем сделать ее самостоятельно. Для начала создадим вторую карту: unwelcomed %&gt;% filter(str_detect(date, &quot;2015&quot;)) %&gt;% leaflet() %&gt;% addProviderTiles(&quot;Stamen.TonerLite&quot;) %&gt;% addCircles(lng = ~lon, lat = ~lat, label = ~total_death_missing, # пусть возникает подпись с количеством color = ~pal_cat(collapsed_cause), # это обобщенная причина opacity = 0.9, popup = ~cause_of_death) %&gt;% # а это конкретная причина, появляется при клике мышкой addLegend(pal = pal_cat, values = ~collapsed_cause, title = &quot;2015&quot;) -&gt; m_2015 Включим библиотеку: library(&quot;leafsync&quot;) И теперь соединим две карты воедино: sync(m_2014, m_2015) 10.3.3 Работа с .geojson В данном разделе мы будем анализировать датасет, содержащий данные по всем странам мира. countries &lt;- jsonlite::read_json(&quot;https://github.com/agricolamz/DS_for_DH/raw/master/data/countries.geojson&quot;) Обратите внимание, как уже говорилось в разделе @ref{lists}, так как jsonlite конфликтует с одной из функций из tidyverse, я не загружаю библиотеку полностью при помощи команды library(jsonlite), а обращаюсь к функциям пакета при помощи выражения jsonlite::...(). В загруженном датасете достаточно много переменных, мы попробуем проанализировать количество населения и уровень доходов. countries$features %&gt;% map(&quot;properties&quot;) %&gt;% tibble(name = map_chr(., &quot;name&quot;), pop_est = map_chr(., &quot;pop_est&quot;), income = map_chr(., &quot;income_grp&quot;)) %&gt;% select(-1) %&gt;% mutate(pop_est = as.double(pop_est), income = as.factor(income)) -&gt; country_features country_features Еще одно преимущество формата .geojson заключается в том, что его позволяет просматривать github (см. пример). Самый простой способ визуализировать .geojson это используя функцию addGeoJSON(), которая в качестве аргумента принимает .geojson файл. leaflet() %&gt;% addGeoJSON(geojson = countries) Проблема этого подхода заключается в том, что файл .geojson содержит в себе форматирование, поэтому если пользователь хочет поменять отображение объектов, необходимо добавить список style к каждому узлу. Во-первых, нужно добавить список style в корень файла .geojson. В результате, это изменит отображение всех списков: countries$style = list( weight = 1, color = &quot;#555555&quot;, opacity = 1, fillOpacity = 0.8) leaflet() %&gt;% addGeoJSON(geojson = countries) Во-вторых, следует создать палитры для раскрашивания. Это делается при помощи функций colorNumeric(), colorFactor(), colorBin() или colorQuantile(). pal_num &lt;- colorNumeric(&quot;Greens&quot;, domain = c(min(country_features$pop_est), max(country_features$pop_est))) pal_cat &lt;- colorFactor(&quot;RdYlBu&quot;, domain = country_features$income) Созданные переменные pal_num() и pal_cat() сами являются функциями и возвращают раскраску в зависимости от значения: pal_num(country_features$pop_est[1]) [1] &quot;#F7FCF5&quot; pal_cat(country_features$income[1]) [1] &quot;#FDAE61&quot; В-третьих, нужно создать векторы с новыми цветами: country_features %&gt;% mutate(pop_est_color = pal_num(pop_est), income_color = pal_cat(income)) -&gt; country_features country_features В-четвертых, нужно присвоить каждому узлу свой список style: map(seq_along(countries$features), function(x){ countries$features[[x]]$properties$style &lt;- list(fillColor = country_features$income_color[x]) countries$features[[x]] }) -&gt; countries$features И последний, пятый шаг, это нарисовать получивший .geojson: leaflet() %&gt;% addGeoJSON(geojson = countries) %&gt;% addLegend(pal = pal_cat, values = country_features$income, title = &quot;Income&quot;) Повторите шаги 4 и 5 для числовой переменной (количество населения) из датасета. Ссылки на литературу "],
["работа-со-временем-lubridate.html", "11 Работа со временем: lubridate 11.1 Создание даты 11.2 Извлечение компонентов даты 11.3 Операции с датами 11.4 Визуализация времени: данные Левада-центра", " 11 Работа со временем: lubridate library(tidyverse) Мы обсуждали, что переменные бывают разные. О них, возможно, следует думать как о шкале: Кажется, что время – просто обычная числовая переменная, на которой определены все обычные операции сложения вычитания и т. п. Однако стоит держать в голове несколько фактов: Не каждый год содержит 365 дней. Существуют високосные года. Не каждый день содержит 24 часа. Во многих странах используют переход на летнее и зимнее время. Не в каждой минуте 60 секунд. Существуют дополнительная секунда, которую добавляют чтобы компенсировать замедление во вращении земли (тогда после секунды 23:59:59 идет секунда 23:59:60). Все это мелочи учтены в пакете lubridate, созданном для работы со временем в R (https://rawgit.com/rstudio/cheatsheets/master/lubridate.pdf, туториал доступен здесь и по команде vignette(\"lubridate\")). Первые команды, которые нужно изучить: library(lubridate) Attaching package: &#39;lubridate&#39; The following objects are masked from &#39;package:base&#39;: date, intersect, setdiff, union today() [1] &quot;2020-09-30&quot; now() [1] &quot;2020-09-30 19:42:50 MSK&quot; Как видно, из этих функций в R можно работать как с датами, так и с временем. В качестве иллюстрации мы будем использовать датасет flights из пакета nycflights13, в котором содержатся данные полетов из Нью Йорка в 2013 года. library(nycflights13) flights 11.1 Создание даты Самый простой способ получить дату — это преобразовать строку в формат даты, для этого надо просто упорядочить y (year), m (month) и d (day) в команде: ymd(&quot;2020-01-21&quot;) [1] &quot;2020-01-21&quot; ymd(&quot;20-01-21&quot;) [1] &quot;2020-01-21&quot; ymd(&quot;20.01.21&quot;) [1] &quot;2020-01-21&quot; ymd(&quot;20/01/21&quot;) [1] &quot;2020-01-21&quot; ymd(&quot;200121&quot;) [1] &quot;2020-01-21&quot; mdy(&quot;January 21st, 2020&quot;) [1] &quot;2020-01-21&quot; dmy(&quot;21-Jan-2020&quot;) [1] &quot;2020-01-21&quot; Команды понимают не только английский (хоть и с трудом): dmy(&quot;21 янв 2020&quot;, locale = &quot;ru_RU.UTF-8&quot;) [1] &quot;2020-01-21&quot; dmy(&quot;21 янв. 2020&quot;, locale = &quot;ru_RU.UTF-8&quot;) [1] &quot;2020-01-21&quot; dmy(&quot;21 ян 2020&quot;, locale = &quot;ru_RU.UTF-8&quot;) [1] NA dmy(&quot;21 янва 2020&quot;, locale = &quot;ru_RU.UTF-8&quot;) [1] &quot;2020-01-21&quot; dmy(&quot;21 января 2020&quot;, locale = &quot;ru_RU.UTF-8&quot;) [1] NA dmy(&quot;21 январь 2020&quot;, locale = &quot;ru_RU.UTF-8&quot;) [1] &quot;2020-01-21&quot; dmy(&quot;21 Январь 2020&quot;, locale = &quot;ru_RU.UTF-8&quot;) [1] &quot;2020-01-21&quot; Аналогично сделаны команды состоящие из h, m, s: hms(&quot;20:01:02&quot;) [1] &quot;20H 1M 2S&quot; hm(&quot;20.01&quot;) [1] &quot;20H 1M 0S&quot; ms(&quot;23:59&quot;) [1] &quot;23M 59S&quot; Также существует команда make_datetime(), которая позволяет сделать дату из нескольких переменных: flights %&gt;% mutate(departure = make_datetime(year, month, day, hour, minute)) %&gt;% select(departure) 11.2 Извлечение компонентов даты Для извлечения компонентов даты используются функции year(), month(), week() (номер недели в году), mday() (day of the month), wday() (номер дня в неделе), yday() (номер дня в году), hour(), minute() и second(): date_example &lt;- flights$time_hour[1] date_example [1] &quot;2013-01-01 05:00:00 EST&quot; year(date_example) [1] 2013 month(date_example) [1] 1 month(date_example, label = TRUE) [1] Jan 12 Levels: Jan &lt; Feb &lt; Mar &lt; Apr &lt; May &lt; Jun &lt; Jul &lt; Aug &lt; Sep &lt; ... &lt; Dec month(date_example, label = TRUE, abbr = FALSE) [1] January 12 Levels: January &lt; February &lt; March &lt; April &lt; May &lt; June &lt; ... &lt; December month(date_example, label = TRUE, locale = &quot;ru_RU.UTF-8&quot;) [1] янв 12 Levels: янв &lt; фев &lt; мар &lt; апр &lt; мая &lt; июн &lt; июл &lt; авг &lt; сен &lt; ... &lt; дек week(date_example) [1] 1 mday(date_example) [1] 1 wday(date_example) [1] 3 wday(date_example, label = TRUE) [1] Tue Levels: Sun &lt; Mon &lt; Tue &lt; Wed &lt; Thu &lt; Fri &lt; Sat wday(date_example, label = TRUE, abbr = FALSE) [1] Tuesday 7 Levels: Sunday &lt; Monday &lt; Tuesday &lt; Wednesday &lt; Thursday &lt; ... &lt; Saturday wday(date_example, label = TRUE, locale = &quot;ru_RU.UTF-8&quot;) [1] Вт Levels: Вс &lt; Пн &lt; Вт &lt; Ср &lt; Чт &lt; Пт &lt; Сб yday(date_example) [1] 1 hour(date_example) [1] 5 minute(date_example) [1] 0 second(date_example) [1] 0 Так же есть функция leap_year(), которая сообщает информацию, является ли выбранный год високосным: leap_year(2019) [1] FALSE leap_year(2020) [1] TRUE Постройте график распределения полетов по дням недели из датасета flights пакета nycflights13. 11.3 Операции с датами Если взять две даты, то можно узнать разницу между ними и т. п.: ymd(&quot;2020-01-21&quot;) - ymd(&quot;2020-01-19&quot;) Time difference of 2 days ymd(&quot;2020-01-19&quot;) - ymd(&quot;2020-01-21&quot;) Time difference of -2 days Обратите внимание на результат работы этого выражения: hm(&quot;21:00&quot;) - hm(&quot;18:10&quot;) [1] &quot;3H -10M 0S&quot; Видимо, почему-то в таком использовании происходит поэлементная операция с часами, минутами, и секундами, так что в результате получаются отрицательные минуты. Однако, если использовать полные даты, то этого эффекта нет: ymd_hm(&quot;2020-01-21, 21:00&quot;) - ymd_hm(&quot;2020-01-21, 18:10&quot;) Time difference of 2.833333 hours ymd_hm(&quot;2020-01-21, 21:00&quot;) - hm(&quot;18:10&quot;) [1] &quot;2020-01-21 02:50:00 UTC&quot; Также существует функция difftime(), которая позволяет настраивать единицы, в которых выдается результат: difftime(ymd_hm(&quot;2020-01-21, 21:00&quot;), ymd_hm(&quot;2020-01-21, 18:10&quot;), units = &quot;mins&quot;) Time difference of 170 mins difftime(ymd_hm(&quot;2020-01-21, 21:00&quot;), ymd_hm(&quot;2020-01-21, 18:10&quot;), units = &quot;hours&quot;) Time difference of 2.833333 hours У меня есть шенгенская мультивиза на 90 дней. Я совершил несколько поездок в Европу и записал их в этот датасет. Определите, сколько дней я еще могу находиться в Евросоюзе? Однако простые даты, не являются временными отрезками, так что их нельзя складывать, вычитать, умножать и т. д. Для удобства операций в lubridate вводится несколько сущностей: periods — промежутки времени, которые игнорируют нерегулярности во времени, сразу прибавляя 1 к соответствующему разряду, вводятся функциями years(), months(), weeks(), days(), hours(), minutes(), seconds(), period() duration — промежутки времени, которые учитывают нерегулярности во времени, добавляя стандартную длительность единицы, вводятся функциями dyears(), dweeks(), ddays(), dhours(), dminutes(), dseconds(), duration() Рассмотрим несколько сложных случаев: високосный год ymd(&quot;2019-03-01&quot;)+years(1) [1] &quot;2020-03-01&quot; ymd(&quot;2019-03-01&quot;)+dyears(1) [1] &quot;2020-02-29 06:00:00 UTC&quot; переход на летнее время ymd_hms(&quot;2020-03-07 13:00:00&quot;, tz = &quot;America/New_York&quot;) + days(1) [1] &quot;2020-03-08 13:00:00 EDT&quot; ymd_hms(&quot;2020-03-07 13:00:00&quot;, tz = &quot;America/New_York&quot;) + ddays(1) [1] &quot;2020-03-08 14:00:00 EDT&quot; переход на зимнее время ymd_hms(&quot;2020-10-31 13:00:00&quot;, tz = &quot;America/New_York&quot;) + days(1) [1] &quot;2020-11-01 13:00:00 EST&quot; ymd_hms(&quot;2020-10-31 13:00:00&quot;, tz = &quot;America/New_York&quot;) + ddays(1) [1] &quot;2020-11-01 12:00:00 EST&quot; Последняя операция с датами, которую мы рассмотрим — округление: floor_date() — округление в меньшую сторону round_date() — математическое округление ceiling_date() — округление в большую сторону floor_date(ymd(&quot;2020-01-16&quot;), unit = &quot;month&quot;) [1] &quot;2020-01-01&quot; round_date(ymd(&quot;2020-01-16&quot;), unit = &quot;month&quot;) [1] &quot;2020-01-01&quot; round_date(ymd(&quot;2020-01-17&quot;), unit = &quot;month&quot;) [1] &quot;2020-02-01&quot; ceiling_date(ymd(&quot;2020-01-16&quot;), unit = &quot;month&quot;) [1] &quot;2020-02-01&quot; ceiling_date(ymd(&quot;2020-01-16&quot;), unit = &quot;year&quot;) [1] &quot;2021-01-01&quot; 11.4 Визуализация времени: данные Левада-центра Пакет tidyverse понимает переменные типа дата, и позволяет их фильтровать и визуализировать. Возьмем для примера датасет из проекта The Unwelcomed Мохамада А. Вэйкда (Mohamad A. Waked), содержащий информацию о месте и причинах смерти мигрантов и беженцев по всему миру с января 2014 года по июнь 2019 года. unwelcomed &lt;- read_csv(&quot;https://raw.githubusercontent.com/agricolamz/DS_for_DH/master/data/death_of_migrants_and_refugees_from_the_Unwelcomed_project.csv&quot;) unwelcomed %&gt;% mutate(date = dmy(date)) %&gt;% ggplot(aes(date, total_death_missing, color = collapsed_cause))+ geom_point()+ scale_y_log10()+ labs(y = &quot;number of death/missing&quot;) unwelcomed %&gt;% mutate(date = dmy(date)) %&gt;% filter(date &lt; dmy(&quot;1-1-2016&quot;)) %&gt;% ggplot(aes(date, total_death_missing, color = collapsed_cause))+ geom_point()+ scale_y_log10()+ labs(y = &quot;number of death/missing&quot;) Однако ко переменным со врменем не всегда относятся аккуратно. Рассмотрим график с сайта Левада-центра — российской негосударственной исследовательской организации, которая проводит социологические и маркетинговые исследования (график взят отсюда): На первый взгляд, в этом графике нет ничего странного, однако если присмотреться к динамической версии на сайте Левада-центра, можно обнаружить, что на идущие подряд измерения расположены на одинаковом расстоянии друг от друга, например, 05.2014, 07.2014, 11.2014. Вот здесь можно скачать данные, по которым строился этот график. Вот как он выглядит, если считать временную переменную как время levada &lt;- read_csv(&quot;https://raw.githubusercontent.com/agricolamz/DS_for_DH/master/data/2019.01_levada_countries.csv&quot;) levada %&gt;% mutate(date = str_c(&quot;1-&quot;, date), date = dmy(date)) %&gt;% filter(towards == &quot;USA&quot;) %&gt;% pivot_longer(names_to = &quot;answer&quot;, values_to = &quot;number&quot;, good:bad) %&gt;% ggplot(aes(date, number, color = answer))+ geom_line()+ labs(x = &quot;&quot;, y = &quot;&quot;, caption = &quot;данные Левада-центра&quot;)+ scale_y_continuous(limits = c(0, 100))+ theme(legend.position = c(0.1, 0.9), legend.title = element_blank()) На графике теперь видно, насколько регулярно проводились опросы: в начале 90-ых опросы проводились реже, потом часто, потом в районе 2010 года был перерыв. График Левада-центра можно оправдать тем, что они представляют данные от замера к замеру, так что по оси x находится как бы категориальная переменная со значениями замер 05.2014, замер 07.2014, замер 11.2014 и т. д. Однако это совсем неочевидно из графика. Используя весь датасет Левада-центра, постройте следующий график. "],
["сбор-данных-из-интернета-rvest.html", "12 Сбор данных из интернета: rvest 12.1 Введение 12.2 Работа с пакетом rvest 12.3 Использование атрибута class", " 12 Сбор данных из интернета: rvest library(tidyverse) Достаточно часто данные не ходят упакованные в готовые файлы .csv или .json. Иногда данные лежат в открытом доступе на какой-нибудь странице в интернете (например, таблицы Левада-центра из предыдущего занятия). А иногда никто и не думал, что что-то станет данными: заголовки и тексты новостей, комментарии, твиты и т. п. В этом разделе мы обсудим основы извлечения данных из вебстраниц. 12.1 Введение Любая html-документ — это обычный xml файл. Обычно самый верхний узел называется html, который имеет два дочерних узла head и body. Каждый html-документ является инструкцией для браузера, в которой говориться что и в каком порядке нужно отображать, но одновременно эта инструкция является кодом, который мы можем посмотреть. В большинстве браузеров это можно сделать при помощи горячих клавиш Ctrl+U, в Apple Safari — Cmd+Option+U. Кроме того есть режим разработчика, который позволяет делать много всего, в том числе наводить на какой-то объект в браузере и узнавать какой фрагмент кода ему соответствует (этот режим можно вызвать, нажав F12 или Ctrl+Shift+I, в Apple Safari вроде нет горячих клавиш и нужно вызывать как-то из меню). Большинство узлов html-документа состоят из тег узла, например, p значения узла, например, Жили-были три медведя. id (уникальные объекты в html-документе), class (неуникальные объекты в html-документе) и другием атрибуты узла Например: &lt;p class=&quot;story&quot; some_atribute = 42&gt;Жили-были три медведя.&lt;/p&gt; Некоторые html-документ не являются статическими и изменяются после того, как страница была открыта при помощи JavaScript’а. Это динамичность может быть скрытой, когда пользователь лишь видит, как открывается страница, а иногда может быть завязана на некоторые действия пользователя. Информацию со статических страниц собирать достаточно просто и для этого нам хватит пакета rvest. C динамическими сайтами все иногда несколько сложнее. Иногда на диномических страницах можно отследить источник данных, посмотрев вкладку Network в режиме разработчика (ведь откуда-то эти данные появляются в браузере, правда?). Иногда необходимо делать POST и GET запросы, хранить cookies, и т. п. — все это можно сделать при помощи пакета httr, а в самых сложных случаях (когда JavaScript JavaScript погоняет) поможет пакет RSelenium. 12.2 Работа с пакетом rvest Пакет rvest позволяет скачивать страницы и потом их обрабатывать. Включим библиотеку: library(rvest) Attaching package: &#39;rvest&#39; The following object is masked from &#39;package:purrr&#39;: pluck The following object is masked from &#39;package:readr&#39;: guess_encoding 12.2.1 Простой случай В качестве примера рассмотрим сайт Центра цифровых гуманитарных исследований НИУ ВШЭ: source &lt;- read_html(&quot;https://hum.hse.ru/digital&quot;) Объект source является списком, который содержит html-страницу. Давайте допустим, что мы хотем скачать все заголовки новостей, т. е. нам нужны значения всех узло h2. Функция html_nodes() позволяет вычленить исключительно узлы с каким-то тегом из всего xml-файла. source %&gt;% html_nodes(&quot;h2&quot;) {xml_nodeset (10)} [1] &lt;h2 class=&quot;first_child &quot;&gt;&lt;a title=&quot;Цифровые методы и искусство XXI века: ... [2] &lt;h2 class=&quot;first_child &quot;&gt;&lt;a title=&quot;Отечественные записки 2.0: наш прогре ... [3] &lt;h2 class=&quot;first_child &quot;&gt;&lt;a title=&quot;Проведите мастерскую на V Московско-т ... [4] &lt;h2 class=&quot;first_child &quot;&gt;&lt;a title=&quot;Лайфхаки онлайна: оживить лекцию с iP ... [5] &lt;h2 class=&quot;first_child &quot;&gt;&lt;a title=&quot;Лайфхаки онлайна: антистрессовые тест ... [6] &lt;h2 class=&quot;first_child &quot;&gt;&lt;a title=&quot;Лайфхаки онлайна: как организовать пр ... [7] &lt;h2 class=&quot;first_child &quot;&gt;&lt;a title=&quot;Лайфхаки онлайна: вовлекаем студентов ... [8] &lt;h2 class=&quot;first_child &quot;&gt;&lt;a title=&quot;Цифровые гуманитарии выступили на DH ... [9] &lt;h2 class=&quot;first_child &quot;&gt;&lt;a title=&quot;Командные DH-проекты: «Instagram Л.Н. ... [10] &lt;h2 class=&quot;first_child &quot;&gt;&lt;a title=&quot;Цифровые гуманитарии прокачались в ге ... Теперь если мы хотим обратиться к значениям этих узлов, мы можем использовать функцию html_text() source %&gt;% html_nodes(&quot;h2&quot;) %&gt;% html_text() [1] &quot;Цифровые методы и искусство XXI века: семинар в Государственном Институте Искусствознания (ГИИ)&quot; [2] &quot;Отечественные записки 2.0: наш прогресс после гранта «Инфокультуры»&quot; [3] &quot;Проведите мастерскую на V Московско-тартуской DH-школе! (call for tutorials)&quot; [4] &quot;Лайфхаки онлайна: оживить лекцию с iPad и Apple Pencil&quot; [5] &quot;Лайфхаки онлайна: антистрессовые тесты и Zoom в костюме лемура&quot; [6] &quot;Лайфхаки онлайна: как организовать проектную работу и не застрять&quot; [7] &quot;Лайфхаки онлайна: вовлекаем студентов в занятие через Kahoot&quot; [8] &quot;Цифровые гуманитарии выступили на DH Meetup в Минске&quot; [9] &quot;Командные DH-проекты: «Instagram Л.Н. Толстого»&quot; [10] &quot;Цифровые гуманитарии прокачались в геоинформатике&quot; Если мы откроем превью узла h2 (команда View()), то мы увидим что-то такое: Эта схема показывает, что каждый узел h2 содержит узел a который содержит три атрибута: title и href. Вложенность отображается знаком &gt;, а обращаться к атрибутам можно, используя функцию html_attr(): source %&gt;% html_nodes(&quot;h2 &gt; a&quot;) %&gt;% html_attr(&quot;title&quot;) -&gt; titles source %&gt;% html_nodes(&quot;h2 &gt; a&quot;) %&gt;% html_attr(&quot;href&quot;) -&gt; links tibble(titles, links) Как видно из получившейся таблицы, на первой странице сайта всего 10 новостей. А что если мы хотим скачать все новости? Исследовав страницу Центра цифровых гуманитарных исследований, становится понятно, что все новые страницы генерятся по одному и тому же паттерну: https://hum.hse.ru/digital/news/page2.html https://hum.hse.ru/digital/news/page3.html … https://hum.hse.ru/digital/news/page6.html и даже на первую страницу, на которую мы попали по короткому адресу &lt;hum.hse.ru/digital&gt;, можно также попасть по этому адресу https://hum.hse.ru/digital/news/page1.html Сгенерим список страниц: str_c(&quot;https://hum.hse.ru/digital/news/page&quot;, 1:6, &quot;.html&quot;) [1] &quot;https://hum.hse.ru/digital/news/page1.html&quot; [2] &quot;https://hum.hse.ru/digital/news/page2.html&quot; [3] &quot;https://hum.hse.ru/digital/news/page3.html&quot; [4] &quot;https://hum.hse.ru/digital/news/page4.html&quot; [5] &quot;https://hum.hse.ru/digital/news/page5.html&quot; [6] &quot;https://hum.hse.ru/digital/news/page6.html&quot; А теперь сделаем функцию, которая ходит по страницам и все собирает map_dfr(str_c(&quot;https://hum.hse.ru/digital/news/page&quot;, 1:6, &quot;.html&quot;), function(x){ source &lt;- read_html(x) source %&gt;% html_nodes(&quot;h2 &gt; a&quot;) %&gt;% html_attr(&quot;title&quot;) -&gt; titles source %&gt;% html_nodes(&quot;h2 &gt; a&quot;) %&gt;% html_attr(&quot;href&quot;) -&gt; links tibble(titles, links) }) -&gt; df_news df_news Создайте датафрейм, содержащий заголовки и ссылки на новости со страницы Магистерской программы «Цифровые методы в гуманитарных науках». 12.3 Использование атрибута class Допустим, нас интересует дата создания новости на странице Центра цифровых гуманитарных исследований. Исследовав сайт, легко обнаружить, что информация о дате создания новости хранится в теге span. Однако, если мы попробуем использовать лишь эту информацию, то мы получим много лишнего: source %&gt;% html_nodes(&quot;span&quot;) %&gt;% html_text() %&gt;% head(20) [1] &quot;✖&quot; [2] &quot;\\n\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t&quot; [3] &quot;&quot; [4] &quot;\\n\\t\\t\\t\\t\\t\\t\\tvision&quot; [5] &quot;\\n\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tНайти\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tРасширенный поиск по сайту\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t&quot; [6] &quot;&quot; [7] &quot;Национальный исследовательский университет «Высшая школа экономики»&quot; [8] &quot;Учебные подразделения&quot; [9] &quot;Факультет гуманитарных наук&quot; [10] &quot;\\n\\t\\t\\t\\t\\t\\tЦентр цифровых гуманитарных исследований НИУ ВШЭ\\n\\t\\t\\t\\t\\t&quot; [11] &quot;Центр цифровых гуманитарных исследований НИУ ВШЭ&quot; [12] &quot;\\n\\t\\t\\t\\t\\t\\tvision&quot; [13] &quot;&quot; [14] &quot;&quot; [15] &quot;Главное&quot; [16] &quot;Школы по Digital Humanities&quot; [17] &quot;&quot; [18] &quot;Приглашенные исследователи&quot; [19] &quot;&quot; [20] &quot;Видео&quot; Дело в том, что тег span имеется у многих других объектов на странице. Однако, если присмотреться к значениям, которые мы находим в режиме разработчика, можно заметить следующее: Если посмотреть код, то мы увидем следующее: ... &lt;span class=&quot;post__date&quot;&gt; 17 декабря, 2019 г.&lt;/span&gt; ... Чтобы обратиться к таким элементам нужно использовать точку: source %&gt;% html_nodes(&quot;span.post__date&quot;) %&gt;% html_text() [1] &quot;\\n\\t\\t\\t\\t\\t\\t29 сентября\\n\\t\\t\\t\\t\\t&quot; [2] &quot;\\n\\t\\t\\t\\t\\t\\t23 июня\\n\\t\\t\\t\\t\\t&quot; [3] &quot;\\n\\t\\t\\t\\t\\t\\t16 июня\\n\\t\\t\\t\\t\\t&quot; [4] &quot;\\n\\t\\t\\t\\t\\t\\t15 мая\\n\\t\\t\\t\\t\\t&quot; [5] &quot;\\n\\t\\t\\t\\t\\t\\t8 мая\\n\\t\\t\\t\\t\\t&quot; [6] &quot;\\n\\t\\t\\t\\t\\t\\t2 мая\\n\\t\\t\\t\\t\\t&quot; [7] &quot;\\n\\t\\t\\t\\t\\t\\t23 апреля\\n\\t\\t\\t\\t\\t&quot; [8] &quot;\\n\\t\\t\\t\\t\\t\\t1 апреля\\n\\t\\t\\t\\t\\t&quot; [9] &quot;\\n\\t\\t\\t\\t\\t\\t30 марта\\n\\t\\t\\t\\t\\t&quot; [10] &quot;\\n\\t\\t\\t\\t\\t\\t23 марта\\n\\t\\t\\t\\t\\t&quot; Почистим: source %&gt;% html_nodes(&quot;span.post__date&quot;) %&gt;% html_text() %&gt;% str_remove_all(&quot;\\\\n|\\\\t&quot;) [1] &quot;29 сентября&quot; &quot;23 июня&quot; &quot;16 июня&quot; &quot;15 мая&quot; &quot;8 мая&quot; [6] &quot;2 мая&quot; &quot;23 апреля&quot; &quot;1 апреля&quot; &quot;30 марта&quot; &quot;23 марта&quot; Постройте график, показывающий количество новостей Центра цифровых гуманитарных исследований за каждый месяц. 12.3.1 Чтение таблиц Таблицы, которые хранятся на html-странице можно считывать как таблицы (а, не например, построчно). Рассмотрим вкладку “Число студентов и вакантные места” на сайте Магистерской программы «Цифровые методы в гуманитарных науках»: source &lt;- read_html(&quot;https://www.hse.ru/ma/dh/vacant&quot;) source %&gt;% html_node(&quot;table&quot;) %&gt;% html_table() Функция html_node() возвращает первую таблицу на странице. В предыдущих разделах мы использовали функцию html_nodes(), которая вытаскивает все узлы с соответствующими атрибутами: source %&gt;% html_nodes(&quot;table&quot;) %&gt;% html_table() -&gt; l str(l) List of 3 $ :&#39;data.frame&#39;: 4 obs. of 2 variables: ..$ X1: chr [1:4] &quot;Общий контингент студентов&quot; &quot;из них на местах, финансируемых за счет субсидий из федерального бюджета на выполнение государственного задания&quot; &quot;из них на местах по договорам об оказании платных образовательных услуг&quot; &quot;из них на местах, финансируемых в рамках межправительственных соглашений&quot; ..$ X2: int [1:4] 21 18 3 0 $ :&#39;data.frame&#39;: 2 obs. of 2 variables: ..$ X1: chr [1:2] &quot;1 курс&quot; &quot;2 курс&quot; ..$ X2: int [1:2] 0 2 $ :&#39;data.frame&#39;: 3 obs. of 3 variables: ..$ X1: chr [1:3] &quot;&quot; &quot;1 курс&quot; &quot;2 курс&quot; ..$ X2: chr [1:3] &quot;места, финансируемые за счет субсидий из федерального бюджета на выполнение государственного задания&quot; &quot;0&quot; &quot;0&quot; ..$ X3: chr [1:3] &quot;места по договорам об оказании платных образовательных услуг&quot; &quot;0&quot; &quot;0&quot; Получился список (объект типа list), в котором содержаться все таблицы со страницы. Так что, для того, чтобы работать с конкретной таблицей нужно использовать индексацию списков: l[[1]] 12.3.2 Некоторые советы Некоторые ресурсы блокируют возможность скачивать из них данные. Обычно это делается на уровне сервера, который видит, что с какого-то IP приходит по 5 запросов в секунду и ограничивает доступ, на случай если вы начинаете DDoS атаку. Если сервер не отдает вам данные или отдает, но раз в какой-то временной промежуток, следует прописать в вашей программе ожидание (команда Sys.sleep()). Некоторые сайты, например, Википедия, специально архивирует данные, чтобы люди не пытались ее обкачать: вот страница, на которой это подробно описано. Вот cheatsheet по теории вероятности. "],
["описательная-статистика-распределения.html", "13 Описательная статистика, распределения 13.1 Описательная статистика 13.2 От частотности к вероятности", " 13 Описательная статистика, распределения library(tidyverse) Мы обсуждали разные типы переменных: В данном занятии мы сосредоточимся на категориальных и числовых переменных. 13.1 Описательная статистика Описательная статистика — это общий термин, в который включают понятия позволяющие оценить тренд в данных. 13.1.1 Категориальные переменные Для категориальных переменных описательных статистик не так много: количество частоты энтропия Возьмем для примера датасет starwars. Мы легко можем посчитать количество существо разных расс: starwars %&gt;% count(species, sort = TRUE) Мы также легко можем посчитать долю существо разных расс: starwars %&gt;% count(species, sort = TRUE) %&gt;% mutate(ratio = n/sum(n)) Долю легко перевести в проценты: starwars %&gt;% count(species, sort = TRUE) %&gt;% mutate(ratio = n/sum(n)*100) Мы также легко можем посчитать энтропию. В том виде, как ее сформулировал Клод Шеннон, формула выглядит так: \\[H = -\\sum_{i=1}^n p_i\\times\\log_2(p_i),\\ где\\] \\(H\\) — энтропия \\(p_i\\) — доля \\(i\\)-того независимого исхода из всех независимых исходов starwars %&gt;% count(species, sort = TRUE) %&gt;% mutate(ratio = n/sum(n)) %&gt;% summarise(entropy = -sum(ratio*log2(ratio))) Что показывает эта мера? Рассмотрим следующий тиббл: tibble(x = c(&quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;b&quot;, &quot;a&quot;, &quot;b&quot;, &quot;b&quot;, &quot;c&quot;, &quot;a&quot;, &quot;a&quot;), group = rep(c(&quot;first&quot;, &quot;second&quot;, &quot;third&quot;), each = 6), id = rep(1:6, 3)) %&gt;% pivot_wider(names_from = group, values_from = x) Давайте посчитаем энтропию для каждой группы: tibble(x = c(&quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;b&quot;, &quot;a&quot;, &quot;b&quot;, &quot;b&quot;, &quot;c&quot;, &quot;a&quot;, &quot;a&quot;), group = rep(c(&quot;first&quot;, &quot;second&quot;, &quot;third&quot;), each = 6)) %&gt;% count(group, x, sort = TRUE) %&gt;% group_by(group) %&gt;% mutate(ratio = n/sum(n)) %&gt;% summarise(entropy = -sum(ratio*log2(ratio))) `summarise()` ungrouping output (override with `.groups` argument) Как видно, чем более разнообразна группа, тем выше энтропия. Посмотрим еще на такой тибл: tibble(x = c(&quot;a&quot;, &quot;a&quot;, &quot;b&quot;, &quot;a&quot;, &quot;с&quot;, &quot;a&quot;, &quot;a&quot;, &quot;b&quot;, &quot;b&quot;, &quot;c&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;b&quot;, &quot;b&quot;, &quot;c&quot;, &quot;с&quot;, &quot;a&quot;), group = rep(c(&quot;first&quot;, &quot;second&quot;, &quot;third&quot;), each = 6), id = rep(1:6, 3)) %&gt;% pivot_wider(names_from = group, values_from = x) tibble(x = c(&quot;a&quot;, &quot;a&quot;, &quot;b&quot;, &quot;a&quot;, &quot;с&quot;, &quot;a&quot;, &quot;a&quot;, &quot;b&quot;, &quot;b&quot;, &quot;c&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;b&quot;, &quot;b&quot;, &quot;c&quot;, &quot;с&quot;, &quot;a&quot;), group = rep(c(&quot;first&quot;, &quot;second&quot;, &quot;third&quot;), each = 6)) %&gt;% count(group, x, sort = TRUE) %&gt;% group_by(group) %&gt;% mutate(ratio = n/sum(n)) %&gt;% summarise(entropy = -sum(ratio*log2(ratio))) `summarise()` ungrouping output (override with `.groups` argument) Как видно, чем “однороднее” группы, тем выше энтропия. Влияет ли порядок следования элементов в векторе на значение энтропии? да нет Посчитайте значение энтропии для переменных clarity, color и cut из датасета diamonds. У какой переменной значение энтропии наибольшее? clarity color cut 13.1.2 Числовые переменные Для числовых значений описательные статистики в целом предсказуемые: diamonds %&gt;% summarise(mean = mean(price), median = median(price), quantile_0.5 = quantile(price, 0.5), # квантиль quantile_0.25 = quantile(price, 0.25), quantile_0.1 = quantile(price, 0.1), min = min(price), max = max(price), var = var(price), # дисперсия sd = sd(price)) # cреднеквадратическое отклонение Смещенная оценка дисперсии выборки \\(X = {x_1, x_2, ..., x_n}\\): \\[\\sigma^2 = \\frac{1}{n}\\sum_{i = 1}^n(x_i - \\mu)^2,\\ где\\] \\(x_i\\) — i-тый элемент выборки X \\(\\mu\\) — среднее Несмещенная оценка дисперсии выборки \\(X = {x_1, x_2, ..., x_n}\\): \\[\\sigma^2 = \\frac{1}{n-1}\\sum_{i = 1}^n(x_i - \\mu)^2\\] Вот ссылка на видео, в котором объясняется, почему первая оценка смещенная. 13.2 От частотности к вероятности 13.2.1 Категориальная переменная Возьмем какой-нибудь простой случай двух взаимоисключающих исходов. Какая доля имен героев из датасета starwars начинается на букву B? Ответ округлите до 3 знаков после запятой. Мы получили такой результат на основании 9 успехов из 87 наблюдений. Но, что если они там еще чего-то наснимают? Какова вероятность, что в новом фильме будет герой на “B”, если предположить, что создатели стараются держать равновесие? 0.103? Но если там будет 13 новых героев, то полученная нами доля не будет иметь смысла, ведь 13*0.103 = 1.339. Для ответа на такие вопросы обычно используют биномиальное распределение. \\[P(k | n, p) = \\frac{n!}{k!(n-k)!} \\times p^k \\times (1-p)^{n-k} = {n \\choose k} \\times p^k \\times (1-p)^{n-k}\\] \\[ 0 \\leq p \\leq 1; n, k &gt; 0,\\ где\\] n — общее число наблюдений k — число успехов p — предполагаемая исследователем вероятность успеха Таким образом, если мы считаем вероятность 0.103 верной для данного процесса, то тогда вероятность не увидеть новых героев на букву “B” вероятнее, чем увидеть 3 или 5: Теперь мы сделали шаг в сторону вероятностной модели: все что нужно знать, что случаи двух взаимоисключающих исходов следует моделировать при помощи биномиального распределения. 13.2.2 Числовая переменная С числовой переменной все устроено похожим образом: дотплот, гистограмма, функция плотности. starwars %&gt;% ggplot(aes(height))+ geom_dotplot(method=&quot;histodot&quot;) `stat_bindot()` using `bins = 30`. Pick better value with `binwidth`. starwars %&gt;% ggplot(aes(height))+ geom_histogram(alpha = 0.5)+ geom_dotplot(method=&quot;histodot&quot;) `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. `stat_bindot()` using `bins = 30`. Pick better value with `binwidth`. starwars %&gt;% ggplot(aes(height))+ geom_histogram(alpha = 0.5, binwidth = 20)+ geom_dotplot(method=&quot;histodot&quot;) `stat_bindot()` using `bins = 30`. Pick better value with `binwidth`. starwars %&gt;% ggplot(aes(height))+ geom_histogram(alpha = 0.5, binwidth = 30)+ geom_dotplot(method=&quot;histodot&quot;) `stat_bindot()` using `bins = 30`. Pick better value with `binwidth`. starwars %&gt;% ggplot(aes(height, y =..density..))+ geom_histogram(alpha = 0.5, binwidth = 30)+ geom_density() Мы можем предположить, что генеральная совокупность можно описать нормальным распределением. \\[P(x) = \\frac{1}{\\sigma\\sqrt{2\\pi}}\\times e^{-\\frac{\\left(x-\\mu\\right)^2}{2\\sigma^2}}\\] \\[\\mu \\in \\mathbb{R}; \\sigma^2 &gt; 0,\\ где\\] \\(\\mu\\) — среднее \\(\\sigma^2\\) — среднеквадратическое отклонение 13.2.3 Распределения В R встроено какое-то количество известных распределений. Все они представлены четырьмя функциями: d... (функция плотности, probability density function), p... (функция распределения, cumulative distribution function) — [интеграл площади под кривой или сумма всех значений] от начала до указанной квантили q... (обратная функции распределения, inverse cumulative distribution function) — значение p-той квантили распределения и r... (рандомные числа из заданного распределения). Рассмотрим все это на примере нормального распределения. tibble(x = 1:100, PDF = dnorm(x = x, mean = 50, sd = 10)) %&gt;% ggplot(aes(x, PDF))+ geom_point()+ labs(title = &quot;PDF нормального распределения (μ = 50, σ = 10)&quot;) tibble(x = 1:100, CDF = pnorm(x, mean = 50, sd = 10)) %&gt;% ggplot(aes(x, CDF))+ geom_point()+ labs(title = &quot;CDF нормального распределения (μ = 50, σ = 10)&quot;) tibble(quantiles = seq(0, 1, by = 0.01), value = qnorm(quantiles, mean = 50, sd = 10)) %&gt;% ggplot(aes(quantiles, value))+ geom_point()+ labs(title = &quot;inverse CDF нормального распределения (μ = 50, σ = 10)&quot;) tibble(sample = rnorm(100, mean = 50, sd = 10)) %&gt;% ggplot(aes(sample))+ geom_histogram()+ labs(title = &quot;выборка нормально распределенных чисел (μ = 50, σ = 10)&quot;) Если не использовать set.seed(), то результат работы рандомизатора нельзя будет повторить. Аналогично можно использовать функции dbinom(), pbinom(), qbinom() и rbinom() для биномиального распределения, а также ..t() для распределения Стьюдента, ...chisq() для распределения хи-квадрат и т. п. Биномиальное и нормальное распределения не единственные распределения, которые придумали люди: вот ресурс, на котором сделана попытка собрать все распределения и визуализировать связи между ними; вот приложение, позволяющие исследовать разные распределения. Рассмотрим задачу, которую обсуждали выше с именами героев из датасета strawars. Посчитайте значение функции плотности в точке 3 для биномиального распределения с вероятностью успеха 0.103. (округление до 3 знаков после запятой). 13.2.4 Давайте посчитаем вероятности Какова вероятность, что мы в новом фильме будет 3 и более новых героев на “B”? Это можно вычислить при помощи функции dbinom(), pbinom(): sum(dbinom(3:13, size = 13, prob = 0.103)) [1] 0.1429756 1-pbinom(2, size = 13, prob = 0.103) [1] 0.1429756 Если предположить, что рост героев Звездных войн постоянен и описывается нормальным распределением со средним 174 и стандартным откланением 30, какова вероятность что в новом фильме встретиться герой ростом между 200 и 230? `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. integrate(function(x){dnorm(x, mean = 174, sd = 30)}, lower = 200, upper = 230) 0.1620883 with absolute error &lt; 0.0000000000000018 pnorm(230, mean = 174, sd = 30) - pnorm(200, mean = 174, sd = 30) [1] 0.1620883 "],
["проверка-статистических-гипотез.html", "14 Проверка статистических гипотез 14.1 О статистике 14.2 Проверка нулевой гипотезы 14.3 Классификация статистических тестов 14.4 Одновыборочные тесты 14.5 Двухвыборочные тесты 14.6 Послесловие 14.7 Рассказы Чехова и Зощенко 14.8 Obamacare", " 14 Проверка статистических гипотез 14.1 О статистике Статистика позволяет оценить какие-то стохастические процессы, которые происходят в мире. Центральное понятие статистики — генеральная совокупность, множество всех элементов какой-либо группы, параметр которой мы хотим оценить: все жители РФ при оценке роста; все возможные тексты писателя (реальные и потенциальные) при оценке частоты встречаемости каких-либо элементов; все возможные курсы валют при попытке оценить курс валюты завтра; все страны при попытке оценить количество уникальных имен в странах мира и т. д. Весь статистический анализ строится на основе предположений о свойствах генеральной совокупности и некоторой выборки из генеральной совкупности. Так если мы не можем взять всю генеральную совокупность и оценить ее параметр θ (средний рост, доля встречаемости гласных в текстах писателя и т. д.), то мы берем случайную выборку из генеральной совокупности и оцениваем параметр выборки θ̂ и делаем предположения о том, как параметр может быть устроен в генеральной совокупности. Если выборка, которой мы располагаем содержит в себе генеральную совокупность, то нужда оценить некоторый параметр казалось бы отпадает (в таком случае задача переходит в область теории вероятностей): Какая доля слов “не” в корпусе текстов Пушкина? Однако бывают задачи, которые даже обладая генеральной совокупностью, можно переформулировать в статистические: Какая доля слов “не” будет в свежеобнаруженном тексте Пушкина длины \\(n\\)? Исследователь каждый год ездит на остров Суматра и обнаруживает каждый год несколько неизвестных науке видов ящериц. С каждый годом он обнаруживает неизвестные науке виды ящериц все реже и реже. Можем ли мы оценить сколько ящериц неизвестного вида исследователь найдет в этом году? Существует несколько школ статистического анализа: фриквентистская и байесовская. Мы будем работать в рамках фриквентистской. 14.2 Проверка нулевой гипотезы Теперь мы обсудим стандартный трюк, который получил большую популярность в XX веке, и сейчас повсеместно продолжает использоваться. Этот трюк, к сожалению, помогает лишь показать, что что-то отличается, так что мы немножко переиначим наши задачи. Представим себе, что я исследую героев Звездных войн. Я верю, что герои с именем на “B” встречаются в Звездных войнах с вероятностью 0.103. В новом фильме из 13 новых персонажей 4 имеют имя на “B”, т. е. мы наблюдаем долю 0.31. Является ли разница межда наблюдениями 0.31 и ожиданиями 0.103 статистически значимой? Создадим две гипотезы: \\(H_0\\) — (нулевая гипотеза) разница не является статистически значимой, т. е. наблюдаемые данные могут происходят из ожидаемого распределения. \\(H_1\\) — (альтернативная гипотеза) разница является статистически значимой, т. е. наблюдаемые данные не могут происходят из ожидаемого распределения. Нулевая гипотеза — это гипотеза, которую каждый исследователь хочет отвергнуть, и принять альтернативную. После применения статистического критерия (каждый критерий зависит от конкретного статистического теста, а выбор теста зависит от типа данных) исследователь считает вероятность наблюдать такой или более экстремальный результат, если верна нулевая гипотеза (p-value, p-уровень значимости): sum(dbinom(4:13, size = 13, prob = 0.103)) [1] 0.03758494 Это же можно сделать при помощи следующей функции: binom.test(x = 4, n = 13, p = 0.103, alternative = &quot;greater&quot;) Exact binomial test data: 4 and 13 number of successes = 4, number of trials = 13, p-value = 0.03758 alternative hypothesis: true probability of success is greater than 0.103 95 percent confidence interval: 0.1126658 1.0000000 sample estimates: probability of success 0.3076923 Дальше в разных науках принимают некоторое критическое значение (в большинстве случаев это 0.05), и если p-value меньше данного заветного значения, считается, что тогда разница является статистически значимой. If all else fails, use “significant at a p&gt;0.05 level” and hope no one notices (https://xkcd.com/1478/) 14.3 Классификация статистических тестов 14.3.1 Количество выборок Одновыборочные тесты (one-sample tests) Двухвыборочные тесты (two-sample tests) многовыборочные тесты (multiple-sample tests) 14.3.2 Направление односторонние двусторонние 14.3.3 Парные vs. непарные непарные — если наблюдения в одной группе независимы друг от друга (мужчины vs. женщины, пожилые vs. молодые? и т. д.) парные — если наблюдения имеют соответствия между собой (настроение до пары R и после, измерение температуры обычным и инфракрасным термометром, и т. п.) 14.3.4 Параметрические vs. непараметрические Некоторые тесты работают с предположениями об устройстве данных. В нашем случае данные предположения: нормальность распределения. 14.3.5 Классификация тестов распределение тип группы # групп тест категориальные с заданным значением 1 биномиальный тест, χ² категориальные независимые 2 χ², тест Фишера, G-test (LL-score) категориальные зависимые 2 критерий Мак-Нимара нормальное с заданным значением 1 одновыборочный t-test нормальное независимые 2 t-test для независимых выборок нормальное зависимые 2 парный t-test не нормальное с заданным значением 1 критерий Уилкоксона не нормальное независимые 2 критерий Манна-Уитни не нормальное зависимые 2 критерий Уилкоксона 14.4 Одновыборочные тесты 14.4.1 Биномиальный тест Мы уже обсудили биномиальный тест выше. В частотном словаре [Ляшевская Шаров 2009], созданном на базе корпуса объемом 92 млн. словоупотреблений, существительное кенгуру имеет абсолютную частотность 0.0000021, а предлог к — 0.005389 (его вариант ко в расчет не берется). В некотором тексте длиной 61981 слов существительное кенгуру встречается 58 раз, а предлог к — 254. Можем ли мы считать, что это обычный ничем не примечательный результат? # кенгуру binom.test(x = 58, n = 61981, p = 0.0000021) Exact binomial test data: 58 and 61981 number of successes = 58, number of trials = 61981, p-value &lt; 0.00000000000000022 alternative hypothesis: true probability of success is not equal to 0.0000021 95 percent confidence interval: 0.0007106442 0.0012095348 sample estimates: probability of success 0.0009357706 # к binom.test(x = 254, n = 61981, p = 0.005389) Exact binomial test data: 254 and 61981 number of successes = 254, number of trials = 61981, p-value = 0.000005862 alternative hypothesis: true probability of success is not equal to 0.005389 95 percent confidence interval: 0.003610363 0.004632987 sample estimates: probability of success 0.00409803 Мы посчитали количество букв а в рассказе А. П. Чехова и получили 58 букв из рассказа длинной 699 букв (пробелы и латинские буквы выкинуты). Является ли этот результат неожиданным, если мы ожидали долю 0.08. Приведите значение p-value с точностью до 2 знаком после запятой. 14.4.2 Одновыборочный t-тест Из статьи С. Степановой 2011 мы знаем, что носители русского языка в среднем говорят 5.31 слога в секунду со стандартным отклонением 1,93 (мужчины 5.46 слога в секунду со средним отклонением 2.02, женщины 5.23 слога в секунду со средним отклонением 1.84, дети 3.86 слога в секунду со средним отклонением 1.67). Мы опросили 30 носителей деревни N и выяснили, что средняя равна 7, а стандартное отклонение равно 2. Является ли данная разницастатистически значимой? set.seed(42) data &lt;- rnorm(n = 30, mean = 7, sd = 2) tibble(data) %&gt;% ggplot(aes(data))+ geom_dotplot()+ geom_vline(xintercept = mean(data), size = 2, linetype = 2)+ geom_vline(xintercept = 5.31, size = 2, linetype = 2, color = &quot;red&quot;)+ annotate(geom = &quot;text&quot;, x = 3, color = &quot;red&quot;, y = 0.75, label = &quot;среднее согласно\\n[Степанова 2011]&quot;, size = 5) t.test(data, mu = 5.31) One Sample t-test data: data t = 3.9871, df = 29, p-value = 0.0004143 alternative hypothesis: true mean is not equal to 5.31 95 percent confidence interval: 6.199903 8.074444 sample estimates: mean of x 7.137174 Создайте 30 нормально распределенных наблюдений со средним 6 и стандартным отклонением 2, используя set.seed(42) и сравните полученные данные с результатами Степановой. Является ли разница статистически значимой? Приведите значение p-value с точностью до 2 знаком после запятой. t-тест имеет несколько предположений относительно структуры данных: нормальность распределения данных гомоскедостичность (гомогенность) дисперсии 14.4.3 Тест Уилкоксона Если данные не нормально распределено, обычно используют критерий Уилкоксона set.seed(42) data &lt;- rlnorm(n = 30, mean = 1.8, sd = 0.1) tibble(data) %&gt;% ggplot(aes(data))+ geom_dotplot()+ geom_vline(xintercept = mean(data), size = 2, linetype = 2)+ geom_vline(xintercept = 5.31, size = 2, linetype = 2, color = &quot;red&quot;)+ annotate(geom = &quot;text&quot;, x = 4.9, color = &quot;red&quot;, y = 0.75, label = &quot;среднее согласно\\n[Степанова 2011]&quot;, size = 5) wilcox.test(data, mu = 5.31) Wilcoxon signed rank exact test data: data V = 436, p-value = 0.000003239 alternative hypothesis: true location is not equal to 5.31 14.5 Двухвыборочные тесты 14.5.1 Двухвыборочный t-тест Логика двухвыборочного теста такая же как одновыборочного: set.seed(42) sample_1 &lt;- rnorm(25, mean = 40, sd = 5) sample_2 &lt;- rnorm(25, mean = 50, sd = 4.5) tibble(sample_1, sample_2) %&gt;% pivot_longer(names_to = &quot;dataset&quot;, values_to = &quot;values&quot;, sample_1:sample_2) %&gt;% group_by(dataset) %&gt;% mutate(mean = mean(values)) %&gt;% ggplot(aes(values, fill = dataset))+ geom_dotplot(show.legend = FALSE)+ geom_vline(aes(xintercept = mean, color = dataset), size = 2, linetype = 2, show.legend = FALSE) t.test(sample_1, sample_2) Welch Two Sample t-test data: sample_1 and sample_2 t = -5.0632, df = 41.295, p-value = 0.000009005 alternative hypothesis: true difference in means is not equal to 0 95 percent confidence interval: -11.046695 -4.748026 sample estimates: mean of x mean of y 40.93768 48.83504 В работе (Coretta 2017, https://goo.gl/NrfgJm) рассматривается отношения между длительностью гласного и придыхание согласного. Автор собрал данные 5 носителей исландского. Дальше он извлек длительность гласного, после которого были придыхательные и непридыхательные. Скачайте данные и Проверьте, правда ли, что гласные перед аспирированныем согласными статистикали значимо короче гласных после которых непридыхательные для носителя. В ответе приведите t-статистику c точностью до трех знаков после запятой. 14.5.2 Двухвыборочный парный t-тест set.seed(42) sample_1 &lt;- rnorm(25, mean = 40, sd = 5) sample_2 &lt;- sample_1 - rnorm(25, mean = 5) tibble(sample_1, sample_2) %&gt;% pivot_longer(names_to = &quot;dataset&quot;, values_to = &quot;values&quot;, sample_1:sample_2) %&gt;% group_by(dataset) %&gt;% mutate(mean = mean(values)) %&gt;% ggplot(aes(values, fill = dataset))+ geom_dotplot(show.legend = FALSE)+ geom_vline(aes(xintercept = mean, color = dataset), size = 2, linetype = 2, show.legend = FALSE) t.test(sample_1, sample_2, paired = TRUE) Paired t-test data: sample_1 and sample_2 t = 25.034, df = 24, p-value &lt; 0.00000000000000022 alternative hypothesis: true difference in means is not equal to 0 95 percent confidence interval: 4.350251 5.131990 sample estimates: mean of the differences 4.74112 14.5.3 Критерий Манна-Уитни Если данные не распределены нормально, тогда используется критерий Манна-Уитни (по английски его тоже называют Wilcoxon test). set.seed(42) data_1 &lt;- rlnorm(n = 30, mean = 1.8, sd = 0.1) data_2 &lt;- rlnorm(n = 30, mean = 1.6, sd = 0.1) tibble(data_1, data_2) %&gt;% pivot_longer(names_to = &quot;dataset&quot;, values_to = &quot;values&quot;, data_1:data_2) %&gt;% group_by(dataset) %&gt;% mutate(mean = mean(values)) %&gt;% ggplot(aes(values, fill = dataset))+ geom_dotplot(show.legend = FALSE)+ geom_vline(aes(xintercept = mean, color = dataset), size = 2, linetype = 2, show.legend = FALSE) wilcox.test(data_1, data_2) Wilcoxon rank sum exact test data: data_1 and data_2 W = 818, p-value = 0.000000002419 alternative hypothesis: true location shift is not equal to 0 14.5.4 Критерий χ², тест Фишера Если мы хотим сравнить распределение категориальных переменных, то обычно строят таблицы сопряженности и используют критерий χ². Например, из интервью с носителями одной деревни произвольным образом выбрали по пол часа и посчитали кол-во реализаций диалектных форм vs. недиалектных. В результате получилось что у женщин было 107 диалектных форм vs. 93 недиалектные, а у мужчин — 74 vs. 45. Значима ли зафиксированная разница? dialect_forms &lt;- read_csv(&quot;https://raw.githubusercontent.com/agricolamz/DS_for_DH/master/data/dialect_forms_fake.csv&quot;) dialect_forms %&gt;% ggplot(aes(gender, fill = form))+ geom_bar() table(dialect_forms) gender form female male dialect 107 74 standard 93 45 prop.table(table(dialect_forms)) gender form female male dialect 0.3354232 0.2319749 standard 0.2915361 0.1410658 chisq.test(table(dialect_forms)) Pearson&#39;s Chi-squared test with Yates&#39; continuity correction data: table(dialect_forms) X-squared = 1.9525, df = 1, p-value = 0.1623 Критерий χ² считают относительно наблюдаемых \\(f_o\\) и ожидаемых \\(f_e\\) значений: \\[\\chi^2 = \\sum\\frac{\\left(f_0-f_e\\right)^2}{f_e}\\] Считается, что критерий χ² не стоит применять, если хотя бы одно из ожидаемых значений меньше 5. Давайте посмотрим на ожидаемые наблюдения: chisq.test(table(dialect_forms))$expected gender form female male dialect 113.47962 67.52038 standard 86.52038 51.47962 chisq.test(table(dialect_forms))$observed gender form female male dialect 107 74 standard 93 45 Если одно из ожидаемых значений меньше 5, то следует использовать тест Фишера: fisher.test(table(dialect_forms)) Fisher&#39;s Exact Test for Count Data data: table(dialect_forms) p-value = 0.1608 alternative hypothesis: true odds ratio is not equal to 1 95 percent confidence interval: 0.4279225 1.1396897 sample estimates: odds ratio 0.7004421 Вообще таблицы сопряженности бывают разные, да и тестов куда больше см. (Lydersen, Fagerland, and Laake 2009) 14.5.5 Критерий Мак Немара Во время диалектологической экспедиции от 20 информантов (10 мужчин, 10 женщин) были записаны списки слов. Получилось, что 13 информантов использовали в речи велярный фрикативный ɣ, а 22 — велярный стоп ɡ. Через 5 лет работали с теми же информантами и соотношение немного поменялось: 7 ɣ против 28 ɡ. Является ли получившаяся разница статистически значимой? repeated_dialect_forms &lt;- read_csv(&quot;https://raw.githubusercontent.com/agricolamz/DS_for_DH/master/data/dialect_forms_repeated_fake.csv&quot;) table(repeated_dialect_forms) time feature after before fricative 7 13 stop 28 22 prop.table(table(repeated_dialect_forms)) time feature after before fricative 0.1000000 0.1857143 stop 0.4000000 0.3142857 repeated_dialect_forms %&gt;% ggplot(aes(time, fill = feature))+ geom_bar() mcnemar.test(table(repeated_dialect_forms)) McNemar&#39;s Chi-squared test with continuity correction data: table(repeated_dialect_forms) McNemar&#39;s chi-squared = 4.7805, df = 1, p-value = 0.02878 14.6 Послесловие P-value очень много ругают за то, что его очень часто понимают неправильно (Gigerenzer 2004), (Goodman 2008) за то, что само по себе p-value &lt; 0.05 слабый довод (Sterne and Smith 2001), (Nuzzo and others 2014), (Wasserstein and Lazar 2016) Q: Why do so many colleges and grad schools teach p = 0.05? A: Because that’s still what the scientific community and journal editors use. Q: Why do so many people still use p = 0.05? A: Because that’s what they were taught in college or grad school (Wasserstein and Lazar 2016) В связи с этим, сейчас можно наблюдать большое обсуждение p-value vs. доверительные интервалы все нарастающую популярность Байесовской статистики 14.7 Рассказы Чехова и Зощенко 14.7.1 Рассказы Чехова и Зощенко собраны в tidy формате. Постройте график. Узнайте долю, которую составляют слова c леммой деньги от всех слов рассказа и проведите статистический тесты, сравнивающие [доли слов с леммой деньги] с знечением 0.000512 из частотного словаря русского языка [Шаров, Ляшевская 2011]. Приведите значение p-value для Чехова, округленное до 3 знаков после запятой: Приведите значение t-статистики для Чехова, округленное до 3 знаков после запятой: Приведите значение p-value для Зощенко, округленное до 3 знаков после запятой: Приведите значение t-статистики для Зощенко, округленное до 3 знаков после запятой: 14.7.2 Рассказы Чехова и Зощенко собраны в tidy формате. Постройте график. Проведите статистический тест, проверяющий, действительно ли Зощенко писал более короткие рассказы чем Чехов. Приведите значение p-value, округленное до 3 знаков после запятой Приведите значение t-статистики, округленное до 3 знаков после запятой: 14.7.3 Посчитайте энтропию каждого рассказа, визуализируйте разницу между авторами и проведите статистический тест, который показывает, что энтропия в рассказах Зощенко выше. `summarise()` regrouping output by &#39;author&#39;, &#39;titles&#39; (override with `.groups` argument) Приведите название рассказа с минимальной энтропией Надул Крест Вывеска Библиография Приведите название рассказа с максимальной энтропией Вор Великосветская История Черная магия Монастырь Приведите значение p-value, округленное до 3 знаков после запятой Приведите значение t-статистики, округленное до 3 знаков после запятой: 14.7.4 Визуализируйте количество слов и энтропию каждого автора. Какие выводы можно сделать на основании полученого графика? `summarise()` regrouping output by &#39;author&#39;, &#39;titles&#39; (override with `.groups` argument) 14.8 Obamacare В 2010 Б. Обама подписал закон о доступном здравоохранении. В датасет записаны данные о доле незастрахованных людей (в процентах) в каждом штате в 2010 и в 2015 годах (исходные данные на kaggle). Нарисуйте график (я использовал geom_linerange(aes(ymin = …, ymax = …))) и проведите статистический тест, показывающий что произошло изменение. Приведите среднее значение разниц между годами Приведите значение p-value, округленное до 3 знаков после запятой Приведите значение t-статистики, округленное до 3 знаков после запятой: Ссылки на литературу "],
["корреляция-и-регрессия.html", "15 Корреляция и регрессия 15.1 Дисперсия и стандартное отклонение 15.2 z-преобразование 15.3 Ковариация 15.4 Корреляция 15.5 Регрессионный анализ", " 15 Корреляция и регрессия 15.1 Дисперсия и стандартное отклонение Дисперсия — мера разброса значений наблюдений относительно среднего. \\[\\sigma^2_X = \\frac{\\sum_{i = 1}^n(x_i - \\bar{x})^2}{n - 1},\\] где \\(x_1, ..., x_n\\) — наблюдения; \\(\\bar{x}\\) — среднее всех наблюдений; \\(X\\) — вектор всех наблюдений; \\(n\\) — количество наблюдений. Представим, что у нас есть следующие данные: Тогда дисперсия — это сумма квадратов расстояний от каждой точки до среднего выборки (пунктирная линия) разделенное на количество наблюдений - 1 (по духу эта мера — обычное среднее, но если вас инетересует разница смещенной и несмещенной оценки дисперсии, см. видео). Для того чтобы было понятнее, что такое дисперсия, давайте рассмотрим несколько расспределений с одним и тем же средним, но разными дисперсиями: В R дисперсию можно посчитать при помощи функции var()3. set.seed(42) x &lt;- rnorm(20, mean = 50, sd = 10) var(x) [1] 172.2993 Проверим, что функция выдает то же, что мы записали в формуле. var(x) == sum((x - mean(x))^2)/(length(x)-1) [1] TRUE Так как дисперсия является квадратом отклонения, то часто вместо нее используют более интерпретируемое стандартное отклонение \\(\\sigma\\) — корень из дисперсии. В R ее можно посчитать при помощи функции sd(): sd(x) [1] 13.12628 sd(x) == sqrt(var(x)) [1] TRUE Посчитайте дисперсию переменной sleep_total в датасете msleep, встроенный в tidyverse. Ответ округлите до двух знаков после запятой. Посчитайте стандартное отклонение переменной sleep_total в датасете msleep, встроенный в tidyverse. Ответ округлите до двух знаков после запятой. 15.2 z-преобразование z-преобразование (еще используют термин нормализация) — это способ представления данных в виде расстояний от среднего, измеряемых в стандартных отклонениях. Для того чтобы его получить, нужно из каждого наблюдения вычесть среднее и результат разделить на стандартное отклонение. \\[x_i = \\frac{x_i - \\bar{x}}{\\sigma_X}\\] Если все наблюдения z-преобразовать, то получиться распределение с средним в 0 и стандартным отклонением 1 (или очень близко к ним). Само по себе \\(z\\)-преобразование ничего особенного нам про данные не говорит. Однако это преобразование позволяет привести к “общему знаменателю” разные переменные. Т. е. это преобразование ничего нам не говорит про конкретный набор данных, но позволяет сравнивать разные наборы данных. В R z-преобразование можно сделать при помощи функции scale(). Эта функция вовзращает матрицу, поэтому я использую индекс [,1], чтобы результат был вектором. set.seed(42) x &lt;- rnorm(20, mean = 50, sd = 10) scale(x)[,1] [1] 0.8982271 -0.5764146 0.1304317 0.3359234 0.1617734 -0.2270593 [7] 1.0053127 -0.2183246 1.3914857 -0.1939880 0.8478787 1.5958251 [13] -1.2042865 -0.3586002 -0.2477787 0.3382758 -0.3627629 -2.1699785 [19] -2.0054319 0.8594918 Проверим, что функция выдает то же, что мы записали в формуле. scale(x)[,1] == (x-mean(x))/sd(x) [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE [16] TRUE TRUE TRUE TRUE TRUE Однаждый я заполучил градусник со шкалой Фаренгейта и целый год измерял температуру в Москве при помощи градусников с шкалой Фарингейта и Цельсия. В датасет записаны средние значения для каждого месяца. Постройте график нормализованных и ненормализованных измерений. Что можно сказать про измерения, сделанные разными термометрами? 15.3 Ковариация Ковариация — эта мера ассоциации двух переменных. \\[cov(X, Y) = \\frac{\\sum_{i = 1}^n(x_i - \\bar{x})(y_i-\\bar{y})}{n - 1},\\] где \\((x_1, y_1), ..., (x_n, y_n)\\) — пары наблюдений; \\(\\bar{x}, \\bar{y}\\) — средние наблюдений; \\(X, Y\\) — векторы всех наблюдений; \\(n\\) — количество наблюдений. Представим, что у нас есть следующие данные: Тогда, согласно формуле, для каждой точки вычисляется следующая площадь (пуктирными линиями обозначены средние): Если значения \\(x_i\\) и \\(y_i\\) какой-то точки либо оба больше, либо оба меньше средних \\(\\bar{x}\\) и \\(\\bar{y}\\), то получившееся произведение будет иметь знак +, если же наоборот — знак -. На графике это показано цветом. Таким образом, если много красных прямоугольников, то значение суммы будет положительное и обозначать положительную связь (чем больше \\(x\\), тем больше \\(y\\)), а если будет много синий прямоугольников, то значение суммы отрицательное и обозначать положительную связь (чем больше \\(x\\), тем меньше \\(y\\)). Непосредственно значение ковариации не очень информативно, так как может достаточно сильно варьироваться от датасета к датасету. В R ковариацию можно посчитать при помощи функции cov(). set.seed(42) x &lt;- rnorm(10, mean = 50, sd = 10) y &lt;- x + rnorm(10, sd = 10) cov(x, y) [1] 18.72204 cov(x, -y*2) [1] -37.44407 Как видно, простое умножение на два удвоило значение ковариации, что показывает, что непосредственно ковариацию использовать для сравнения разных датасетов не стоит. Проверим, что функция выдает то же, что мы записали в формуле. cov(x, y) == sum((x-mean(x))*(y - mean(y)))/(length(x)-1) [1] TRUE 15.4 Корреляция Корреляция — это мера ассоциации/связи двух числовых переменных. Помните, что бытовое применение этого термина к категориальным переменным (например, корреляция цвета глаз и успеваемость на занятиях по R) не имеет смысла с точки зрения статистики. 15.4.1 Корреляция Пирсона Коэффициент корреляции Пирсона — базовый коэффициент ассоциации переменных, однако стоит помнить, что он дает неправильную оценку, если связь между переменными нелинейна. \\[\\rho_{X,Y} = \\frac{cov(X, Y)}{\\sigma_X\\times\\sigma_Y} = \\frac{1}{n-1}\\times\\sum_{i = 1}^n\\left(\\frac{x_i-\\bar{x}}{\\sigma_X}\\times\\frac{y_i-\\bar{y}}{\\sigma_Y}\\right),\\] где \\((x_1, y_1), ..., (x_n, y_n)\\) — пары наблюдений; \\(\\bar{x}, \\bar{y}\\) — средние наблюдений; \\(X, Y\\) — векторы всех наблюдений; \\(n\\) — количество наблюдений. Последнее уравнение показывает, что коэффициент корреляции Пирсона можно представить как среднее (с поправкой, поэтому \\(n-1\\), а не \\(n\\)) произведение \\(z\\)-нормализованных значений двух переменных. Эта нормализация приводит к тому, что значения корреляции имеют те же свойства знака коэффициента что и ковариация: если коэффициент положительный (т. е. много красных прямоугольников) — связь между переменными положительная (чем больше \\(x\\), тем больше \\(y\\)), если коэффициент отрицательный (т. е. много синих прямоугольников) — связь между переменными отрицательная (чем больше \\(x\\), тем меньше \\(y\\)); значение корреляции имееет независимое от типа данных интеретация: если модуль коэффициента близок к 1 или ему равен — связь между переменными сильная, если модуль коэффициента близок к 0 или ему равен — связь между переменными слабая. Для того чтобы было понятнее, что такое корреляция, давайте рассмотрим несколько расспределений с разными значениями корреляции: Как видно из этого графика, чем ближе модуль корреляции к 1, тем боллее компактно расположены точки друг к другу, чем ближе к 0, тем более рассеяны значения. Достаточно легко научиться приблизительно оценивать коэфициент корреляции на глаз, поиграв 2–5 минут в игру “Угадай корреляцию” здесь или здесь. В R коэффициент корреляции Пирсона можно посчитать при помощи функции cor(). set.seed(42) x &lt;- rnorm(15, mean = 50, sd = 10) y &lt;- x + rnorm(15, sd = 10) cor(x, y) [1] 0.6659041 Проверим, что функция выдает то же, что мы записали в формуле. cor(x, y) == cov(x, y)/(sd(x)*sd(y)) [1] TRUE cor(x, y) == sum(scale(x)*scale(y))/(length(x)-1) [1] TRUE Посчитайте на основе датасета с температурой корреляцию между разными измерениями в шкалах Фарингейта и Цельсия? Результаты округлите до трех знаков после запятой. 15.4.2 Ранговые корреляции Спирмана и Кендалла Коэффициент корреляции Пирсона к сожалению, чувствителен к значениям наблюдений. Если связь между переменными нелинейна, то оценка будет получаться смещенной. Рассмотрим, например, словарь [Ляшевской, Шарова 2011]: freqdict &lt;- read_tsv(&quot;https://github.com/agricolamz/DS_for_DH/raw/master/data/freq_dict_2011.csv&quot;) freqdict %&gt;% arrange(desc(freq_ipm)) %&gt;% mutate(id = 1:n()) %&gt;% slice(1:100) -&gt; filered_freqdict filered_freqdict %&gt;% ggplot(aes(id, freq_ipm, label = lemma))+ geom_point()+ ggrepel::geom_text_repel()+ scale_y_log10() В целом корреляция между рангом и частотой должна быть высокая, однако связь между этими переменными нелинейна, так что коэффициент корреляции Пирсона не такой уж и высокий: cor(filered_freqdict$freq_ipm, filered_freqdict$id) [1] -0.6307876 Для решения той проблемы обычно используют ранговые коэффециенты коррляции Спирмана и Кендала, которые принимают во внимание ранг значения, а не его непосредственное значение. cor(filered_freqdict$freq_ipm, filered_freqdict$id, method = &quot;spearman&quot;) [1] -1 cor(filered_freqdict$freq_ipm, filered_freqdict$id, method = &quot;kendall&quot;) [1] -1 Давайте сравним с предыдущими наблюдениями и их логаотфмамиы: cor(x, y) == cor(log(x), log(y)) [1] FALSE cor(x, y, method = &quot;spearman&quot;) == cor(log(x), log(y), method = &quot;spearman&quot;) [1] TRUE cor(x, y, method = &quot;kendall&quot;) == cor(log(x), log(y), method = &quot;kendall&quot;) [1] TRUE 15.5 Регрессионный анализ 15.5.1 Основы Суть регрессионного анализа в моделировании связи между двумя и более переменными при помощи прямой на плоскости. Формула прямой зависит от двух параметров: свободного члена (intercept) и углового коэффициента (slope). Укажите значение свободного члена для красной прямой. -2 -1 0 1 2 3 4 Укажите значение свободного члена для зеленой прямой. -2 -1 0 1 2 3 4 Укажите значение свободного члена для синей прямой. -2 -1 0 1 2 3 4 Укажите значение углового коэффициента для красной прямой. -2 -1 0 1 2 3 4 Укажите значение углового коэффициента для зеленой прямой. -2 -1 0 1 2 3 4 Укажите значение углового коэффициента для синей прямой. -2 -1 0 1 2 3 4 Когда мы пытаемся научиться предсказывать данные одной переменной \\(Y\\) при помощи другой переменной \\(X\\), мы получаем похожую формулу: \\[y_i = \\hat\\beta_0 + \\hat\\beta_1 \\times x_i + \\epsilon_i,\\] где \\(x_i\\) — \\(i\\)-ый элемент вектора значений \\(X\\); \\(y_i\\) — \\(i\\)-ый элемент вектора значений \\(Y\\); \\(\\hat\\beta_0\\) — оценка случайного члена (intercept); \\(\\hat\\beta_1\\) — оценка углового коэффициента (slope); \\(\\epsilon_i\\) — \\(i\\)-ый остаток, разница между оценкой модели (\\(\\hat\\beta_0 + \\hat\\beta_1 \\times x_i\\)) и реальным значением \\(y_i\\); весь вектор остатков иногда называют случайным шумом (на графике выделены красным). Задача регрессии — оценить параметры \\(\\hat\\beta_0\\) и \\(\\hat\\beta_1\\), если нам известны все значения \\(x_i\\) и \\(y_i\\) и мы пытаемся минимизировать значния \\(\\epsilon_i\\). В данном конкретном случае, задачу можно решить аналитически и получить следующие формулы: \\[\\hat\\beta_1 = \\frac{(\\sum_{i=1}^n x_i\\times y_i)-n\\times\\bar x \\times \\bar y}{\\sum_{i = 1}^n(x_i-\\bar x)^2}\\] \\[\\hat\\beta_0 = \\bar y - \\hat\\beta_1\\times\\bar x\\] 15.5.2 Первая регрессия Давайте попробуем смоделировать количество слов и в рассказах М. Зощенко в зависимости от длины рассказа: zo &lt;- read_tsv(&quot;https://github.com/agricolamz/DS_for_DH/raw/master/data/tidy_zoshenko.csv&quot;) zo %&gt;% filter(word == &quot;и&quot;) %&gt;% distinct() %&gt;% ggplot(aes(n_words, n))+ geom_point()+ labs(x = &quot;количество слов в рассказе&quot;, y = &quot;количество и&quot;) Мы видим, несколько одиночных точек, давайте избавимся от них и добавим регрессионную линию при помощи функции geom_smooth(): zo %&gt;% filter(word == &quot;и&quot;, n_words &lt; 1500) %&gt;% distinct() -&gt; zo_filtered zo_filtered %&gt;% ggplot(aes(n_words, n))+ geom_point()+ geom_smooth(method = &quot;lm&quot;, se = FALSE)+ labs(x = &quot;количество слов в рассказе&quot;, y = &quot;количество и&quot;) Чтобы получить формулу этой линии нужно запустить функцию, которая оценивает линейную регрессию: fit &lt;- lm(n~n_words, data = zo_filtered) fit Call: lm(formula = n ~ n_words, data = zo_filtered) Coefficients: (Intercept) n_words -1.47184 0.04405 Вот мы и получили коэффициенты, теперь мы видим, что наша модель считает следующее: \\[n = -1.47184 + 0.04405 \\times n\\_words\\] Более подробную информцию можно посмотреть, если запустить модель в функцию summary(): summary(fit) Call: lm(formula = n ~ n_words, data = zo_filtered) Residuals: Min 1Q Median 3Q Max -19.6830 -4.3835 0.8986 4.6486 19.6413 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) -1.471840 2.467149 -0.597 0.553 n_words 0.044049 0.003666 12.015 &lt;0.0000000000000002 *** --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Residual standard error: 7.945 on 64 degrees of freedom Multiple R-squared: 0.6928, Adjusted R-squared: 0.688 F-statistic: 144.4 on 1 and 64 DF, p-value: &lt; 0.00000000000000022 В разделе Coefficients содержится информацию про наши коэффициенты: Estimate – полученная оценка коэффициентов; Std. Error – стандартная ошибка среднего; t value – \\(t\\)-статистика, полученная при проведении одновыборочного \\(t\\)-теста, сравнивающего данный коэфициент с 0; Pr(&gt;|t|) – полученное \\(p\\)-значение; Multiple R-squared и Adjusted R-squared — одна из оценок модели, показывает связь между переменными. Без поправок совпадает с квадратом коэффициента корреляции Пирсона: cor(zo_filtered$n_words, zo_filtered$n)^2 [1] 0.6928376 F-statistic — \\(F\\)-статистика полученная при проведении теста, проверяющего, не являются ли хотя бы один из коэффицинтов статистически значимо отличается от нуля. Совпадает с результатами дисперсионного анализа (ANOVA). Теперь мы можем даже предсказывать значения, которые мы еще не видели. Например, сколько будет и в рассказе Зощенко длиной 1000 слов? predict(fit, tibble(n_words = 1000)) 1 42.57715 Постройте ленейную ргерессию на основании рассказов А. Чехова, предсказывая количество и на основании количства слов. При моделировании используйте только рассказы длиной меньше 2500 слов. Укажите свободный член получившейся модели, округлив его до 3 знаков после запятой. Укажите угловой коффициент получившейся модели, округлив его до 3 знаков после запятой. Укажите предсказания модели для рассказа длиной 1000 слов, округлив получнное значение до 3 знаков после запятой. 15.5.3 Категориальные переменные Что если мы хотим включить в наш анализ категориальные переменные? Давайте рассмотрим простой пример с рассказами Чехова и Зощенко, которые мы рассматривали в прошлом разделе. Мы будем анализировать логарифм доли слов деньги: chekhov &lt;- read_tsv(&quot;https://github.com/agricolamz/DS_for_DH/raw/master/data/tidy_chekhov.tsv&quot;) zoshenko &lt;- read_tsv(&quot;https://github.com/agricolamz/DS_for_DH/raw/master/data/tidy_zoshenko.csv&quot;) chekhov$author &lt;- &quot;Чехов&quot; zoshenko$author &lt;- &quot;Зощенко&quot; chekhov %&gt;% bind_rows(zoshenko) %&gt;% filter(str_detect(word, &quot;деньг&quot;)) %&gt;% group_by(author, titles, n_words) %&gt;% summarise(n = sum(n)) %&gt;% mutate(log_ratio = log(n/n_words)) -&gt; checkov_zoshenko Визуализация выглядит так: Красной точкой обозначены средние значения, так что мы видим, что между двумя писателями есть разница, но является ли она статистически значимой? В прошлом разделе, мы рассмотрели, что в таком случае можно сделать t-test: t.test(log_ratio~author, data = checkov_zoshenko, var.equal =TRUE) # здесь я мухлюю, отключая поправку Уэлча Two Sample t-test data: log_ratio by author t = 5.6871, df = 125, p-value = 0.00000008665 alternative hypothesis: true difference in means is not equal to 0 95 percent confidence interval: 0.8606107 1.7793181 sample estimates: mean in group Зощенко mean in group Чехов -5.021262 -6.341226 Разница между группами является статистически значимой (t(125) = 5.6871, p-value = 8.665e-08). Для того, чтобы запустить регрессию на категориальных данных категориальная переменная автоматически разбивается на группу бинарных dummy-переменных: tibble(author = c(&quot;Чехов&quot;, &quot;Зощенко&quot;), dummy_chekhov = c(1, 0), dummy_zoshenko = c(0, 1)) Дальше для регрессионного анализа выкидывают одну из переменных, так как иначе модель не сойдется (dummy-переменных всегда n-1, где n — количество категорий в переменной). tibble(author = c(&quot;Чехов&quot;, &quot;Зощенко&quot;), dummy_chekhov = c(1, 0)) Если переменная dummy_chekhov принимает значение 1, значит речь о рассказе Чехова, а если принимает значение 0, то о рассказе Зощенко. Если вставить нашу переменную в регрессионную формулу получится следующее: \\[y_i = \\hat\\beta_0 + \\hat\\beta_1 \\times \\text{dummy_chekhov} + \\epsilon_i,\\] Так как dummy_chekhov принимает либо значение 1, либо значение 0, то получается, что модель предсказывает лишь два значения: \\[y_i = \\left\\{\\begin{array}{ll}\\hat\\beta_0 + \\hat\\beta_1 \\times 1 + \\epsilon_i = \\hat\\beta_0 + \\hat\\beta_1 + \\epsilon_i\\text{, если рассказ Чехова}\\\\ \\hat\\beta_0 + \\hat\\beta_1 \\times 0 + \\epsilon_i = \\hat\\beta_0 + \\epsilon_i\\text{, если рассказ Зощенко} \\end{array}\\right.\\] Таким образом, получается, что свободный член \\(\\beta_0\\) и угловой коэффициент \\(\\beta_1\\) в регресси с категориальной переменной получает другую интерпретацию. Одно из значений переменной кодируется при помощи \\(\\beta_0\\), а сумма коэффициентов \\(\\beta_0+\\beta_1\\) дают другое значение переменной. Так что \\(\\beta_1\\) — это разница между оценками двух значений переменной. Давайте теперь запустим регрессию на этих же данных: fit2 &lt;- lm(log_ratio~author, data = checkov_zoshenko) summary(fit2) Call: lm(formula = log_ratio ~ author, data = checkov_zoshenko) Residuals: Min 1Q Median 3Q Max -2.8652 -0.6105 -0.0607 0.6546 3.2398 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) -5.0213 0.2120 -23.680 &lt; 0.0000000000000002 *** authorЧехов -1.3200 0.2321 -5.687 0.0000000867 *** --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Residual standard error: 0.9717 on 125 degrees of freedom Multiple R-squared: 0.2056, Adjusted R-squared: 0.1992 F-statistic: 32.34 on 1 and 125 DF, p-value: 0.00000008665 Во-первых стоит обратить внимание на то, что R сам преобразовал нашу категориальную переменную в dummy-переменную authorЧехов. Во-вторых, можно заметить, что значения t-статистики и p-value совпадают с результатами полученными нами в t-тесте выше. Статистическти значимый коэффициент при аргументе authorЧехов следует интерпретировать как разницу средних между логарифмом долей в рассказах Чехова и Зощенко. В работе (Coretta 2017, https://goo.gl/NrfgJm) рассматривается отношения между длительностью гласного и придыхание согласного. Автор собрал данные 5 носителей исландского. Дальше он извлек длительность гласного, после которого были придыхательные и непридыхательные. Скачайте данные и постройте регрессионную модель, предсказывающую длительность гласного на основе . 15.5.4 Множественная регрессия Множественная регрессия позволяет проанализировать связь между зависимой и несколькими зависимыми переменными. Формула множественной регрессии не сильно отличается от формулы обычной линейной регрессии: \\[y_i = \\hat\\beta_0 + \\hat\\beta_1 \\times x_{1i}+ \\dots+ \\hat\\beta_n \\times x_{ni} + \\epsilon_i,\\] \\(x_{ki}\\) — \\(i\\)-ый элемент векторов значений \\(X_1, \\dots, X_n\\); \\(y_i\\) — \\(i\\)-ый элемент вектора значений \\(Y\\); \\(\\hat\\beta_0\\) — оценка случайного члена (intercept); \\(\\hat\\beta_k\\) — коэфциент при переменной \\(X_{k}\\); \\(\\epsilon_i\\) — \\(i\\)-ый остаток, разница между оценкой модели (\\(\\hat\\beta_0 + \\hat\\beta_1 \\times x_i\\)) и реальным значением \\(y_i\\); весь вектор остатков иногда называют случайным шумом. В такой регресии предикторы могут быть как числовыми, так и категориальными (со всеми вытекающими последствиями, которые мы обсудили в предудщем разделе). Такую регрессию чаще всего сложно визуализировать, так как в одну регрессионную линию вкладываются сразу несколько переменных. Попробуем предсказать длину лепестка на основе длины чашелистик и вида ириса: iris %&gt;% ggplot(aes(Sepal.Length, Petal.Length, color = Species))+ geom_point() Запустим регрессию: fit3 &lt;- lm(Petal.Length ~ Sepal.Length+ Species, data = iris) summary(fit3) Call: lm(formula = Petal.Length ~ Sepal.Length + Species, data = iris) Residuals: Min 1Q Median 3Q Max -0.76390 -0.17875 0.00716 0.17461 0.79954 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) -1.70234 0.23013 -7.397 0.0000000000101 *** Sepal.Length 0.63211 0.04527 13.962 &lt; 0.0000000000000002 *** Speciesversicolor 2.21014 0.07047 31.362 &lt; 0.0000000000000002 *** Speciesvirginica 3.09000 0.09123 33.870 &lt; 0.0000000000000002 *** --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Residual standard error: 0.2826 on 146 degrees of freedom Multiple R-squared: 0.9749, Adjusted R-squared: 0.9744 F-statistic: 1890 on 3 and 146 DF, p-value: &lt; 0.00000000000000022 Все предикторы статистически значимы. Давайте посмотрим предсказания модели для всех наблюдений: iris %&gt;% mutate(prediction = predict(fit3)) %&gt;% ggplot(aes(Sepal.Length, prediction, color = Species))+ geom_point() Всегда имеет смысл визуализировать, что нам говорит наша модель. Если использовать пакет ggeffects (или предшествовавший ему пакет effects), это можно сделать не сильно задумываясь, как это делать: library(ggeffects) plot(ggpredict(fit3, terms = c(&quot;Sepal.Length&quot;, &quot;Species&quot;))) Как видно из графиков, наша модель имеет одинаковые угловые коэффициенты (slope) для каждого из видов ириса и разные свободные члены (intercept). summary(fit3) Call: lm(formula = Petal.Length ~ Sepal.Length + Species, data = iris) Residuals: Min 1Q Median 3Q Max -0.76390 -0.17875 0.00716 0.17461 0.79954 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) -1.70234 0.23013 -7.397 0.0000000000101 *** Sepal.Length 0.63211 0.04527 13.962 &lt; 0.0000000000000002 *** Speciesversicolor 2.21014 0.07047 31.362 &lt; 0.0000000000000002 *** Speciesvirginica 3.09000 0.09123 33.870 &lt; 0.0000000000000002 *** --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Residual standard error: 0.2826 on 146 degrees of freedom Multiple R-squared: 0.9749, Adjusted R-squared: 0.9744 F-statistic: 1890 on 3 and 146 DF, p-value: &lt; 0.00000000000000022 \\[y_i = \\left\\{\\begin{array}{ll} -1.70234 + 0.63211 \\times \\text{Sepal.Length} + \\epsilon_i\\text{, если вид setosa}\\\\ -1.70234 + 2.2101 + 0.63211 \\times \\text{Sepal.Length} + \\epsilon_i\\text{, если вид versicolor} \\\\ -1.70234 + 3.09 + 0.63211 \\times \\text{Sepal.Length} + \\epsilon_i\\text{, если вид virginica} \\end{array}\\right.\\] 15.5.5 Сравнение моделей Как нам решить, какая модель лучше? Ведь теперь можно добавить сколько угодно предикторов? Давайте создадим новую модель без предиктора Species: fit4 &lt;- lm(Petal.Length ~ Sepal.Length, data = iris) можно сравнивать статистическую значимость предикторов можно сравнивать \\(R^2\\) summary(fit3)$adj.r.squared [1] 0.9743786 summary(fit4)$adj.r.squared [1] 0.7583327 чаще всего используют так называемые информационные критерии, самый популярный – AIC (Akaike information criterion). Сами по себе значение этого критерия не имеет значения – только в сравнении моделей, построенных на похожих данных. Чем меньше значение, тем модель лучше. AIC(fit3, fit4) 15.5.6 Послесловие сущетсвуют ограничения на применение линейной регресии связь между предсказываемой переменной и предикторами должна быть линейной остатки должны быть нормально распределены (оценивайте визуально) дисперсия остатков вокруг регрессионной линии должно быть постоянно (гомоскидастично) предикторы не должны коррелировать друг с другом все наблюдения в регрессии должны быть независимы друг от друга Вот так вот выглядят остатки нашей модели на основе датасета iris. Смотрите пост, в котором обсуждается, как интерпретировать график остатков. plot(fit3, which=c(1, 2)) сущетсвуют трюки, позволяющие автоматически отбирать модели (см. функцию step()) существует достаточно большое семейство регрессий, который зависят от типа независимой (предсказываемой) переменной или ее распределения логистическая (если предсказываемая переменная имеет два возможных исхода) мультиномиальная (если предсказываемая переменная имеет больше двух возможных дискретных исхода) нелиненые регресии (если связь между переменными нелинейна) регрессия со смешанными эффектами (если внутри данных есть группировки, т. е. наблюдения не независимы) и другие. Как и в других функциях, вычисляющих описательную статистику (mean(), median(), max(), min() и др.), функция var() (и все остальные функции, которые мы будем обсуждать sd(), cov()) возвращают NA, если в векторе есть пропущенные значения. Чтобы изменить это поведение, нужно добавить аргумент na.rm = TRUE.↩︎ "],
["работа-статистического-детектива.html", "16 Работа статистического детектива 16.1 Введение 16.2 Возможно ли такое среднее? 16.3 Пакет statcheck 16.4 Пакет digitize", " 16 Работа статистического детектива library(&quot;tidyverse&quot;) 16.1 Введение До сих пор мы лишь использовали разные статистические тесты, чтобы ответить на разные исследовательские вопросы, которые могут возникнуть. Однако часто в статистические выкладки никто не вчитывается и принимает их как данность, надеясь что софт все правильно посчитал. Здесь есть две опасности: во-первых, бывают недобросовестные исследователи; во-вторых, люди часто ошибаются во время применения и представления результатов статистического анализа (и видимо, это случается чаще). Мы рассмотрим несколько методов, которые позволят проверять некоторые простые случаи, что может быть полезно при критическом чтении (например, во время ревью статей ученых и дата журналистов) в случаях, когда к данным нет доступа. Данный раздел вдохнавлен лекцией Кристин Сайнани. 16.2 Возможно ли такое среднее? Представим себе, что кто-то провел эксперимент с биномиальными данными, например, посчитал количество не в рассказе А. П. Чехова длинной 322 слова “Жизнь прекрасна!” и обнаружил среднее 0.095. Возможно ли это? Давайте посмотри на все возможные результаты: tibble(ratio = round(1:322/322, 3)) %&gt;% ggplot()+ geom_vline(aes(xintercept = ratio), color = &quot;lightblue&quot;)+ geom_vline(xintercept = 0.095, color = &quot;red&quot;) Так ничего не видно, давайте сконцентрируемся на промежуке от 0.085 до 0.1, в котором лежит завяленное значение 0.095, и добавим подписи: tibble(ratio = round(1:322/322, 3)) %&gt;% ggplot()+ geom_vline(aes(xintercept = ratio), color = &quot;lightblue&quot;)+ geom_vline(xintercept = 0.095, color = &quot;red&quot;)+ geom_label(aes(x = ratio, label = ratio), y = 0.5)+ xlim(0.085, 0.1) Мы видим, что красные линии повторяются регулярно с интервалом 0.03 и что синяя линия явно не вписывается в этот паттерн. Может быть было использовано другое округление? tibble(ratio = round(1:322/322, 5)) %&gt;% ggplot()+ geom_vline(aes(xintercept = ratio), color = &quot;lightblue&quot;)+ geom_vline(xintercept = 0.095, color = &quot;red&quot;)+ geom_label(aes(x = ratio, label = ratio), y = 0.5)+ xlim(0.085, 0.1) Если бы числа округлялись вверх, на месте 0.09317 мы бы увидели 0.094. Если бы числа округлялись вниз, на месте 0.09627 мы бы увидели 0.096. Так что доля не в рассказе длинной 322 никак не может быть 0.095. Может быть автор ошибся с количеством слов? 200:400*0.095 [1] 19.000 19.095 19.190 19.285 19.380 19.475 19.570 19.665 19.760 19.855 [11] 19.950 20.045 20.140 20.235 20.330 20.425 20.520 20.615 20.710 20.805 [21] 20.900 20.995 21.090 21.185 21.280 21.375 21.470 21.565 21.660 21.755 [31] 21.850 21.945 22.040 22.135 22.230 22.325 22.420 22.515 22.610 22.705 [41] 22.800 22.895 22.990 23.085 23.180 23.275 23.370 23.465 23.560 23.655 [51] 23.750 23.845 23.940 24.035 24.130 24.225 24.320 24.415 24.510 24.605 [61] 24.700 24.795 24.890 24.985 25.080 25.175 25.270 25.365 25.460 25.555 [71] 25.650 25.745 25.840 25.935 26.030 26.125 26.220 26.315 26.410 26.505 [81] 26.600 26.695 26.790 26.885 26.980 27.075 27.170 27.265 27.360 27.455 [91] 27.550 27.645 27.740 27.835 27.930 28.025 28.120 28.215 28.310 28.405 [101] 28.500 28.595 28.690 28.785 28.880 28.975 29.070 29.165 29.260 29.355 [111] 29.450 29.545 29.640 29.735 29.830 29.925 30.020 30.115 30.210 30.305 [121] 30.400 30.495 30.590 30.685 30.780 30.875 30.970 31.065 31.160 31.255 [131] 31.350 31.445 31.540 31.635 31.730 31.825 31.920 32.015 32.110 32.205 [141] 32.300 32.395 32.490 32.585 32.680 32.775 32.870 32.965 33.060 33.155 [151] 33.250 33.345 33.440 33.535 33.630 33.725 33.820 33.915 34.010 34.105 [161] 34.200 34.295 34.390 34.485 34.580 34.675 34.770 34.865 34.960 35.055 [171] 35.150 35.245 35.340 35.435 35.530 35.625 35.720 35.815 35.910 36.005 [181] 36.100 36.195 36.290 36.385 36.480 36.575 36.670 36.765 36.860 36.955 [191] 37.050 37.145 37.240 37.335 37.430 37.525 37.620 37.715 37.810 37.905 [201] 38.000 Среди полученных числе целые числа есть только в значениях 200 и 400. Так что, если автор и ошибся в количестве слов, то слишком масштабно. Еще автор мог ошибиться и там, и там. Этот процесс можно немного автоматизировать: roundЭта идея лежит в основе Granularity-Related Inconsistent Means test (GRIM). Я не нашел его реализации на R, но вот есть он-лайн приложение. 16.3 Пакет statcheck Пакет statcheck написан для извлечения и проверки результатов статистических тестов, которые приводятся в статьях. Рассмотрим пример двустороннего и одностороннего t-тестов: t.test(data = mtcars, qsec ~ am) Welch Two Sample t-test data: qsec by am t = 1.2878, df = 25.534, p-value = 0.2093 alternative hypothesis: true difference in means is not equal to 0 95 percent confidence interval: -0.4918522 2.1381679 sample estimates: mean in group 0 mean in group 1 18.18316 17.36000 t.test(data = mtcars, qsec ~ am, alternative = &quot;greater&quot;) Welch Two Sample t-test data: qsec by am t = 1.2878, df = 25.534, p-value = 0.1047 alternative hypothesis: true difference in means is greater than 0 95 percent confidence interval: -0.2677649 Inf sample estimates: mean in group 0 mean in group 1 18.18316 17.36000 Запустим в функцию statcheck() три варианта: результат двустороннего теста; результат одностороннего теста; совсем неправильный результат. library(&quot;statcheck&quot;) s &lt;- statcheck(c(&quot;t(25.534) = 1.2878, p = 0.21&quot;, &quot;t(25.534) = 1.2878, p = 0.10&quot;, &quot;t(22.716) = 3.7671, p &lt; 0.01&quot;)) | | | 0% | |======================= | 33% | |=============================================== | 67% | |======================================================================| 100% s Теперь в переменной s находится датафрейм со следующими переменными: Source Statistic df1 df2 Test.Comparison Value Reported.Comparison Reported.P.Value Computed Raw Error DecisionError OneTail OneTailedInTxt APAfactor Функция statcheck() работает со следующими статистиками: \\(t\\)-статистика, \\(F\\)-статистика (мы ее видели в регрессии), коэффициент корреляции, хи-квадрат и \\(z\\)-score (используется в z-тесте). В мануале к пакету описаны много дополнительных функций, которые позволяют не копировать текст из статьи, а автоматически извлекать данные для проверки из .pdf или .html. 16.4 Пакет digitize Иногда нам может случится, что данные представлены визуально: set.seed(42) tibble(x = rnorm(20, mean = 40, sd = 10), y = x + rnorm(20, mean = 0, sd = 5)) %&gt;% ggplot(aes(x, y))+ geom_point()+ annotate(geom = &quot;text&quot;, x = 20, y = 60, label = &quot;r = 0.92&quot;, size = 8) Как бы нам проверить корреляцию Пирсона, которая представлена на графике? Для этого мы воспользуемся пакетом digitize (однако аналогичные операции можно сделать и онлайн). На первом шаге нужно определить границы. При помощи функции ReadAndCal() сначала отметьте минимальное значение по оси x, затем максимальное значение по оси х, затем отметьте минимальное значение по оси y, затем максимальное значение по оси y: library(digitize) calibration &lt;- ReadAndCal(&#39;images/test_correlaton.png&#39;) После того, как вы отметите границы появятся синие крестики: Следующий шаг — это отметить наблюдения. Это делается при помощи функции DigitData() (нажмите на кнопку Finish наверху или клавишу Esc): data.points &lt;- DigitData(col = &#39;red&#39;) Теперь на графике появились не только синие крестики, но и красные точки: После этого используйте функцию Calibrate(), чтобы откалибрировать полученные точки: df &lt;- Calibrate(data.points, calibration, 15, # минимум по оси x 60, # максимум по оси x 20, # минимум по оси y 60) # максимум по оси y Давайте проверим, как точки соотносятся с оригиналом: df$type &lt;- &quot;obtained&quot; set.seed(42) tibble(x = rnorm(20, mean = 40, sd = 10), y = x + rnorm(20, mean = 0, sd = 5), type = &quot;original&quot;) %&gt;% bind_rows(df) %&gt;% ggplot(aes(x, y, color = type))+ geom_point() Результат достаточно близкий, давайте теперь проверим коэффициент корреляции: cor(df$x, df$y) [1] 0.9522989 И вот мы выяснили, что коэффициент корреляции Пирсона на этих данных равен 0.95, что отличается от заявленных 0.92. У этого метода, конечно, есть очевидные недостатки: при большом количестве точек метод становится слишком трудоемким; сам процесс тыкания плохо верефицируем, исследователь может случайно ткнуть два раза на одну точку или отметить два раза группу точек, потому что ему показалось, что раньше он эту группу не отмечал; даже при маленьком количестве точек мы не можем заметить случаи, когда значения совпадают или слишком похожи. Т. е. в оригинальных данных может быть две точки, а детектив поставит лишь одну; если Ваше изображение повернуто, то результаты может получиться неправильный. "],
["кластеризация.html", "17 Кластеризация 17.1 Метод k-средних (k-means) 17.2 Иерархическая кластеризация", " 17 Кластеризация library(tidyverse) Кластеризация — это не метод, а задача, для решение которой придумано множество алгоритмов. Не существует “правильных”методов кластеризации, так как “clustering is in the eye of the beholder”[Estivill-Castro 2002]. Мы рассмотрим два семейства алгоритмов: метод k-средних (k-means) иерархическая кластеризация (hierarchical clustering) 17.1 Метод k-средних (k-means) Алгоритм k-means был разработан в статье [Lloyd 1982]: на вход алгоритму подаются данные и k — количество кластеров, на которые эти данные надо поделить; произвольно выбираются k точек (центроидов) и рассчитываются ближайшие расстояния (евклидово) от данных точек до центроидов, точки которые ближе всего к некоторому центроиду образуют кластер; на основе точек вошедших в кластер строится новый центроид, так чтобы расстояние от всех точек до нового центроида было минимально; часть точек становится ближе к новому центроиду и входят в его кластер, а часть от центроида отдаляется и начинают входить в другой/другие кластер/кластеры; … все это повторяется, пока на некоторой итерации не происходит изменение положения центроидов. Давайте посмотрим визуализацию алгоритма k-средних, которую сделал Нафтали Харрис. 17.1.1 Пример Давайте проанализируем данные из датасета iris: iris %&gt;% ggplot(aes(Petal.Length, Petal.Width, color = Species))+ geom_point() Для того чтобы запустить метод k-средних в R нужно использовать функцию kmeans(), указав количество кластеров в centers: library(broom) set.seed(42) iris %&gt;% select(Petal.Length, Petal.Width) %&gt;% kmeans(centers = 3) -&gt; km Давайте посмотрим, насколько хорошо алгоритм k-средних справился с заданием. Я воспользуюсь функцией augment() из пакета broom, чтобы добавить результаты модели к исходным данным (это работает и с регрессиями) km %&gt;% augment(iris) %&gt;% count(Species, .cluster) Мы видим, что алгоритм все разбил на три кластера (1, 2, 3), 1 соответствует setosa, 2 соответствует versicolor, 3 соответсвтует virginica (я смотрю с какой группой ассоциировано наибольшое n). Я использую функцию recode_factor() для того чтобы перекодировать переменную .cluster: km %&gt;% augment(iris) %&gt;% mutate(.cluster = recode_factor(.cluster, `1` = &quot;setosa&quot;, `2` = &quot;versicolor&quot;, `3` = &quot;virginica&quot;), correct = Species == .cluster) %&gt;% ggplot(aes(Petal.Length, Petal.Width))+ geom_point(aes(color = correct, shape = Species))+ geom_point(data = data.frame(km$centers)) # центроиды Цветом выделены несовпадения с исходными данными, как видно, таких случаев всего 5: два цветка virginica были отнесены к классу versicolor, три цветка virginica были отнесены к versicolor. Так что в целом, можно сказать, что алгоритм хорошо справился. Черным обозначены центроиды получившихся кластеров. 17.2 Иерархическая кластеризация Иерархические кластеризации имеют два типа: снизу вверх (agglomerative): каждое наблюдение в начальной позиции является кластером, дальше два ближних кластера соединяются в один, а дендограмма отображает порядки таких соединений. сверху вниз (divisive): все наблюдения в начальной позиции являются кластером, который дальше делится на более мелкие, а дендограмма отображает порядки таких разъединений. Алгоритмы иерархической кластеризации требуют на вход матрицы расстояний. Алгоритмов кластерного анализа очень много, так что имеет смысл заглянуть в работу [Gordon 1987] и на страницу CRAN. 17.2.1 Матрица расстояний Матрица расстояний — это матрица n × n, которая содержит значения меры расстояния/сходства между объектами в метрическом пространстве. Существует уйма мер расстояния/сходства, выбор из которых зависит от типа данных. К сожалению, не существует универсального алгоритма выбора метода, так что это остается на откуп исследователям. Кроме того, схожие методы, зародившиеся в биологии, называют string metric: они определяют расстояния между строками (расстояние Хэмминга, расстояние Левинштейна и т. п.) 17.2.1.1 Бинарные данные Представим вот такие данные для нескольких языков: df &lt;- tibble(lang = c(&quot;Lithuanian&quot;, &quot;Latvian&quot;, &quot;Prussian&quot;, &quot;ChurchSlavonic&quot;), word_1 = c(1, 1, 1, 0), word_2 = c(1, 1, 1, 0), word_3 = c(1, 1, 0, 0), word_4 = c(1, 0, 0, 0), word_5 = c(0, 0, 0, 1)) df Существует множество мер для анализа бинарных данных. Самый распространенный — коэффициент Жаккара. Для каждой пары идиомов строим вот такую таблицу: идиом i 1 0 идиом j 1 a b 0 c d А дальше мы считаем меру сходства: \\[s(i, j)=\\frac{a}{a+b+c}\\] В работе [Gower and Legendre 1986] есть и другие методы (14 шт.). Большинство из них есть в функции dist.binary() пакета ade4. Дальше можно использовать функцию dist() с аргументом binary. Я использую функцию tidy() из пакета broom, чтобы получить таблицу: df %&gt;% select(-lang) %&gt;% dist(method = &quot;binary&quot;) %&gt;% tidy() Можно визуализировать матрицу расстояния: df %&gt;% select(-lang) %&gt;% dist(method = &quot;binary&quot;) %&gt;% tidy() %&gt;% mutate(item1 =recode_factor(item1, `1` = &quot;Lithuanian&quot;, `2` = &quot;Latvian&quot;, `3` = &quot;Prussian&quot;, `4` = &quot;ChurchSlavonic&quot;), item2 =recode_factor(item2, `1` = &quot;Lithuanian&quot;, `2` = &quot;Latvian&quot;, `3` = &quot;Prussian&quot;, `4` = &quot;ChurchSlavonic&quot;)) %&gt;% ggplot(aes(item1, item2, fill=distance, label = round(distance, 2))) + geom_tile()+ geom_text(color = &quot;white&quot;) 17.2.1.2 Числовые переменные iris %&gt;% select(Petal.Length, Petal.Width) %&gt;% dist() %&gt;% tidy() %&gt;% ggplot(aes(item1, item2, fill=distance)) + geom_tile() Расстояние здесь сложнее интерпретировать, потому что на графике представлено расстояние между 150 цветками. 17.2.2 Расстояние между словами Мы уже обсуждали расстояние между словами, его тоже можно использовать для кластеризации: library(stringdist) stringdistmatrix(c(&quot;корова&quot;, &quot;коровы&quot;, &quot;гуси&quot;)) 1 2 2 1 3 6 6 17.2.3 Применение иерархической кластеризации iris %&gt;% select(Petal.Length, Petal.Width) %&gt;% dist() %&gt;% hclust() -&gt; hc Объект иерархической кластеризации легко визуализировать: plot(hc) Также можно выделить какое-то количество кластеров: rect.hclust(hc, k=3) Функция cutree() возвращает вектор номеров кластеров в соответсвтии с данными, так что можно строить все предыдущие графики: iris %&gt;% mutate(cluster = cutree(hc, k=3)) %&gt;% count(Species, cluster) Мы видим, что алгоритм все разбил на три кластера (1, 2, 3), 1 соответствует setosa, 2 соответствует virginica и versicolor, 3 соответсвтует versicolor (я смотрю с какой группой ассоциировано наибольшое n). Я использую функцию recode_factor() для того чтобы перекодировать переменную .cluster: iris %&gt;% mutate(cluster = cutree(hc, k=3)) %&gt;% mutate(cluster = recode_factor(cluster, `1` = &quot;setosa&quot;, `2` = &quot;virginica&quot;, `3` = &quot;versicolor&quot;), correct = Species == cluster) %&gt;% ggplot(aes(Petal.Length, Petal.Width))+ geom_point(aes(color = correct, shape = Species)) Мы видим, что ошибки в осовном сгруппированы на границе двух кластеров (видимо, точек меньше, чем 21 потому что они совпадают). "],
["методы-уменьшения-размерностей.html", "18 Методы уменьшения размерностей 18.1 Визуализация многомерных пространств 18.2 Простой пример: из двумерного пространства в одномерное пространство 18.3 Многомерное шкалирование (MDS) 18.4 Метод главных компонент (PCA) 18.5 Другие методы уменьшения размерности", " 18 Методы уменьшения размерностей library(tidyverse) Методы уменьшения размерностей – это эксплораторные методы, которые позволяет использовать меньше переменных для того, чтобы найти связи в данных и связи между переменными. Немножко жаргона: размерность здесь является прямым аналогом размерности в описании физических объектов (например, 2-ухмерное, 3-ехмерное, 4-ехмерное и т. д. пространство). Важно понимать, что каждая переменная в любом датасете можно воспринимать как отдельную размерность, так что каждая строчка в датасете mtcars – объект в 11-мерном пространстве просто потому что в этом датасете 11 переменных. 18.1 Визуализация многомерных пространств Визуализация многомерного пространства — дело сложное. Когда переменных не так уж и много, то в целом данную задачу можно решить используя разные трюки: много диаграмм рассеяния library(GGally) ggpairs(mtcars) радиальная диаграмма (радар, паук) mtcars %&gt;% mutate(car_names = rownames(mtcars)) %&gt;% pivot_longer(names_to = &quot;variables&quot;, values_to = &quot;values&quot;, mpg:carb) %&gt;% mutate(variables = factor(variables, levels = colnames(mtcars))) %&gt;% ggplot(aes(variables, values, color = car_names, group = car_names))+ geom_point()+ geom_polygon(fill = NA)+ ggproto(&quot;CordRadar&quot;, CoordPolar, theta = &quot;x&quot;, r = &quot;x&quot;, start = 0, direction = 1, is_linear = function(coord) TRUE) Не очень видно. Давайте нормализуем переменные: mtcars %&gt;% mutate_all(scale) %&gt;% mutate(car_names = rownames(mtcars)) %&gt;% pivot_longer(names_to = &quot;variables&quot;, values_to = &quot;values&quot;, mpg:carb) %&gt;% mutate(variables = factor(variables, levels = colnames(mtcars))) %&gt;% ggplot(aes(variables, values, color = car_names, group = car_names))+ geom_point()+ geom_polygon(fill = NA)+ ggproto(&quot;CordRadar&quot;, CoordPolar, theta = &quot;x&quot;, r = &quot;x&quot;, start = 0, direction = 1, is_linear = function(coord) TRUE) Все равно не очень хорошо видно, давайте сделаем фасетизацию: mtcars %&gt;% mutate_all(scale) %&gt;% mutate(car_names = rownames(mtcars)) %&gt;% pivot_longer(names_to = &quot;variables&quot;, values_to = &quot;values&quot;, mpg:carb) %&gt;% mutate(variables = factor(variables, levels = colnames(mtcars))) %&gt;% ggplot(aes(variables, values, group = car_names, color = car_names))+ geom_point(show.legend = FALSE)+ geom_polygon(fill = NA, show.legend = FALSE)+ facet_wrap(~car_names)+ ggproto(&quot;CordRadar&quot;, CoordPolar, theta = &quot;x&quot;, r = &quot;x&quot;, start = 0, direction = 1, is_linear = function(coord) TRUE) 18.2 Простой пример: из двумерного пространства в одномерное пространство Мы уже рассматривали связь между количество слов в рассказе и количеством слов и в рассказах М. Зощенко: Мы уже смотрели коэффициент корреляции между этими переменными (r = 0.83). Представим, что я перешел к новой системе координат: Теперь я могу предсказывать значения переменных количество слов в рассказе и количестов и в рассказе на основе этой новой переменной. zo %&gt;% select(n, n_words) %&gt;% prcomp(scale. = TRUE) %&gt;% broom::augment(zo) %&gt;% pivot_longer(names_to = &quot;type&quot;, values_to = &quot;value&quot;, n:n_words) %&gt;% mutate(type = recode(type, n = &quot;количество и&quot;, n_words = &quot;количество слов&quot;)) %&gt;% group_by(type) %&gt;% mutate(cor = str_c(&quot;r = &quot;,round(cor(.fittedPC1, value), 2)), max = max(value)- sd(value)) %&gt;% ggplot(aes(.fittedPC1, value))+ geom_point()+ geom_label(aes(label = cor, y = max), x = -1.5)+ facet_wrap(~type, scales = &quot;free&quot;)+ labs(x = &quot;новая переменная&quot;, y = &quot;старые переменные&quot;) 18.3 Многомерное шкалирование (MDS) Многомерное шкалирование – преобразование из многомерного пространства в n-мерное пространство (чаще всего смотрят на n равное 2), которое старается как можно меньше исказить расстояния между наблюдениями. iris %&gt;% select(-Species) %&gt;% dist() %&gt;% cmdscale() %&gt;% as_tibble() %&gt;% bind_cols(iris) %&gt;% ggplot(aes(V1, V2, color = Species))+ geom_point() Если по какой-то причине вы хотите использовать большую размерность итогового пространства, можно использовать аргумент k функции cmdscale() (по умолчанию он 2). Как видно из кода, я использовал функцию dist(), которую мы видели в предыдущем разделе: мы можем использовать любую другую матрицу расстояний, которую мы посчитаем (существует множество метрик расстояния, которые можно посмотреть в справке ?dist). Давайте, например, посмотрим на многомерное шкалирование расстояний Левинштейна-Димерау между стопсловами русского языка: library(stringdist) library(stopwords) stringdistmatrix(stopwords(&quot;ru&quot;)) %&gt;% cmdscale() %&gt;% as_tibble() %&gt;% mutate(words = stopwords(&quot;ru&quot;)) %&gt;% ggplot(aes(V1, V2, label = words))+ geom_text() Как интерпретировать получившийся график? Часто мы не можем придать никакого значения получившимся осям, однако расстояния между точками на графике призвано отражать расстояние в многомерном пространстве. Так что, используя многомерное шкалирование можно обнаружить, есть ли кластеры в многомерных данных можно обнаружить, есть ли связь между наблюдениями, в том числе невыраженная переменными, которые есть в датасете. Например, из графика со стопсловами, видна “скрытая” переменная – длина слова. В датасет записаны частотности некоторых слов в рассказах А. Чехова и М. Зощенко. Постройте многомерное шкалирование используя все переменные, и раскрасьте рассказы в зависимости от авторства. Делятся ли рассказы на кластеры? Как вы думаете почему? 18.4 Метод главных компонент (PCA) Метод главных компонент – преобразование из многомерного пространства в n-мерное пространство (чаще всего смотрят на n равное 2), которое старается как можно меньше исказить корреляции между переменными. library(broom) iris %&gt;% select(-Species) %&gt;% prcomp() %&gt;% augment(iris) %&gt;% ggplot(aes(.fittedPC1, .fittedPC2, color = Species))+ geom_point() В целом, эта картинка ничем не отличается от полученной нам в многомерном шкалировании (плсю-минус зеркальное отображение; так будет каждый раз, если при построении многомерного шкалирования использовано евклидово расстояние). Так как метод главных компонент старается сохранить как можно больше дисперсии из всех данных, в результате этот метод (да и многомерное шкалирование) очень чувствителен к дисперсии переменных. Это значит, что данный метод будет давать разные результаты в зависимости того, в метрах исследуемая переменная или в километрах. Чтобы предотвратить этот крен в сторону переменных с большей дисперсией, следует добавлять в функцию prcomp() аргумент scale. = TRUE, которые, соответственно нормализует переменные перед применением алгоритма: iris %&gt;% select(-Species) %&gt;% prcomp(scale. = TRUE) %&gt;% augment(iris) %&gt;% ggplot(aes(.fittedPC1, .fittedPC2, color = Species))+ geom_point() В отличие от многомерного шкалирования, метод главных компонент позволяет также посмотреть на процент объясненной дисперсии: iris %&gt;% select(-Species) %&gt;% prcomp(scale. = TRUE) %&gt;% summary() Importance of components: PC1 PC2 PC3 PC4 Standard deviation 1.7084 0.9560 0.38309 0.14393 Proportion of Variance 0.7296 0.2285 0.03669 0.00518 Cumulative Proportion 0.7296 0.9581 0.99482 1.00000 Ученые (к счастью) не договорились относительно порога, начиная с которого процент объясненной дисперсии является хорошим. Я обычно радуюсь значением больше 0.7 (т. е. при переходе к новым осям мы выкинули всего 30% дисперсии). Кроме того, благодаря методу главных компонент мы можем посмотреть на связь переменных. Давайте продемонстрируем это на частотности слов в евангелиях: gospels &lt;- read_csv(&quot;https://raw.githubusercontent.com/agricolamz/2019_data_analysis_for_linguists/master/data/gospel_freq_words.csv&quot;) Parsed with column specification: cols( word = col_character(), John = col_double(), Luke = col_double(), Mark = col_double(), Matthew = col_double() ) gospels PCA &lt;- prcomp(gospels[,-1], scale. = TRUE) row.names(PCA$x) &lt;- gospels$word library(ggfortify) autoplot(PCA, shape = FALSE, loadings = TRUE, label = TRUE, loadings.label = TRUE) Косинус угла между стрелочками соответствует коэффиценту корреляции между ними cor(gospels[,-1]) John Luke Mark Matthew John 1.0000000 0.5560482 0.6357893 0.6397344 Luke 0.5560482 1.0000000 0.7277001 0.7962913 Mark 0.6357893 0.7277001 1.0000000 0.7916982 Matthew 0.6397344 0.7962913 0.7916982 1.0000000 Мы точно так же можем работать не только с данными, но и с матрицей расстояния: st_words &lt;- tibble(words = stopwords(&quot;ru&quot;)) stringdistmatrix(st_words$words) %&gt;% prcomp(scale. = TRUE) %&gt;% augment(st_words) %&gt;% ggplot(aes(.fittedPC1, .fittedPC2, label = words))+ geom_text() stringdistmatrix(st_words$words) %&gt;% prcomp(scale. = TRUE) %&gt;% summary() Importance of components: PC1 PC2 PC3 PC4 PC5 PC6 PC7 Standard deviation 9.1094 3.50931 3.05332 2.5126 2.40159 2.20270 2.10269 Proportion of Variance 0.5219 0.07745 0.05863 0.0397 0.03627 0.03051 0.02781 Cumulative Proportion 0.5219 0.59935 0.65798 0.6977 0.73396 0.76448 0.79228 PC8 PC9 PC10 PC11 PC12 PC13 PC14 Standard deviation 1.83939 1.68455 1.64582 1.50108 1.43699 1.32001 1.19788 Proportion of Variance 0.02128 0.01785 0.01704 0.01417 0.01299 0.01096 0.00902 Cumulative Proportion 0.81356 0.83141 0.84844 0.86262 0.87560 0.88656 0.89559 PC15 PC16 PC17 PC18 PC19 PC20 PC21 Standard deviation 1.14934 1.12332 1.08208 1.04435 0.93055 0.90376 0.88367 Proportion of Variance 0.00831 0.00794 0.00736 0.00686 0.00545 0.00514 0.00491 Cumulative Proportion 0.90389 0.91183 0.91919 0.92605 0.93150 0.93664 0.94155 PC22 PC23 PC24 PC25 PC26 PC27 PC28 Standard deviation 0.87275 0.81203 0.75994 0.73676 0.7249 0.67007 0.64885 Proportion of Variance 0.00479 0.00415 0.00363 0.00341 0.0033 0.00282 0.00265 Cumulative Proportion 0.94634 0.95049 0.95412 0.95753 0.9608 0.96366 0.96631 PC29 PC30 PC31 PC32 PC33 PC34 PC35 Standard deviation 0.61520 0.59373 0.5775 0.57012 0.53217 0.5039 0.48679 Proportion of Variance 0.00238 0.00222 0.0021 0.00204 0.00178 0.0016 0.00149 Cumulative Proportion 0.96869 0.97091 0.9730 0.97505 0.97683 0.9784 0.97992 PC36 PC37 PC38 PC39 PC40 PC41 PC42 Standard deviation 0.48309 0.44708 0.43207 0.3987 0.39240 0.36516 0.35923 Proportion of Variance 0.00147 0.00126 0.00117 0.0010 0.00097 0.00084 0.00081 Cumulative Proportion 0.98138 0.98264 0.98381 0.9848 0.98578 0.98662 0.98743 PC43 PC44 PC45 PC46 PC47 PC48 PC49 Standard deviation 0.34764 0.3330 0.31735 0.31360 0.30236 0.29669 0.28040 Proportion of Variance 0.00076 0.0007 0.00063 0.00062 0.00057 0.00055 0.00049 Cumulative Proportion 0.98819 0.9889 0.98952 0.99014 0.99072 0.99127 0.99177 PC50 PC51 PC52 PC53 PC54 PC55 PC56 Standard deviation 0.27511 0.26238 0.24448 0.23832 0.23560 0.22759 0.22533 Proportion of Variance 0.00048 0.00043 0.00038 0.00036 0.00035 0.00033 0.00032 Cumulative Proportion 0.99224 0.99267 0.99305 0.99341 0.99376 0.99408 0.99440 PC57 PC58 PC59 PC60 PC61 PC62 PC63 Standard deviation 0.22146 0.21053 0.20631 0.20455 0.20016 0.19190 0.18747 Proportion of Variance 0.00031 0.00028 0.00027 0.00026 0.00025 0.00023 0.00022 Cumulative Proportion 0.99471 0.99499 0.99526 0.99552 0.99577 0.99600 0.99622 PC64 PC65 PC66 PC67 PC68 PC69 PC70 Standard deviation 0.18245 0.1775 0.16788 0.16499 0.16281 0.15790 0.15292 Proportion of Variance 0.00021 0.0002 0.00018 0.00017 0.00017 0.00016 0.00015 Cumulative Proportion 0.99643 0.9966 0.99681 0.99698 0.99715 0.99730 0.99745 PC71 PC72 PC73 PC74 PC75 PC76 PC77 Standard deviation 0.14735 0.14341 0.13953 0.13850 0.13316 0.12972 0.1273 Proportion of Variance 0.00014 0.00013 0.00012 0.00012 0.00011 0.00011 0.0001 Cumulative Proportion 0.99759 0.99772 0.99784 0.99796 0.99807 0.99818 0.9983 PC78 PC79 PC80 PC81 PC82 PC83 PC84 Standard deviation 0.1260 0.1247 0.11829 0.11670 0.11507 0.10871 0.10524 Proportion of Variance 0.0001 0.0001 0.00009 0.00009 0.00008 0.00007 0.00007 Cumulative Proportion 0.9984 0.9985 0.99857 0.99865 0.99873 0.99881 0.99888 PC85 PC86 PC87 PC88 PC89 PC90 PC91 Standard deviation 0.10464 0.10307 0.10104 0.09898 0.09473 0.09188 0.08819 Proportion of Variance 0.00007 0.00007 0.00006 0.00006 0.00006 0.00005 0.00005 Cumulative Proportion 0.99895 0.99901 0.99908 0.99914 0.99920 0.99925 0.99930 PC92 PC93 PC94 PC95 PC96 PC97 PC98 Standard deviation 0.08491 0.08265 0.07868 0.07556 0.07372 0.07262 0.07084 Proportion of Variance 0.00005 0.00004 0.00004 0.00004 0.00003 0.00003 0.00003 Cumulative Proportion 0.99934 0.99939 0.99943 0.99946 0.99950 0.99953 0.99956 PC99 PC100 PC101 PC102 PC103 PC104 PC105 Standard deviation 0.06751 0.06516 0.06446 0.06293 0.05934 0.05823 0.05722 Proportion of Variance 0.00003 0.00003 0.00003 0.00002 0.00002 0.00002 0.00002 Cumulative Proportion 0.99959 0.99962 0.99964 0.99967 0.99969 0.99971 0.99973 PC106 PC107 PC108 PC109 PC110 PC111 PC112 Standard deviation 0.05516 0.05259 0.05088 0.04966 0.04914 0.04855 0.04592 Proportion of Variance 0.00002 0.00002 0.00002 0.00002 0.00002 0.00001 0.00001 Cumulative Proportion 0.99975 0.99977 0.99978 0.99980 0.99981 0.99983 0.99984 PC113 PC114 PC115 PC116 PC117 PC118 PC119 Standard deviation 0.04558 0.04354 0.04276 0.04101 0.03932 0.03791 0.03683 Proportion of Variance 0.00001 0.00001 0.00001 0.00001 0.00001 0.00001 0.00001 Cumulative Proportion 0.99986 0.99987 0.99988 0.99989 0.99990 0.99991 0.99992 PC120 PC121 PC122 PC123 PC124 PC125 PC126 Standard deviation 0.03536 0.03501 0.03392 0.03064 0.03019 0.02806 0.027 Proportion of Variance 0.00001 0.00001 0.00001 0.00001 0.00001 0.00000 0.000 Cumulative Proportion 0.99992 0.99993 0.99994 0.99995 0.99995 0.99996 1.000 PC127 PC128 PC129 PC130 PC131 PC132 PC133 Standard deviation 0.02557 0.02505 0.02465 0.02362 0.02252 0.02098 0.01907 Proportion of Variance 0.00000 0.00000 0.00000 0.00000 0.00000 0.00000 0.00000 Cumulative Proportion 0.99997 0.99997 0.99997 0.99998 0.99998 0.99998 0.99998 PC134 PC135 PC136 PC137 PC138 PC139 PC140 Standard deviation 0.01786 0.01688 0.01635 0.01546 0.01501 0.01397 0.01348 Proportion of Variance 0.00000 0.00000 0.00000 0.00000 0.00000 0.00000 0.00000 Cumulative Proportion 0.99999 0.99999 0.99999 0.99999 0.99999 0.99999 1.00000 PC141 PC142 PC143 PC144 PC145 PC146 Standard deviation 0.01195 0.01106 0.01042 0.009156 0.008349 0.007473 Proportion of Variance 0.00000 0.00000 0.00000 0.000000 0.000000 0.000000 Cumulative Proportion 1.00000 1.00000 1.00000 1.000000 1.000000 1.000000 PC147 PC148 PC149 PC150 PC151 PC152 Standard deviation 0.006681 0.005886 0.005404 0.004543 0.003973 0.002793 Proportion of Variance 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 Cumulative Proportion 1.000000 1.000000 1.000000 1.000000 1.000000 1.000000 PC153 PC154 PC155 PC156 PC157 PC158 Standard deviation 0.002337 0.001573 0.0014 0.0009382 0.0006041 0.0002766 Proportion of Variance 0.000000 0.000000 0.0000 0.0000000 0.0000000 0.0000000 Cumulative Proportion 1.000000 1.000000 1.0000 1.0000000 1.0000000 1.0000000 PC159 Standard deviation 0.000000000000004 Proportion of Variance 0.000000000000000 Cumulative Proportion 1.000000000000000 В датасет записаны частотности некоторых слов в рассказах А. Чехова и М. Зощенко. Проведите анализ методом главных компонент и визуализируйте первые две компоненты, используя все переменные, и раскрасьте рассказы в зависимости от авторства. Посчитайте долю кумулятивной дисперсии, объясненной первыми двумя компонентами. 0.10 0.20 0.30 0.40 0.50 В статье Палитра русской классики Л. Поповец собрала частоту встречаемости цветов в разных произведениях. Проанализируйте датасет методом главных компонент. Обнаружились ли кластеры? Посчитайте долю кумулятивной дисперсии, объясненной первыми двумя компонентами. 0.6 0.7 0.8 0.9 18.5 Другие методы уменьшения размерности Существуют и другие методы уменьшения размерности: CA, MCA LDA (Linear Discriminant Analysis), DCA (Discriminant Correspondence Analysis) tSNE (t-Distributed Stochastic Neighbor Embedding) и другие… "],
["tasks.html", "19 Задания 19.1 Вектор 19.2 Вектор. Операции с векторами 19.3 Вектор. Индексирование 19.4 Списки 19.5 Матрицы 19.6 Датафрейм", " 19 Задания 19.1 Вектор Посчитайте логарифм от 8912162342 по основанию 6 [1] 12.7867 Теперь натуральный логарифм 10 и умножьте его на 5 [1] 11.51293 Создайте вектор от 1 до 20 [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 Создайте вектор от 20 до 1 [1] 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 Создайте вектор от 1 до 20 и снова до 1. Число 20 должно присутствовать только один раз! [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 19 18 17 16 15 [26] 14 13 12 11 10 9 8 7 6 5 4 3 2 1 Создайте вектор 2, 4, 6, … , 18, 20 [1] 2 4 6 8 10 12 14 16 18 20 Создайте вектор из одной единицы, двух двоек, трех троек, …. , девяти девяток [1] 1 2 2 3 3 3 4 4 4 4 5 5 5 5 5 6 6 6 6 6 6 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 9 9 [39] 9 9 9 9 9 9 9 Сделайте вектор vec, в котором соедините 3, а также значения \"Мой\" и \"вектор\". [1] &quot;3&quot; &quot;Мой&quot; &quot;вектор&quot; Вычесть TRUE из 10 [1] 9 Соедините значение 10 и TRUE в вектор vec [1] 10 1 Соедините вектор vec и значение \"r\": [1] &quot;10&quot; &quot;1&quot; &quot;r&quot; Соедините значения 10, TRUE, \"r\" в вектор. [1] &quot;10&quot; &quot;TRUE&quot; &quot;r&quot; 19.2 Вектор. Операции с векторами Создайте вектор p, состоящий из значений 4, 5, 6, 7, и вектор q, состоящий из 0, 1, 2, 3. [1] 4 5 6 7 [1] 0 1 2 3 Посчитайте поэлементную сумму векторов p и q: [1] 4 6 8 10 Посчитайте поэлементную разницу p и q: [1] 4 4 4 4 Поделите каждый элемент вектора p на соответствующий ему элемент вектора q: О, да, Вам нужно делить на 0! [1] Inf 5.000000 3.000000 2.333333 Возведите каждый элемент вектора p в степень соответствующего ему элемента вектора q: [1] 1 5 36 343 Создайте вектор квадратов чисел от 1 до 10: [1] 1 4 9 16 25 36 49 64 81 100 Создайте вектор 0, 2, 0, 4, … , 18, 0, 20 [1] 0 2 0 4 0 6 0 8 0 10 0 12 0 14 0 16 0 18 0 20 19.3 Вектор. Индексирование Создайте вектор vec1: vec1 &lt;- c(3, 5, 2, 1, 8, 4, 9, 10, 3, 15, 1, 11) Найдите второй элемент вектора vec1: [1] 5 Найдите последний элемент вектора vec1 [1] 11 Найдите все значения вектора vec1, которые больше 4 [1] 5 8 9 10 15 11 Найдите все значения вектора vec1, которые больше 4, но меньше 10 [1] 5 8 9 Возведите в квадрат каждое значение вектора vec1 [1] 9 25 4 1 64 16 81 100 9 225 1 121 Возведите в квадрат каждое нечетное значение вектора и извлеките корень каждого четного значения vec1 [1] 9.000000 2.236068 4.000000 1.000000 64.000000 2.000000 81.000000 [8] 3.162278 9.000000 3.872983 1.000000 3.316625 Создайте вектор vec2, в котором будут значения все значения vec1, которые меньше 10 будут заменены на NA. [1] NA NA NA NA NA NA NA 10 NA 15 NA 11 Посчитайте сумму vec2 с помощью функции sum(). Ответ NA не считается! [1] 36 Создайте вектор 2, 4, 6, … , 18, 20 как минимум 2 новыми способами Знаю, это задание может показаться бессмысленным, но это очень базовая операция, с помощью которой можно, например, разделить данные на две части. Чем больше способов Вы знаете, тем лучше! integer(0) 19.4 Списки Дан список list_1: list_1 = list(numbers = 1:5, letters = letters, logic = TRUE) list_1 $numbers [1] 1 2 3 4 5 $letters [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; &quot;i&quot; &quot;j&quot; &quot;k&quot; &quot;l&quot; &quot;m&quot; &quot;n&quot; &quot;o&quot; &quot;p&quot; &quot;q&quot; &quot;r&quot; &quot;s&quot; [20] &quot;t&quot; &quot;u&quot; &quot;v&quot; &quot;w&quot; &quot;x&quot; &quot;y&quot; &quot;z&quot; $logic [1] TRUE Найдите первый элемент списка. Ответ должен быть списком. $numbers [1] 1 2 3 4 5 Теперь найдите содержание первого элемента списка двумя разными способами. Ответ должен быть вектором. [1] 1 2 3 4 5 [1] 1 2 3 4 5 Теперь возьмите первый элемент содержания первого элемента списка. Ответ должен быть вектором. [1] 1 Создайте список list_2, содержащий в себе два списка list_1 с именами pupa и lupa. $pupa $pupa$numbers [1] 1 2 3 4 5 $pupa$letters [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; &quot;i&quot; &quot;j&quot; &quot;k&quot; &quot;l&quot; &quot;m&quot; &quot;n&quot; &quot;o&quot; &quot;p&quot; &quot;q&quot; &quot;r&quot; &quot;s&quot; [20] &quot;t&quot; &quot;u&quot; &quot;v&quot; &quot;w&quot; &quot;x&quot; &quot;y&quot; &quot;z&quot; $pupa$logic [1] TRUE $lupa $lupa$numbers [1] 1 2 3 4 5 $lupa$letters [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; &quot;i&quot; &quot;j&quot; &quot;k&quot; &quot;l&quot; &quot;m&quot; &quot;n&quot; &quot;o&quot; &quot;p&quot; &quot;q&quot; &quot;r&quot; &quot;s&quot; [20] &quot;t&quot; &quot;u&quot; &quot;v&quot; &quot;w&quot; &quot;x&quot; &quot;y&quot; &quot;z&quot; $lupa$logic [1] TRUE Извлеките первый элемент списка, из него - второй полэлемент, а из него - третье значение [1] &quot;c&quot; 19.5 Матрицы Создайте матрицу 4х4, состоящую из единиц. Назовите ее M [,1] [,2] [,3] [,4] [1,] 1 1 1 1 [2,] 1 1 1 1 [3,] 1 1 1 1 [4,] 1 1 1 1 Поменяйте все некрайние значения матрицы M (то есть значения на позициях [2,2], [2,3], [3,2] и [3,3]) на число 2. [,1] [,2] [,3] [,4] [1,] 1 1 1 1 [2,] 1 2 2 1 [3,] 1 2 2 1 [4,] 1 1 1 1 Выделите второй и третий столбик из матрицы M [,1] [,2] [1,] 1 1 [2,] 2 2 [3,] 2 2 [4,] 1 1 Сравните (==) вторую колонку и вторую строчку матрицы M [1] TRUE TRUE TRUE TRUE Создайте таблицу умножения (9х9) в виде матрицы. Сохраните ее в переменную tab: [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [1,] 1 2 3 4 5 6 7 8 9 [2,] 2 4 6 8 10 12 14 16 18 [3,] 3 6 9 12 15 18 21 24 27 [4,] 4 8 12 16 20 24 28 32 36 [5,] 5 10 15 20 25 30 35 40 45 [6,] 6 12 18 24 30 36 42 48 54 [7,] 7 14 21 28 35 42 49 56 63 [8,] 8 16 24 32 40 48 56 64 72 [9,] 9 18 27 36 45 54 63 72 81 Из матрицы tab выделите подматрицу, включающую в себя только строчки с 6 по 8 и столбцы с 3 по 7. [,1] [,2] [,3] [,4] [,5] [1,] 18 24 30 36 42 [2,] 21 28 35 42 49 [3,] 24 32 40 48 56 Создайте матрицу с логическими значениями, где TRUE, если в этом месте в таблице умножения (tab) двузначное число и FALSE, если однозначное. Матрица - это почти вектор. К нему можно обращаться с единственным индексом. [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE [2,] FALSE FALSE FALSE FALSE TRUE TRUE TRUE TRUE TRUE [3,] FALSE FALSE FALSE TRUE TRUE TRUE TRUE TRUE TRUE [4,] FALSE FALSE TRUE TRUE TRUE TRUE TRUE TRUE TRUE [5,] FALSE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE [6,] FALSE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE [7,] FALSE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE [8,] FALSE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE [9,] FALSE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE Создайте матрицу tab2, в которой все значения tab меньше 10 заменены на 0. [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [1,] 0 0 0 0 0 0 0 0 0 [2,] 0 0 0 0 10 12 14 16 18 [3,] 0 0 0 12 15 18 21 24 27 [4,] 0 0 12 16 20 24 28 32 36 [5,] 0 10 15 20 25 30 35 40 45 [6,] 0 12 18 24 30 36 42 48 54 [7,] 0 14 21 28 35 42 49 56 63 [8,] 0 16 24 32 40 48 56 64 72 [9,] 0 18 27 36 45 54 63 72 81 19.6 Датафрейм Кто является 274ым персонажем в got датафрейме? Из какого он дома? Найдите имена всех персонажей из дома (Allegiances) \"Tyrell\" и \"House Tyrell\". [1] &quot;Alerie Hightower&quot; &quot;Alla Tyrell&quot; &quot;Alyn Ambrose&quot; [4] &quot;Arryk (Guard)&quot; &quot;Arwyn Oakheart&quot; &quot;Bayard Norcross&quot; [7] &quot;Blue Bard&quot; &quot;Butterbumps&quot; &quot;Elinor Tyrell&quot; [10] &quot;Erryk (Guard)&quot; &quot;Garlan Tyrell&quot; &quot;Hobber Redwyne&quot; [13] &quot;Horas Redwyne&quot; &quot;Janna Tyrell&quot; &quot;Kerwin&quot; [16] &quot;Leo Tyrell&quot; &quot;Leonette Fossoway&quot; &quot;Loras Tyrell&quot; [19] &quot;Mace Tyrell&quot; &quot;Margaery Tyrell&quot; &quot;Megga Tyrell&quot; [22] &quot;Meredyth Crane&quot; &quot;Olenna Redwyne&quot; &quot;Paxter Redwyne&quot; [25] &quot;Randyll Tarly&quot; &quot;Talbert Serry&quot; Создайте новый датафрейм greyjoy_women, который будет включать в себя только женщин Грейджоев (\"Greyjoy\", \"House Greyjoy\") Сколько всего женских персонажей в книгах “Песни льда и пламени”? [1] 157 Сколько всего женских персонажей дворянского происхождения в книгах “Песни льда и пламени”? [1] 84 Поcчитатйе процентную (!) долю знати от общего числа персонажей (Nobility) в Night's Watch. [1] 9.482759 Поcчитатйе процентную (!) долю знати от общего числа персонажей (Nobility) у Lannister. [1] 71.60494 Какая из книг цикла самая кровавая? Для ответа на этот вопрос подсчитайте таблицу частот для колонки got$Book.of.Death: Это можно сделать с помощью функции table(), но в дальнейшем Вы узнаете и другие способы - подобная задача возникает достаточно часто. 1 2 3 4 5 49 73 97 27 61 "],
["solutions.html", "20 Решения_заданий 20.1 Вектор 20.2 Вектор. Операции с векторами 20.3 Вектор. Индексирование 20.4 Списки 20.5 Матрицы 20.6 Датафрейм", " 20 Решения_заданий 20.1 Вектор Посчитайте логарифм от 8912162342 по основанию 6 log(8912162342, 6) [1] 12.7867 Теперь натуральный логарифм 10 и умножьте его на 5 log(10)*5 [1] 11.51293 Создайте вектор от 1 до 20 1:20 [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 Создайте вектор от 20 до 1 20:1 [1] 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 Создайте вектор от 1 до 20 и снова до 1. Число 20 должно присутствовать только один раз! c(1:20, 19:1) [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 19 18 17 16 15 [26] 14 13 12 11 10 9 8 7 6 5 4 3 2 1 Создайте вектор 2, 4, 6, … , 18, 20 seq(2,20, 2) [1] 2 4 6 8 10 12 14 16 18 20 Создайте вектор из одной единицы, двух двоек, трех троек, …. , девяти девяток rep(1:9, 1:9) [1] 1 2 2 3 3 3 4 4 4 4 5 5 5 5 5 6 6 6 6 6 6 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 9 9 [39] 9 9 9 9 9 9 9 Сделайте вектор vec, в котором соедините 3, а также значения \"Мой\" и \"вектор\". vec &lt;- c(3, &quot;Мой&quot;, &quot;вектор&quot;) vec [1] &quot;3&quot; &quot;Мой&quot; &quot;вектор&quot; Вычесть TRUE из 10 10 - TRUE [1] 9 Соедините значение 10 и TRUE в вектор vec vec &lt;- c(10, TRUE) vec [1] 10 1 Соедините вектор vec и значение \"r\": c(vec, &quot;r&quot;) [1] &quot;10&quot; &quot;1&quot; &quot;r&quot; Соедините значения 10, TRUE, \"r\" в вектор. c(10, TRUE, &quot;r&quot;) [1] &quot;10&quot; &quot;TRUE&quot; &quot;r&quot; 20.2 Вектор. Операции с векторами Создайте вектор p, состоящий из значений 4, 5, 6, 7, и вектор q, состоящий из 0, 1, 2, 3. p &lt;- 4:7 p [1] 4 5 6 7 q &lt;- 0:3 q [1] 0 1 2 3 Посчитайте поэлементную сумму векторов p и q: p + q [1] 4 6 8 10 Посчитайте поэлементную разницу p и q: p - q [1] 4 4 4 4 Поделите каждый элемент вектора p на соответствующий ему элемент вектора q: О, да, Вам нужно делить на 0! p/q [1] Inf 5.000000 3.000000 2.333333 Возведите каждый элемент вектора p в степень соответствующего ему элемента вектора q: p^q [1] 1 5 36 343 Создайте вектор квадратов чисел от 1 до 10: (1:10)^2 [1] 1 4 9 16 25 36 49 64 81 100 Создайте вектор 0, 2, 0, 4, … , 18, 0, 20 1:20 * 0:1 [1] 0 2 0 4 0 6 0 8 0 10 0 12 0 14 0 16 0 18 0 20 20.3 Вектор. Индексирование Создайте вектор vec1: vec1 &lt;- c(3, 5, 2, 1, 8, 4, 9, 10, 3, 15, 1, 11) Найдите второй элемент вектора vec1: vec1[2] [1] 5 Найдите последний элемент вектора vec1 vec1[length(vec1)] [1] 11 Найдите все значения вектора vec1, которые больше 4 vec1[vec1&gt;4] [1] 5 8 9 10 15 11 Найдите все значения вектора vec1, которые больше 4, но меньше 10 vec1[vec1&gt;4 &amp; vec1&lt;10] [1] 5 8 9 Возведите в квадрат каждое значение вектора vec1 vec1^2 [1] 9 25 4 1 64 16 81 100 9 225 1 121 Возведите в квадрат каждое нечетное значение вектора и извлеките корень каждого четного значения vec1 vec1 ^ c(2, 0.5) [1] 9.000000 2.236068 4.000000 1.000000 64.000000 2.000000 81.000000 [8] 3.162278 9.000000 3.872983 1.000000 3.316625 Создайте вектор vec2, в котором будут значения все значения vec1, которые меньше 10 будут заменены на NA. vec2 &lt;- vec1 vec2[vec2&lt;10] &lt;- NA vec2 [1] NA NA NA NA NA NA NA 10 NA 15 NA 11 Посчитайте сумму vec2 с помощью функции sum(). Ответ NA не считается! sum(vec2, na.rm = TRUE) [1] 36 Создайте вектор 2, 4, 6, … , 18, 20 как минимум 2 новыми способами Знаю, это задание может показаться бессмысленным, но это очень базовая операция, с помощью которой можно, например, разделить данные на две части. Чем больше способов Вы знаете, тем лучше! (1:20)[c(F,T)] integer(0) #(1:10)*2 20.4 Списки Дан список list_1: list_1 = list(numbers = 1:5, letters = letters, logic = TRUE) list_1 $numbers [1] 1 2 3 4 5 $letters [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; &quot;i&quot; &quot;j&quot; &quot;k&quot; &quot;l&quot; &quot;m&quot; &quot;n&quot; &quot;o&quot; &quot;p&quot; &quot;q&quot; &quot;r&quot; &quot;s&quot; [20] &quot;t&quot; &quot;u&quot; &quot;v&quot; &quot;w&quot; &quot;x&quot; &quot;y&quot; &quot;z&quot; $logic [1] TRUE Найдите первый элемент списка. Ответ должен быть списком. list_1[1] $numbers [1] 1 2 3 4 5 Теперь найдите содержание первого элемента списка двумя разными способами. Ответ должен быть вектором. list_1[[1]] [1] 1 2 3 4 5 list_1$numbers [1] 1 2 3 4 5 Теперь возьмите первый элемент содержания первого элемента списка. Ответ должен быть вектором. list_1[[1]][1] [1] 1 Создайте список list_2, содержащий в себе два списка list_1 с именами pupa и lupa. list_2 = list(pupa = list_1, lupa = list_1) list_2 $pupa $pupa$numbers [1] 1 2 3 4 5 $pupa$letters [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; &quot;i&quot; &quot;j&quot; &quot;k&quot; &quot;l&quot; &quot;m&quot; &quot;n&quot; &quot;o&quot; &quot;p&quot; &quot;q&quot; &quot;r&quot; &quot;s&quot; [20] &quot;t&quot; &quot;u&quot; &quot;v&quot; &quot;w&quot; &quot;x&quot; &quot;y&quot; &quot;z&quot; $pupa$logic [1] TRUE $lupa $lupa$numbers [1] 1 2 3 4 5 $lupa$letters [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; &quot;i&quot; &quot;j&quot; &quot;k&quot; &quot;l&quot; &quot;m&quot; &quot;n&quot; &quot;o&quot; &quot;p&quot; &quot;q&quot; &quot;r&quot; &quot;s&quot; [20] &quot;t&quot; &quot;u&quot; &quot;v&quot; &quot;w&quot; &quot;x&quot; &quot;y&quot; &quot;z&quot; $lupa$logic [1] TRUE Извлеките первый элемент списка, из него - второй полэлемент, а из него - третье значение list_2[[1]][[2]][3] [1] &quot;c&quot; 20.5 Матрицы Создайте матрицу 4х4, состоящую из единиц. Назовите ее M M &lt;- matrix(rep(1, 16), ncol = 4) M [,1] [,2] [,3] [,4] [1,] 1 1 1 1 [2,] 1 1 1 1 [3,] 1 1 1 1 [4,] 1 1 1 1 Поменяйте все некрайние значения матрицы M (то есть значения на позициях [2,2], [2,3], [3,2] и [3,3]) на число 2. M[2:3, 2:3] &lt;- 2 M [,1] [,2] [,3] [,4] [1,] 1 1 1 1 [2,] 1 2 2 1 [3,] 1 2 2 1 [4,] 1 1 1 1 Выделите второй и третий столбик из матрицы M M[,2:3] [,1] [,2] [1,] 1 1 [2,] 2 2 [3,] 2 2 [4,] 1 1 Сравните (==) вторую колонку и вторую строчку матрицы M M[,2] == M[2,] [1] TRUE TRUE TRUE TRUE Создайте таблицу умножения (9х9) в виде матрицы. Сохраните ее в переменную tab: tab &lt;- matrix(rep(1:9, rep(9,9))*(1:9), nrow = 9) tab [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [1,] 1 2 3 4 5 6 7 8 9 [2,] 2 4 6 8 10 12 14 16 18 [3,] 3 6 9 12 15 18 21 24 27 [4,] 4 8 12 16 20 24 28 32 36 [5,] 5 10 15 20 25 30 35 40 45 [6,] 6 12 18 24 30 36 42 48 54 [7,] 7 14 21 28 35 42 49 56 63 [8,] 8 16 24 32 40 48 56 64 72 [9,] 9 18 27 36 45 54 63 72 81 #Еще #outer(1:9, 1:9, &quot;*&quot;) #1:9 %o% 1:9 Из матрицы tab выделите подматрицу, включающую в себя только строчки с 6 по 8 и столбцы с 3 по 7. tab[6:8, 3:7] [,1] [,2] [,3] [,4] [,5] [1,] 18 24 30 36 42 [2,] 21 28 35 42 49 [3,] 24 32 40 48 56 Создайте матрицу с логическими значениями, где TRUE, если в этом месте в таблице умножения (tab) двузначное число и FALSE, если однозначное. Матрица - это почти вектор. К нему можно обращаться с единственным индексом. tab&gt;=10 [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE [2,] FALSE FALSE FALSE FALSE TRUE TRUE TRUE TRUE TRUE [3,] FALSE FALSE FALSE TRUE TRUE TRUE TRUE TRUE TRUE [4,] FALSE FALSE TRUE TRUE TRUE TRUE TRUE TRUE TRUE [5,] FALSE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE [6,] FALSE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE [7,] FALSE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE [8,] FALSE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE [9,] FALSE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE Создайте матрицу tab2, в которой все значения tab меньше 10 заменены на 0. tab2 &lt;- tab tab2[tab&lt;10] &lt;- 0 tab2 [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [1,] 0 0 0 0 0 0 0 0 0 [2,] 0 0 0 0 10 12 14 16 18 [3,] 0 0 0 12 15 18 21 24 27 [4,] 0 0 12 16 20 24 28 32 36 [5,] 0 10 15 20 25 30 35 40 45 [6,] 0 12 18 24 30 36 42 48 54 [7,] 0 14 21 28 35 42 49 56 63 [8,] 0 16 24 32 40 48 56 64 72 [9,] 0 18 27 36 45 54 63 72 81 20.6 Датафрейм Кто является 274ым персонажем в got датафрейме? Из какого он дома? got[274, 1:2] Найдите имена всех персонажей из дома (Allegiances) \"Tyrell\" и \"House Tyrell\". got[got$Allegiances %in% c(&quot;Tyrell&quot;, &quot;House Tyrell&quot;), &quot;Name&quot;] [1] &quot;Alerie Hightower&quot; &quot;Alla Tyrell&quot; &quot;Alyn Ambrose&quot; [4] &quot;Arryk (Guard)&quot; &quot;Arwyn Oakheart&quot; &quot;Bayard Norcross&quot; [7] &quot;Blue Bard&quot; &quot;Butterbumps&quot; &quot;Elinor Tyrell&quot; [10] &quot;Erryk (Guard)&quot; &quot;Garlan Tyrell&quot; &quot;Hobber Redwyne&quot; [13] &quot;Horas Redwyne&quot; &quot;Janna Tyrell&quot; &quot;Kerwin&quot; [16] &quot;Leo Tyrell&quot; &quot;Leonette Fossoway&quot; &quot;Loras Tyrell&quot; [19] &quot;Mace Tyrell&quot; &quot;Margaery Tyrell&quot; &quot;Megga Tyrell&quot; [22] &quot;Meredyth Crane&quot; &quot;Olenna Redwyne&quot; &quot;Paxter Redwyne&quot; [25] &quot;Randyll Tarly&quot; &quot;Talbert Serry&quot; Создайте новый датафрейм greyjoy_women, который будет включать в себя только женщин Грейджоев (\"Greyjoy\", \"House Greyjoy\") greyjoy_women &lt;- got[got$Allegiances %in% c(&quot;Greyjoy&quot;, &quot;House Greyjoy&quot;) &amp; got$Gender == 0, ] greyjoy_women Сколько всего женских персонажей в книгах “Песни льда и пламени”? sum(got$Gender == 0) [1] 157 Сколько всего женских персонажей дворянского происхождения в книгах “Песни льда и пламени”? sum((got$Gender == 0) &amp; (got$Nobility == 1)) [1] 84 Поcчитатйе процентную (!) долю знати от общего числа персонажей (Nobility) в Night's Watch. mean(got[got$Allegiances == &quot;Night&#39;s Watch&quot;, &quot;Nobility&quot;])*100 [1] 9.482759 Поcчитатйе процентную (!) долю знати от общего числа персонажей (Nobility) у Lannister. mean(got[got$Allegiances == &quot;Lannister&quot;, &quot;Nobility&quot;])*100 [1] 71.60494 Какая из книг цикла самая кровавая? Для ответа на этот вопрос подсчитайте таблицу частот для колонки got$Book.of.Death: Это можно сделать с помощью функции table(), но в дальнейшем Вы узнаете и другие способы - подобная задача возникает достаточно часто. table(got$Book.of.Death) 1 2 3 4 5 49 73 97 27 61 "],
["ссылки-на-литературу.html", "Ссылки на литературу", " Ссылки на литературу "]
]
