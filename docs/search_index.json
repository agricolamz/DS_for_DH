[
["lists.html", "6 Работа со списками 6.1 Что такое списки? 6.2 Пакет purrr", " 6 Работа со списками library(tidyverse) 6.1 Что такое списки? Мы обсуждали в разделе @ref{list} тип данных список, и все особенности их синтаксиса: x &lt;- list(m = &quot;a&quot;, n = c(2, 4), o = c(&quot;blue&quot;, &quot;green&quot;, &quot;red&quot;)) x ## $m ## [1] &quot;a&quot; ## ## $n ## [1] 2 4 ## ## $o ## [1] &quot;blue&quot; &quot;green&quot; &quot;red&quot; x$m ## [1] &quot;a&quot; x[1] ## $m ## [1] &quot;a&quot; x[[2]] ## [1] 2 4 x[[2]][2] ## [1] 4 Списки вне R обычно хранят в файлах типа .json (по-английски говорят с ударением на первый слог, а вот по-русски прижился вариант с ударением на второй слог: джейсо́н) или .xml. 6.1.1 Превращение JSON в список и обратно Самое важное, что нужно знать, про .json, это то, что там могут хранится: пары ключ и значение, заключенные в фигурные скобки {\"ключ\":\"значение\"} упорядочные множества значений, заключенные в квадратные скобки [\"значение_1\",\"значение_2\",...] некоторые другие типы данных Чтение и запись .json файлов осуществляется при помощи пакета jsonlite (не входит в tidyverse). Для примера скачаем датасет 30 героев Игры престолов, который Дж. Р. Р. Мартин достал с ресурса An API of Ice And Fire. got_chars &lt;- jsonlite::read_json(&quot;https://raw.githubusercontent.com/agricolamz/DS_for_DH/master/data/got_chars.json&quot;) got_chars[1] ## [[1]] ## [[1]]$url ## [1] &quot;https://www.anapioficeandfire.com/api/characters/1022&quot; ## ## [[1]]$id ## [1] 1022 ## ## [[1]]$name ## [1] &quot;Theon Greyjoy&quot; ## ## [[1]]$gender ## [1] &quot;Male&quot; ## ## [[1]]$culture ## [1] &quot;Ironborn&quot; ## ## [[1]]$born ## [1] &quot;In 278 AC or 279 AC, at Pyke&quot; ## ## [[1]]$died ## [1] &quot;&quot; ## ## [[1]]$alive ## [1] TRUE ## ## [[1]]$titles ## [[1]]$titles[[1]] ## [1] &quot;Prince of Winterfell&quot; ## ## [[1]]$titles[[2]] ## [1] &quot;Captain of Sea Bitch&quot; ## ## [[1]]$titles[[3]] ## [1] &quot;Lord of the Iron Islands (by law of the green lands)&quot; ## ## ## [[1]]$aliases ## [[1]]$aliases[[1]] ## [1] &quot;Prince of Fools&quot; ## ## [[1]]$aliases[[2]] ## [1] &quot;Theon Turncloak&quot; ## ## [[1]]$aliases[[3]] ## [1] &quot;Reek&quot; ## ## [[1]]$aliases[[4]] ## [1] &quot;Theon Kinslayer&quot; ## ## ## [[1]]$father ## [1] &quot;&quot; ## ## [[1]]$mother ## [1] &quot;&quot; ## ## [[1]]$spouse ## [1] &quot;&quot; ## ## [[1]]$allegiances ## [1] &quot;House Greyjoy of Pyke&quot; ## ## [[1]]$books ## [[1]]$books[[1]] ## [1] &quot;A Game of Thrones&quot; ## ## [[1]]$books[[2]] ## [1] &quot;A Storm of Swords&quot; ## ## [[1]]$books[[3]] ## [1] &quot;A Feast for Crows&quot; ## ## ## [[1]]$povBooks ## [[1]]$povBooks[[1]] ## [1] &quot;A Clash of Kings&quot; ## ## [[1]]$povBooks[[2]] ## [1] &quot;A Dance with Dragons&quot; ## ## ## [[1]]$tvSeries ## [[1]]$tvSeries[[1]] ## [1] &quot;Season 1&quot; ## ## [[1]]$tvSeries[[2]] ## [1] &quot;Season 2&quot; ## ## [[1]]$tvSeries[[3]] ## [1] &quot;Season 3&quot; ## ## [[1]]$tvSeries[[4]] ## [1] &quot;Season 4&quot; ## ## [[1]]$tvSeries[[5]] ## [1] &quot;Season 5&quot; ## ## [[1]]$tvSeries[[6]] ## [1] &quot;Season 6&quot; ## ## ## [[1]]$playedBy ## [1] &quot;Alfie Allen&quot; Так как jsonlite конфликтует в одной функции с tidyverse, я не загружаю библиотеку полностью при помощи команды library(jsonlite), а обращаюсь к функциям пакета при помощи выражения jsonlite::...(). Пакет jsonlite позволяет записывать .json файлы при помощи функции write_json(): jsonlite::write_json(got_chars, &quot;got_chars.json&quot;, auto_unbox = TRUE) # аргумент auto_unbox позволяет сохранять структуру, которую мы видим в R 6.1.2 Превращение .xml в список и обратно Самое важное, что нужно знать, про .xml, это то, что этот формат представляет собой набор некоторых сущностей, которые кодируются при помощи двух тегов: открывающего &lt;...&gt; и закрывающего &lt;/...&gt;. &lt;blablabla&gt;Hello, world!&lt;/blablabla&gt; Набор сущностей может быть любым, а главное, нет фиксированного набора сущностей — пользователи могут сочинять свои стандарты, используя .xml. Кроме того, у сущностей, могут быть свои атрибуты, которые перечисляются в открывающем теге: &lt;ingredient amount=&quot;3&quot; unit=&quot;стакан&quot;&gt;Мука&lt;/ingredient&gt; &lt;ingredient amount=&quot;0.25&quot; unit=&quot;грамм&quot;&gt;Дрожжи&lt;/ingredient&gt; &lt;ingredient amount=&quot;1.5&quot; unit=&quot;стакан&quot;&gt;Тёплая вода&lt;/ingredient&gt; Чтение и запись .xml файла осущетсвляется при помощи функций read_xml() и write_xml() из пакета xml2: library(&quot;xml2&quot;) xml_example &lt;- read_xml(&#39;&lt;body&gt; &lt;ingredient amount=&quot;3&quot; unit=&quot;стакан&quot;&gt;Мука&lt;/ingredient&gt; &lt;ingredient amount=&quot;0.25&quot; unit=&quot;грамм&quot;&gt;Дрожжи&lt;/ingredient&gt; &lt;ingredient amount=&quot;1.5&quot; unit=&quot;стакан&quot;&gt;Тёплая вода&lt;/ingredient&gt; &lt;/body&gt;&#39;) xml_example ## {xml_document} ## &lt;body&gt; ## [1] &lt;ingredient amount=&quot;3&quot; unit=&quot;стакан&quot;&gt;Мука&lt;/ingredient&gt; ## [2] &lt;ingredient amount=&quot;0.25&quot; unit=&quot;грамм&quot;&gt;Дрожжи&lt;/ingredient&gt; ## [3] &lt;ingredient amount=&quot;1.5&quot; unit=&quot;стакан&quot;&gt;Тёплая вода&lt;/ingredient&gt; write_xml(xml_example, &quot;path/to/the/file.xml&quot;) Чтобы избавиться от тегов и превратить прочитанное в список используется команда xml_example &lt;- as_list(xml_example) xml_example ## $body ## $body$ingredient ## $body$ingredient[[1]] ## [1] &quot;Мука&quot; ## ## attr(,&quot;amount&quot;) ## [1] &quot;3&quot; ## attr(,&quot;unit&quot;) ## [1] &quot;стакан&quot; ## ## $body$ingredient ## $body$ingredient[[1]] ## [1] &quot;Дрожжи&quot; ## ## attr(,&quot;amount&quot;) ## [1] &quot;0.25&quot; ## attr(,&quot;unit&quot;) ## [1] &quot;грамм&quot; ## ## $body$ingredient ## $body$ingredient[[1]] ## [1] &quot;Тёплая вода&quot; ## ## attr(,&quot;amount&quot;) ## [1] &quot;1.5&quot; ## attr(,&quot;unit&quot;) ## [1] &quot;стакан&quot; Теперь полученная переменная уже является списком: xml_example$body[[2]] ## [[1]] ## [1] &quot;Дрожжи&quot; ## ## attr(,&quot;amount&quot;) ## [1] &quot;0.25&quot; ## attr(,&quot;unit&quot;) ## [1] &quot;грамм&quot; Здесь также нужно отметить, некоторое важное отличие .xml и .json, которое видно в рассматриваемом примере: атрибуты, которые прописываются в открывающем теге, передаются и в список в R. Функция attributes() возвращает список атрибутов и их значений: xml_example$body[[2]] %&gt;% attributes() ## $amount ## [1] &quot;0.25&quot; ## ## $unit ## [1] &quot;грамм&quot; Если нужен конкретный аттрибут, то нужно использовать функцию attr(): xml_example$body[[2]] %&gt;% attr(&quot;amount&quot;) ## [1] &quot;0.25&quot; Также на данном примере видна самая большая проблема при работе с .xml: в нашем списке есть три узла под названием ingredient, так что хоть эти узлы и имеют имя, к ним все равно нужно обращаться по индексу. 6.1.3 Просмотр списков в R Просмоторщик списков встроен в RStudio. Его можно увидеть, если ткнуть в объект в R или написать команду View(got_chars). Альтернативой может стать функция jsonedit() из пакета listviewer. Кроме того, что-то можно попробовать выяснить, используя функцию str(). str(got_chars[1]) ## List of 1 ## $ :List of 18 ## ..$ url : chr &quot;https://www.anapioficeandfire.com/api/characters/1022&quot; ## ..$ id : int 1022 ## ..$ name : chr &quot;Theon Greyjoy&quot; ## ..$ gender : chr &quot;Male&quot; ## ..$ culture : chr &quot;Ironborn&quot; ## ..$ born : chr &quot;In 278 AC or 279 AC, at Pyke&quot; ## ..$ died : chr &quot;&quot; ## ..$ alive : logi TRUE ## ..$ titles :List of 3 ## .. ..$ : chr &quot;Prince of Winterfell&quot; ## .. ..$ : chr &quot;Captain of Sea Bitch&quot; ## .. ..$ : chr &quot;Lord of the Iron Islands (by law of the green lands)&quot; ## ..$ aliases :List of 4 ## .. ..$ : chr &quot;Prince of Fools&quot; ## .. ..$ : chr &quot;Theon Turncloak&quot; ## .. ..$ : chr &quot;Reek&quot; ## .. ..$ : chr &quot;Theon Kinslayer&quot; ## ..$ father : chr &quot;&quot; ## ..$ mother : chr &quot;&quot; ## ..$ spouse : chr &quot;&quot; ## ..$ allegiances: chr &quot;House Greyjoy of Pyke&quot; ## ..$ books :List of 3 ## .. ..$ : chr &quot;A Game of Thrones&quot; ## .. ..$ : chr &quot;A Storm of Swords&quot; ## .. ..$ : chr &quot;A Feast for Crows&quot; ## ..$ povBooks :List of 2 ## .. ..$ : chr &quot;A Clash of Kings&quot; ## .. ..$ : chr &quot;A Dance with Dragons&quot; ## ..$ tvSeries :List of 6 ## .. ..$ : chr &quot;Season 1&quot; ## .. ..$ : chr &quot;Season 2&quot; ## .. ..$ : chr &quot;Season 3&quot; ## .. ..$ : chr &quot;Season 4&quot; ## .. ..$ : chr &quot;Season 5&quot; ## .. ..$ : chr &quot;Season 6&quot; ## ..$ playedBy : chr &quot;Alfie Allen&quot; str(got_chars[1], max.level = 2) ## List of 1 ## $ :List of 18 ## ..$ url : chr &quot;https://www.anapioficeandfire.com/api/characters/1022&quot; ## ..$ id : int 1022 ## ..$ name : chr &quot;Theon Greyjoy&quot; ## ..$ gender : chr &quot;Male&quot; ## ..$ culture : chr &quot;Ironborn&quot; ## ..$ born : chr &quot;In 278 AC or 279 AC, at Pyke&quot; ## ..$ died : chr &quot;&quot; ## ..$ alive : logi TRUE ## ..$ titles :List of 3 ## ..$ aliases :List of 4 ## ..$ father : chr &quot;&quot; ## ..$ mother : chr &quot;&quot; ## ..$ spouse : chr &quot;&quot; ## ..$ allegiances: chr &quot;House Greyjoy of Pyke&quot; ## ..$ books :List of 3 ## ..$ povBooks :List of 2 ## ..$ tvSeries :List of 6 ## ..$ playedBy : chr &quot;Alfie Allen&quot; str(xml_example) ## List of 1 ## $ body:List of 3 ## ..$ ingredient:List of 1 ## .. ..$ : chr &quot;Мука&quot; ## .. ..- attr(*, &quot;amount&quot;)= chr &quot;3&quot; ## .. ..- attr(*, &quot;unit&quot;)= chr &quot;стакан&quot; ## ..$ ingredient:List of 1 ## .. ..$ : chr &quot;Дрожжи&quot; ## .. ..- attr(*, &quot;amount&quot;)= chr &quot;0.25&quot; ## .. ..- attr(*, &quot;unit&quot;)= chr &quot;грамм&quot; ## ..$ ingredient:List of 1 ## .. ..$ : chr &quot;Тёплая вода&quot; ## .. ..- attr(*, &quot;amount&quot;)= chr &quot;1.5&quot; ## .. ..- attr(*, &quot;unit&quot;)= chr &quot;стакан&quot; 6.2 Пакет purrr В tidyverse встроен пакет purrr, который среди прочего позволяет работать со списками. Существует cheat sheet по purrr. 6.2.1 Функция map() и map...() Можно выводить значения в списке на основе имени: got_chars %&gt;% map(&quot;name&quot;) ## [[1]] ## [1] &quot;Theon Greyjoy&quot; ## ## [[2]] ## [1] &quot;Tyrion Lannister&quot; ## ## [[3]] ## [1] &quot;Victarion Greyjoy&quot; ## ## [[4]] ## [1] &quot;Will&quot; ## ## [[5]] ## [1] &quot;Areo Hotah&quot; ## ## [[6]] ## [1] &quot;Chett&quot; ## ## [[7]] ## [1] &quot;Cressen&quot; ## ## [[8]] ## [1] &quot;Arianne Martell&quot; ## ## [[9]] ## [1] &quot;Daenerys Targaryen&quot; ## ## [[10]] ## [1] &quot;Davos Seaworth&quot; ## ## [[11]] ## [1] &quot;Arya Stark&quot; ## ## [[12]] ## [1] &quot;Arys Oakheart&quot; ## ## [[13]] ## [1] &quot;Asha Greyjoy&quot; ## ## [[14]] ## [1] &quot;Barristan Selmy&quot; ## ## [[15]] ## [1] &quot;Varamyr&quot; ## ## [[16]] ## [1] &quot;Brandon Stark&quot; ## ## [[17]] ## [1] &quot;Brienne of Tarth&quot; ## ## [[18]] ## [1] &quot;Catelyn Stark&quot; ## ## [[19]] ## [1] &quot;Cersei Lannister&quot; ## ## [[20]] ## [1] &quot;Eddard Stark&quot; ## ## [[21]] ## [1] &quot;Jaime Lannister&quot; ## ## [[22]] ## [1] &quot;Jon Connington&quot; ## ## [[23]] ## [1] &quot;Jon Snow&quot; ## ## [[24]] ## [1] &quot;Aeron Greyjoy&quot; ## ## [[25]] ## [1] &quot;Kevan Lannister&quot; ## ## [[26]] ## [1] &quot;Melisandre&quot; ## ## [[27]] ## [1] &quot;Merrett Frey&quot; ## ## [[28]] ## [1] &quot;Quentyn Martell&quot; ## ## [[29]] ## [1] &quot;Samwell Tarly&quot; ## ## [[30]] ## [1] &quot;Sansa Stark&quot; Можно выводить значения в списке на основе индекса: got_chars %&gt;% map(3) ## [[1]] ## [1] &quot;Theon Greyjoy&quot; ## ## [[2]] ## [1] &quot;Tyrion Lannister&quot; ## ## [[3]] ## [1] &quot;Victarion Greyjoy&quot; ## ## [[4]] ## [1] &quot;Will&quot; ## ## [[5]] ## [1] &quot;Areo Hotah&quot; ## ## [[6]] ## [1] &quot;Chett&quot; ## ## [[7]] ## [1] &quot;Cressen&quot; ## ## [[8]] ## [1] &quot;Arianne Martell&quot; ## ## [[9]] ## [1] &quot;Daenerys Targaryen&quot; ## ## [[10]] ## [1] &quot;Davos Seaworth&quot; ## ## [[11]] ## [1] &quot;Arya Stark&quot; ## ## [[12]] ## [1] &quot;Arys Oakheart&quot; ## ## [[13]] ## [1] &quot;Asha Greyjoy&quot; ## ## [[14]] ## [1] &quot;Barristan Selmy&quot; ## ## [[15]] ## [1] &quot;Varamyr&quot; ## ## [[16]] ## [1] &quot;Brandon Stark&quot; ## ## [[17]] ## [1] &quot;Brienne of Tarth&quot; ## ## [[18]] ## [1] &quot;Catelyn Stark&quot; ## ## [[19]] ## [1] &quot;Cersei Lannister&quot; ## ## [[20]] ## [1] &quot;Eddard Stark&quot; ## ## [[21]] ## [1] &quot;Jaime Lannister&quot; ## ## [[22]] ## [1] &quot;Jon Connington&quot; ## ## [[23]] ## [1] &quot;Jon Snow&quot; ## ## [[24]] ## [1] &quot;Aeron Greyjoy&quot; ## ## [[25]] ## [1] &quot;Kevan Lannister&quot; ## ## [[26]] ## [1] &quot;Melisandre&quot; ## ## [[27]] ## [1] &quot;Merrett Frey&quot; ## ## [[28]] ## [1] &quot;Quentyn Martell&quot; ## ## [[29]] ## [1] &quot;Samwell Tarly&quot; ## ## [[30]] ## [1] &quot;Sansa Stark&quot; Достаточно полезно знать о функции unlist(), которая “убивает” все сложную структуру: got_chars %&gt;% map(&quot;name&quot;) %&gt;% unlist() ## [1] &quot;Theon Greyjoy&quot; &quot;Tyrion Lannister&quot; &quot;Victarion Greyjoy&quot; ## [4] &quot;Will&quot; &quot;Areo Hotah&quot; &quot;Chett&quot; ## [7] &quot;Cressen&quot; &quot;Arianne Martell&quot; &quot;Daenerys Targaryen&quot; ## [10] &quot;Davos Seaworth&quot; &quot;Arya Stark&quot; &quot;Arys Oakheart&quot; ## [13] &quot;Asha Greyjoy&quot; &quot;Barristan Selmy&quot; &quot;Varamyr&quot; ## [16] &quot;Brandon Stark&quot; &quot;Brienne of Tarth&quot; &quot;Catelyn Stark&quot; ## [19] &quot;Cersei Lannister&quot; &quot;Eddard Stark&quot; &quot;Jaime Lannister&quot; ## [22] &quot;Jon Connington&quot; &quot;Jon Snow&quot; &quot;Aeron Greyjoy&quot; ## [25] &quot;Kevan Lannister&quot; &quot;Melisandre&quot; &quot;Merrett Frey&quot; ## [28] &quot;Quentyn Martell&quot; &quot;Samwell Tarly&quot; &quot;Sansa Stark&quot; Для этого есть и отдельные функции, которые позволяют превратить все в вектор заданного типа: got_chars %&gt;% map_chr(&quot;name&quot;) ## [1] &quot;Theon Greyjoy&quot; &quot;Tyrion Lannister&quot; &quot;Victarion Greyjoy&quot; ## [4] &quot;Will&quot; &quot;Areo Hotah&quot; &quot;Chett&quot; ## [7] &quot;Cressen&quot; &quot;Arianne Martell&quot; &quot;Daenerys Targaryen&quot; ## [10] &quot;Davos Seaworth&quot; &quot;Arya Stark&quot; &quot;Arys Oakheart&quot; ## [13] &quot;Asha Greyjoy&quot; &quot;Barristan Selmy&quot; &quot;Varamyr&quot; ## [16] &quot;Brandon Stark&quot; &quot;Brienne of Tarth&quot; &quot;Catelyn Stark&quot; ## [19] &quot;Cersei Lannister&quot; &quot;Eddard Stark&quot; &quot;Jaime Lannister&quot; ## [22] &quot;Jon Connington&quot; &quot;Jon Snow&quot; &quot;Aeron Greyjoy&quot; ## [25] &quot;Kevan Lannister&quot; &quot;Melisandre&quot; &quot;Merrett Frey&quot; ## [28] &quot;Quentyn Martell&quot; &quot;Samwell Tarly&quot; &quot;Sansa Stark&quot; got_chars %&gt;% map_int(&quot;id&quot;) ## [1] 1022 1052 1074 1109 1166 1267 1295 130 1303 1319 148 149 150 168 2066 ## [16] 208 216 232 238 339 529 576 583 60 605 743 751 844 954 957 got_chars %&gt;% map_lgl(&quot;alive&quot;) ## [1] TRUE TRUE TRUE FALSE TRUE FALSE FALSE TRUE TRUE TRUE TRUE FALSE ## [13] TRUE TRUE FALSE TRUE TRUE FALSE TRUE FALSE TRUE TRUE TRUE TRUE ## [25] FALSE TRUE FALSE FALSE TRUE TRUE Можно даже создать новый датафрейм: got_chars %&gt;% tibble(name = map_chr(., &quot;name&quot;), # точка обозначает, в какой аргумент должно все пайпиться id = map_dbl(., &quot;id&quot;), alive = map_lgl(., &quot;alive&quot;)) У этого метода есть один недостаток: если среди значений есть значени null, то функции map_...() их пропускают. В результате получаются векторы разной длины и датафрейм не получается. Чтобы избежать этой проблемы все функции map_...() имеют аргумент .null, в который можно записать значение, которое появится в пустых ячейках, например, .null = NA. Также существует способ создание датафреймов на основе вектора значений при помощи функции enframe(): got_chars %&gt;% map_chr(&quot;name&quot;) %&gt;% enframe() Скачайте частотный словарь русского языка [Шаров, Ляшевская 2011], разбейте столбец lemma на буквы при помощи функции str_split(dict$lemma, \"\"), а на основе полученного списка постройте график, на котором изображено, сколько раз встретилась какая буква: Также можно использовать комбинацию функции map() и attr_getter() чтобы доставать все значения аттрибутов: xml_example$body %&gt;% map(attr_getter(&quot;amount&quot;)) ## $ingredient ## [1] &quot;3&quot; ## ## $ingredient ## [1] &quot;0.25&quot; ## ## $ingredient ## [1] &quot;1.5&quot; 6.2.2 Фильтрация списков Если в списке есть логические выражения, их можно использовать как фильтры. Например, вот так мы оставим только живых героев: got_chars %&gt;% keep(&quot;alive&quot;) %&gt;% map_chr(&quot;name&quot;) ## [1] &quot;Theon Greyjoy&quot; &quot;Tyrion Lannister&quot; &quot;Victarion Greyjoy&quot; ## [4] &quot;Areo Hotah&quot; &quot;Arianne Martell&quot; &quot;Daenerys Targaryen&quot; ## [7] &quot;Davos Seaworth&quot; &quot;Arya Stark&quot; &quot;Asha Greyjoy&quot; ## [10] &quot;Barristan Selmy&quot; &quot;Brandon Stark&quot; &quot;Brienne of Tarth&quot; ## [13] &quot;Cersei Lannister&quot; &quot;Jaime Lannister&quot; &quot;Jon Connington&quot; ## [16] &quot;Jon Snow&quot; &quot;Aeron Greyjoy&quot; &quot;Melisandre&quot; ## [19] &quot;Samwell Tarly&quot; &quot;Sansa Stark&quot; А так – только мертвых: got_chars %&gt;% discard(&quot;alive&quot;) %&gt;% map_chr(&quot;name&quot;) ## [1] &quot;Will&quot; &quot;Chett&quot; &quot;Cressen&quot; &quot;Arys Oakheart&quot; ## [5] &quot;Varamyr&quot; &quot;Catelyn Stark&quot; &quot;Eddard Stark&quot; &quot;Kevan Lannister&quot; ## [9] &quot;Merrett Frey&quot; &quot;Quentyn Martell&quot; Также есть особый фильтр head_while() и tail_while(), который выделяет единицы (с начала и конца) до первого FALSE. got_chars %&gt;% head_while(&quot;alive&quot;) %&gt;% map_chr(&quot;name&quot;) ## [1] &quot;Theon Greyjoy&quot; &quot;Tyrion Lannister&quot; &quot;Victarion Greyjoy&quot; got_chars %&gt;% tail_while(&quot;alive&quot;) %&gt;% map_chr(&quot;name&quot;) ## [1] &quot;Samwell Tarly&quot; &quot;Sansa Stark&quot; Если все еще не понятно, взгляните на нашу таблицу: got_chars %&gt;% tibble(name = map_chr(., &quot;name&quot;), # точка обозначает, в какой аргумент должно все пайпиться alive = map_lgl(., &quot;alive&quot;)) 6.2.3 Операции со списками Рассмотрим простой пример: my_l &lt;- list(a = 1:3, b = c(&quot;a&quot;, &quot;b&quot;), c = list(&quot;z&quot;, c(8, 9))) my_l ## $a ## [1] 1 2 3 ## ## $b ## [1] &quot;a&quot; &quot;b&quot; ## ## $c ## $c[[1]] ## [1] &quot;z&quot; ## ## $c[[2]] ## [1] 8 9 Как уже говорилось выше, функция unlist() линеаризует списки, превращая их в векторы: my_l %&gt;% unlist() ## a1 a2 a3 b1 b2 c1 c2 c3 ## &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;a&quot; &quot;b&quot; &quot;z&quot; &quot;8&quot; &quot;9&quot; Получился поименнованный вектор, если этого недостаточно, можно уничтожить и имена при помощи функции unname(): my_l %&gt;% unlist() %&gt;% unname() ## [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;a&quot; &quot;b&quot; &quot;z&quot; &quot;8&quot; &quot;9&quot; Функция flatten позволяет уничтожить лишь один, верхний,, уровень иерархии: my_l %&gt;% flatten() ## [[1]] ## [1] 1 ## ## [[2]] ## [1] 2 ## ## [[3]] ## [1] 3 ## ## [[4]] ## [1] &quot;a&quot; ## ## [[5]] ## [1] &quot;b&quot; ## ## [[6]] ## [1] &quot;z&quot; ## ## [[7]] ## [1] 8 9 Как видно из этого примера, первый элемент списка my_l превратился в три первых элемента списка, а вот подсписок c = list(\"z\", c(8, 9)) превратился в элемент z и вектор c(8, 9). Существуют также функции append() и prepend(), которые позволяют добавлять новый посписок после (или до) старого: list(c(1, 2), c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)) %&gt;% append(list(new = c(TRUE, FALSE))) ## [[1]] ## [1] 1 2 ## ## [[2]] ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; ## ## $new ## [1] TRUE FALSE list(c(1, 2), c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)) %&gt;% prepend(list(new = c(TRUE, FALSE))) ## $new ## [1] TRUE FALSE ## ## [[2]] ## [1] 1 2 ## ## [[3]] ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; Существует также функции cross() и cross2(), которые позволяют получить уникальные комбинации объектов из двух списков: list(c(&quot;a&quot;, &quot;b&quot;), 1:3) %&gt;% cross() %&gt;% str() ## List of 6 ## $ :List of 2 ## ..$ : chr &quot;a&quot; ## ..$ : int 1 ## $ :List of 2 ## ..$ : chr &quot;b&quot; ## ..$ : int 1 ## $ :List of 2 ## ..$ : chr &quot;a&quot; ## ..$ : int 2 ## $ :List of 2 ## ..$ : chr &quot;b&quot; ## ..$ : int 2 ## $ :List of 2 ## ..$ : chr &quot;a&quot; ## ..$ : int 3 ## $ :List of 2 ## ..$ : chr &quot;b&quot; ## ..$ : int 3 list(&quot;a&quot;, &quot;b&quot;) %&gt;% cross2(1:3) %&gt;% str() ## List of 6 ## $ :List of 2 ## ..$ : chr &quot;a&quot; ## ..$ : int 1 ## $ :List of 2 ## ..$ : chr &quot;b&quot; ## ..$ : int 1 ## $ :List of 2 ## ..$ : chr &quot;a&quot; ## ..$ : int 2 ## $ :List of 2 ## ..$ : chr &quot;b&quot; ## ..$ : int 2 ## $ :List of 2 ## ..$ : chr &quot;a&quot; ## ..$ : int 3 ## $ :List of 2 ## ..$ : chr &quot;b&quot; ## ..$ : int 3 Скачайте пьесу “Ревизор”, размеченную в TEI формате и постройте представленный ниже график, на котором изображено количество реплик для каждого персонажа. Превратив данные в список, лучше начинать работать с переменной revizor$TEI$text$body: "]
]
